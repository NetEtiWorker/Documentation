<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>LogicalTaskTree Namensraum</title><meta name="Title" content="LogicalTaskTree" /><meta name="Microsoft.Help.Id" content="N:LogicalTaskTree" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree Namensraum" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="N_LogicalTaskTree" /><meta name="guid" content="N_LogicalTaskTree" /><meta name="Description" content="Haupt-Verarbeitungslogik von Vishnu" /><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - der logische Prozess-Monitor</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Logical<wbr />Task<wbr />Tree Namensraum</h1></td></tr></table><div class="summary">Haupt-Verarbeitungslogik von Vishnu</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDACA')" onkeypress="SectionExpandCollapse_CheckKey('IDACA', event)" tabindex="0"><img id="IDACAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Klassen</span></div><div id="IDACASection" class="collapsibleSection"><table id="classList" class="members"><tr><th class="iconColumn"> </th><th>Klasse</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_CheckerShell.htm">CheckerShell</a></td><td>
             Kapselt den Aufruf einer externen Arbeitsroutine,
             die dynamisch als Dll-Plugin geladen wird.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_ConfigurationManager.htm">ConfigurationManager</a></td><td>
             Statische Klasse für die Speicherung von JobList-Zuständen auf User-Anforderung.
             Es wird für jede JobList gespeichert, ob sie in der Bildschirmdarstellung
             zusammengefaltet ist (collapsed) oder ihre Unterknoten sichtbar sind.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_Job.htm">Job</a></td><td>
             Konkreter Job für eine Joblist in einem LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_JobConnector.htm">JobConnector</a></td><td>
             Wird automatisch generiert, wenn der Name eines Jobs
             innerhalb eines logischen Ausdrucks mehrfach auftritt. Stellt das
             Gruppen-Ergebnis des zuerst aufgetretenen Jobs gleichen Namens ähnlich
             wie in einem Einzelknoten dar.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_JobList.htm">JobList</a></td><td>
             Root eines (Teil-)Baums eines LogicalTaskTree.
             Hier werden die Logik, Bedingungen, Status für einen (Teil-)Baum verwaltet.
             Diese Klasse wird von außen mit der Logik und den Details
             (Worker, Namen, boolescher Ausdruck, etc.) bestückt.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_JobPackage.htm">JobPackage</a></td><td>
             Container für einen Job, einen logischen Namen für diesen Job
             und einen optionalen Dateipfad zum Job-File.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_JobProviderBase.htm">JobProviderBase</a></td><td>
             Basisklasse für alle JobProvider; muss abgeleitet werden.
                       implementiert IJobProvider.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_JobProviderBase_UndefinedJobProvider.htm">JobProviderBase<span id="LSTC9213974_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UndefinedJobProvider</a></td><td>
            Klassendefinition für einen undefinierten JobProvider.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJobProvider' ersetzt werden.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_LoggerShell.htm">LoggerShell</a></td><td>
             Kapselt den Aufruf eines externen Loggers,
             der dynamisch als Dll-Plugin geladen wird.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a></td><td>
             Abstrakte Basisklasse für einen Knoten im LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_LogicalTaskTree.htm">LogicalTaskTree</a></td><td>
             Enthält einen nach erweiterten logischen Ausdrücken augebauten,
             hierarchisch strukturierten Tree mit Blättern, in denen benutzerspezifische
             Verarbeitungsknoten dynamisch eingehängt werden können.
             Dient als Framework zur Prozess-Überwachung und -Steuerung.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeCheckerBase.htm">NodeCheckerBase</a></td><td>
             Basisklasse für NodeChecker und ValueModifier;
                       implementiert INodeChecker; muss abgeleitet werden.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeConnector.htm">NodeConnector</a></td><td>
             Wird automatisch generiert, wenn der Name eines Einzelknotens
             innerhalb eines logischen Ausdrucks mehrfach auftritt. Wirkt nach außen so,
             als ob der Knoten zweimal (oder mehrmals) im Tree aufträte, verweist intern
             aber nur auf den ersten Knoten dieses Namens. Dadurch wird sichergestellt,
             dass die zu dem ursprünglichen Knoten gehörige Verarbeitung in Tree nur
             einmal ausgeführt wird.
             Filtert das ReturnObject eines INodeCheckers nach Typ und ggf. Format-String.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeList.htm">NodeList</a></td><td>
             Knoten mit Kindern in LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a></td><td>
             Funktion: Basisklasse für Knoten mit Kindern: NodeList und NodeConnector.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeResultComparer.htm">NodeResultComparer</a></td><td>
             Vergleicht i.d.R. zwei oder mehr Result.ReturnObjects möglichst typgerecht über
             einen übergebenen Vergleichsoperator miteinander. Unterstützte Typen sind: bool, DateTime,
             int, double und String. Bei unbekannten Typen wird über die ToString()-Methode verglichen.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_NodeShellBase.htm">NodeShellBase</a></td><td>
             Basisklasse für CheckerShell, TriggerShell, WorkerShell.
             Stellt Parameter-Ersetzung zur Verfügung.
             Berücksichtigt eine lokale IParameterReplacer-Dll oder eine solche
             im UserAssemblies Verzeichnis.
             Stellt bool CanRun() zur Verfügung.
             Berücksichtigt eine lokale ICanRun-Dll oder eine solche
             im UserAssemblies Verzeichnis (Hinweis: IParameterReplacer und
             ICanRun können auch von einer gemeinsamen dll implementiert werden).
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_SingleNode.htm">SingleNode</a></td><td>
             Endknoten in einem LogicalTaskTree.
             Besitzt einen Checker, der die Arbeit macht und ein logisches
             Ergebnis zurück liefert, ggf. auch noch ein Rückgabe-Objekt.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_Snapshot.htm">Snapshot</a></td><td>
             Knoten in einem LogicalTaskTree, der zur Anzeige
             eines Remote-LogicalTaskTree dient.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_ThreadLocker.htm">ThreadLocker</a></td><td>
             Verwaltet ein statisches Dictionary von Namen und Lock-Objekten.
             Sperrt und entsperrt das einem Namen zugeordnete Objekt global.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_TreeEventTrigger.htm">TreeEventTrigger</a></td><td>
             Trigger für interne Events aus dem Tree.
             Macht Tree-Events für Trigger "von außen" nutzbar und erweitert
             so das Trigger-Einsatzspektrum.
             Ein TreeEventTrigger triggert 1 bis n Checker.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_TriggerShell.htm">TriggerShell</a></td><td>
             Kapselt einen internen (TreeEvent-) oder externen (Dll-) Trigger.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_UndefinedJob.htm">UndefinedJob</a></td><td>
            Klassendefinition für einen undefinierten Job.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJob' (siehe weiter unten) ersetzt werden.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_UndefinedJobListClass.htm">UndefinedJobListClass</a></td><td>
            Klassendefinition für eine undefinierte JobList.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJobList' ersetzt werden.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_UndefinedLogicalNodeClass.htm">UndefinedLogicalNodeClass</a></td><td>
            Klassendefinition für eine undefinierte LogicalNode.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedLogicalNode' ersetzt werden.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_ValueModifier_1.htm">ValueModifier<span id="LSTC9213974_1" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTC9213974_2" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
             Filtert das ReturnObject eines INodeCheckers nach Typ und ggf. Format-String.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_Workers.htm">Workers</a></td><td>
            Dictionary, das WorkerShell-Arrays zu aus Knoten-Id + ":" + TreeEvents
            gebildeten Keys enthält.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Klasse" title="Public Klasse" /></td><td><a href="T_LogicalTaskTree_WorkerShell.htm">WorkerShell</a></td><td>
             Kapselt den Aufruf einer externen Arbeitsroutine,
             die als Reaktion auf eine definierte Änderung des Tree-Zustands
             (TreeEvent) als externe Exe ausgeführt wird (fire and forget)
             TODO: später eventuell auch als lightweight Dll-Plugin realisieren.
             </td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCCA')" onkeypress="SectionExpandCollapse_CheckKey('IDCCA', event)" tabindex="0"><img id="IDCCAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Schnittstellen</span></div><div id="IDCCASection" class="collapsibleSection"><table id="interfaceList" class="members"><tr><th class="iconColumn"> </th><th>Schnittstelle</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubInterface.gif" alt="Public Schnittstelle" title="Public Schnittstelle" /></td><td><a href="T_LogicalTaskTree_IJobProvider.htm">IJobProvider</a></td><td>
             Interface für Lieferanten von Jobs für JobList-Knoten
                       im LogicalTaskTree.
             </td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDNCA')" onkeypress="SectionExpandCollapse_CheckKey('IDNCA', event)" tabindex="0"><img id="IDNCAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Delegat</span></div><div id="IDNCASection" class="collapsibleSection"><table id="delegateList" class="members"><tr><th class="iconColumn"> </th><th>Delegat</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_AllStatesChangedEventHandler.htm">AllStatesChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_ExceptionRaisedEventHandler.htm">ExceptionRaisedEventHandler</a></td><td>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_LastNotNullLogicalChangedEventHandler.htm">LastNotNullLogicalChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_LogicalChangedEventHandler.htm">LogicalChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_LogicalStateChangedEventHandler.htm">LogicalStateChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich der Ergebnis-Zustand eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_NodeChangedEventHandler.htm">NodeChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_ResultChangedEventHandler.htm">ResultChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_SnapshotRefreshedEventHandler.htm">SnapshotRefreshedEventHandler</a></td><td>
            Wird aufgerufen, wenn der Snapshot refreshed wurde.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegat" title="Public Delegat" /></td><td><a href="T_LogicalTaskTree_StateChangedEventHandler.htm">StateChangedEventHandler</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </td></tr></table></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>