<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogicalTaskTree</name>
    </assembly>
    <members>
        <member name="T:LogicalTaskTree.CheckerShell">
             <summary>
             Kapselt den Aufruf einer externen Arbeitsroutine,
             die dynamisch als Dll-Plugin geladen wird.
             </summary>
             <remarks>
             File: CheckerShell.cs
             Autor: Erik Nagel
            
             01.03.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.CheckerShell.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt (oder beobachtet).
            </summary>
            <param name="checkerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, False oder null</returns>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.Dispose">
            <summary>
            Öffentliche Methode zum Aufräumen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.Dispose(System.Boolean)">
            <summary>
            Hier wird aufgeräumt: ruft für alle User-Elemente, die Disposable sind, Dispose() auf.;
            </summary>
            <param name="disposing">Bei true wurde diese Methode von der öffentlichen Dispose-Methode
            aufgerufen; bei false vom internen Destruktor.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.Finalize">
            <summary>
            Finalizer: wird vom GarbageCollector aufgerufen.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.CheckerShell.IsMirror">
            <summary>
            Bei true spiegelt dieser Knoten die Werte eines referenzierten
            Knoten 1:1 wieder.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.CheckerShell.SlavePathName">
            <summary>
            Pfad zur Dll der externen Checker-Routine.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.CheckerShell.CheckerParameters">
            <summary>
            Spezifische Aufrufparameter für die Checker-Dll oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.CheckerShell.OriginalCheckerParameters">
            <summary>
            Unveränderte Aufrufparameter für die Checker-Dll oder null.
            Die OriginalCheckerParameters können im Gegensatz zu den CheckerParameters
            nicht mehr nachträglich durch ReplaceWildcardsNPathes verändert werden.
            Da ReplaceWildcardsNPathes u.U. auch  Pfade einsetzt, die durch das Caching des ersten
            Auftretens je nach Timing unterschiedlich sein können, sind solche veränderbaren
            Parameter nicht für Equal-Vergleiche geeignet.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell)">
            <summary>
            Konstruktor.
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerTrigger">Ein Trigger, der den Job wiederholt aufruft.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerTrigger">Ein Trigger, der den Job wiederholt aufruft.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="checkerTrigger">Ein Trigger, der den Job wiederholt aufruft.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="checkerTrigger">Ein Trigger, der den Job wiederholt aufruft.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerLogger">Ein Logger, der Logging-Informationen weiterverarbeitet.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerLogger">Ein Logger, der Logging-Informationen weiterverarbeitet.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="checkerLogger">Ein Logger, der Logging-Informationen weiterverarbeitet.</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="checkerLogger">Ein Logger, der Logging-Informationen weiterverarbeitet.</param>
            <param name="alwaysReloadChecker">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,LogicalTaskTree.LoggerShell,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeChecker implementiert.</param>
            <param name="checkerParameters">Spezifische Aufrufparameter u.U. mit Variablenersetzung.</param>
            <param name="originalCheckerParameters">Spezifische Aufrufparameter ohne Variablenersetzung.</param>
            <param name="checkerTrigger">Ein Trigger, der den Job wiederholt aufruft oder null.</param>
            <param name="checkerLogger">Ein Logger, der Logging-Informationen weiterverarbeitet.</param>
            <param name="alwaysReload">Bei True wird die Dll für jeden Run neu instanziiert (für den Debug von Memory Leaks).</param>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.ModifyValue(System.Object)">
            <summary>
            Konvertiert einen Wert in ein gegebenes Format.
            Muss überschrieben werden, deshalb hier ohne Funktion
            (spiegelt den Eingabewert zurück) implementiert.
            </summary>
            <param name="toConvert">Zu konvertierender Wert</param>
            <returns>Unveränderter Wert.</returns>
        </member>
        <member name="M:LogicalTaskTree.CheckerShell.runIt(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt (oder beobachtet).
            </summary>
            <param name="checkerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, False oder null</returns>
        </member>
        <member name="P:LogicalTaskTree.EXEtoSlaveDllFake.ReturnObject">
            <summary>
            Konsolen-Ausgabe der Fremd-Exe.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.EXEtoSlaveDllFake.exec(System.String,System.Object@)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt.
            </summary>
            <param name="slaveParameters">Aufrufparameter für die Exe.</param>
            <param name="returnObject">StdOut der Exe.</param>
            <returns>Exe-Returncode:0 = True, ungleich 0 = False.</returns>
        </member>
        <member name="T:LogicalTaskTree.ConfigurationManager">
             <summary>
             Statische Klasse für die Speicherung von JobList-Zuständen auf User-Anforderung.
             Es wird für jede JobList gespeichert, ob sie in der Bildschirmdarstellung
             zusammengefaltet ist (collapsed) oder ihre Unterknoten sichtbar sind.
             </summary>
             <remarks>
             File: ConfigurationManager.cs
             Autor: Erik Nagel
            
             10.02.2018 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.SaveLocalConfiguration(Vishnu.Interchange.IExpandableNode,Vishnu.Interchange.TreeOrientation,Vishnu.Interchange.WindowAspects)">
            <summary>
            Speichert die aktuelle Konfiguration im LocalConfigurationDirectory.
            Die aktuelle Konfiguration enthält die relevanten aktuellen UI-Eigenschaften (WindowAspects)
            und für jedes LogicalNodeViewModel, ob sein Knoten in der Bildschirmdarstellung
            zusammengefaltet ist (collapsed) oder dessen Unterknoten sichtbar sind.
            </summary>
            <param name="tree">Root-LogicalNodeViewModel des zu speichernden (Teil-)Trees.</param>
            <param name="treeOrientationState">Aktuelle Ausrichtung des LogicalTaskTree<br></br>
              AlternatingHorizontal: Alternierender Aufbau, waagerecht beginnend.
              Vertical: Senkrechter Aufbau.
              Horizontal: Waagerechter Aufbau.
              AlternatingVertical: Alternierender Aufbau, senkrecht beginnend.</param>
            <param name="windowAspects">Aktuelle UI-Eigenschaften (z.B. WindowTop, WindowWidth, ...).</param>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.LoadLocalConfiguration(System.String)">
            <summary>
            Lädt die aktuelle Konfiguration aus LocalConfigurationPath.
            Die aktuelle Konfiguration speichert für jedes LogicalNodeViewModel,
            ob sein Knoten in der Bildschirmdarstellung zusammengefaltet ist (collapsed)
            oder dessen Unterknoten sichtbar sind.
            Die Sichtbarkeit der Knoten kann dann gemäß der geladenen
            Konfiguration wiederhergestellt werden.
            </summary>
            <param name="jobName">Job-Name des zu ladenden Jobs.</param>
            <returns>True, wenn eine lokale Konfiguration geladen werden konnte.</returns>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.IsExpanded(System.String)">
            <summary>
            Liefert für einen Knoten (nodePath) die Information, ob er
            zusammengefaltet oder expandiert dargestellt werden soll.
            Liefert dann null zurück, wenn entweder der Knoten keine
            NodeList ist oder keine lokale Konfiguration geladen wurde.
            </summary>
            <param name="nodePath">Pfad zum Knoten im Tree.</param>
            <returns>False, wenn der Knoten zusammengefaltet dargestellt werden soll;<br></br>
            True, wenn der Knoten nicht zusammengefaltet dargestellt werden soll;<br></br>
            Null, wenn der Knoten keine NodeList ist oder keine lokale Konfiguration geladen wurde.</returns>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.#cctor">
            <summary>
            Standard Konstruktor.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.Tree2XML(Vishnu.Interchange.IExpandableNode)">
            <summary>
            Gibt den (Teil-)Baum in eine XML-Struktur aus.
            </summary>
            <returns>Baumdarstellung in einer XML-Struktur (XElement).</returns>
        </member>
        <member name="M:LogicalTaskTree.ConfigurationManager.Node2XML(System.Int32,Vishnu.Interchange.IExpandableNode,System.Object)">
            <summary>
            Erstellt für das übergebene LogicalNodeViewModel eine XML-Beschreibung.
            </summary>
            <param name="depth">Nullbasierter Zähler der Rekursionstiefe eines Knotens im LogicalTaskTree.</param>
            <param name="node">Basisklasse eines Knotens im LogicalTaskTree.</param>
            <param name="parent">Elternelement des User-Objekts.</param>
            <returns>XElement mit Knoten-Informationen.</returns>
        </member>
        <member name="T:LogicalTaskTree.IJobProvider">
             <summary>
             Interface für Lieferanten von Jobs für JobList-Knoten
                       im LogicalTaskTree.
             </summary>
             <remarks>
             File: IJobProvider.cs
             Autor: Erik Nagel
            
             26.01.2012 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.IJobProvider.GetJob(System.String@)">
            <summary>
            Liefert eine konkrete Job-Instanz für eine JobList
            in einem LogicalTaskTree.
            </summary>
            <param name="name">Der Name des Jobs</param>
            <returns>Instanz des Jobs, der zu dem Namen gehört.</returns>
        </member>
        <member name="M:LogicalTaskTree.IJobProvider.GetLogicalJobName(System.String)">
            <summary>
            Retourniert den logischen Namen des Jobs mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Logischer Name des Jobs oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.IJobProvider.GetPhysicalJobPath(System.String)">
            <summary>
            Retourniert den physischen Namen des JobPackages mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Physischer Name des JobPackages oder null.</returns>
        </member>
        <member name="T:LogicalTaskTree.UndefinedJob">
            <summary>
            Klassendefinition für einen undefinierten Job.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJob' (siehe weiter unten) ersetzt werden.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.Job">
             <summary>
             Konkreter Job für eine Joblist in einem LogicalTaskTree.
             </summary>
             <remarks>
             File: jobPackage.Job.cs
             Autor: Erik Nagel
            
             26.01.2012 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.Job.LogicalExpression">
            <summary>
            Der logische Ausdruck, der durch eine JobList im LogicalTaskTree
            abgearbeitet wird. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.Checkers">
            <summary>
            Liste von externen Prüfroutinen für einen jobPackage.Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.Triggers">
            <summary>
            Liste von externen Triggern für einen jobPackage.Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.Loggers">
            <summary>
            Liste von externen Loggern für einen jobPackage.Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.SnapshotNames">
            <summary>
            Liste von Snapshot-Namen für einen jobPackage.Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.JobSnapshotTrigger">
            <summary>
            Ein optionaler Trigger, der steuert, wann ein Snapshot des Jobs erstellt
            werden soll oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.JobTrigger">
            <summary>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult auf false).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.JobLogger">
            <summary>
            Ein optionaler Logger, der dem Job zugeordnet
            ist oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.JobListUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für eine JobList.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.JobConnectorUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für einen JobConnector.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.NodeListUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für eine NodeList.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.SingleNodeUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für eine SingleNode.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.ConstantNodeUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für eine Constant-SingleNode.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.SnapshotUserControlPath">
            <summary>
            Pfad zum dynamisch zu ladenden UserControl für eine JobList.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.BreakWithResult">
            <summary>
            Ein Job kann u.U. schon ein eindeutiges logisches Ergebnis haben,
            bevor alle Kinder ihre Verarbeitung beendet haben.
            Bei BreakWithResult=True werden diese dann abgebochen.
            Greift nicht, wenn ein JobTrigger gesetzt wurde.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.ThreadLocked">
            <summary>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False;
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.LockName">
            <summary>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.IsVolatile">
            <summary>
            Bei True wird zur Ergebnisermittlung im Tree "Logical" benutzt,
            bei False "LastNotNullLogical".
            Default: False
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.StartCollapsed">
            <summary>
            Bei True wird der Job beim Start zusammengeklappt angezeigt, wenn die UI dies unterstützt.
            Default: False
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.IsGlobal">
            <summary>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.InitNodes">
            <summary>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.TriggeredRunDelay">
            <summary>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.MaxSubJobDepth">
            <summary>
            Die größte Hierarchie-Tiefe von Sub-Jobs dieses Jobs.
            Hat dieser Job z.B. einen Sub-Job, ist der Wert 1. Hat der Sub-Job
            wiederum einen Sub-Job, dann 2 usw., ansonsten 0.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.LogicalChangedDelay">
            <summary>
            Verzögerung in Millisekunden, bevor ein LogicalCanged-Event weitergegeben wird.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.IsDefaultSnapshot">
            <summary>
            True, wenn dieser Snapshot nicht geladen werden konnte und stattdessen
            der Default-Snapshot geladen wurde.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.WasDefaultSnapshot">
            <summary>
            True, wenn dieser Snapshot geladen werden und vorher
            der Default-Snapshot geladen wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Job.#ctor">
            <summary>
            Konstruktor.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.EventTriggers">
            <summary>
            Liste von internen Triggern für einen jobPackage.Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.Workers">
            <summary>
            Liste von externen Arbeitsroutinen für einen jobPackage.Job.
            Ist ein Dictionary mit WorkerShell-Arrays zu aus
            Knoten-Id + ":" + TreeEvents-String gebildeten Keys.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Job.WorkersDictionary">
            <summary>
            Liste von externen Arbeitsroutinen für einen jobPackage.Job.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.Job.undefinedJob">
            <summary>
            Statische Instanz für einen undefinierten Job.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch diese Instanz ersetzt werden.
            Es kann dann ggf. auf 'is IUndefinedElement' geprüft werden.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.Workers">
            <summary>
            Dictionary, das WorkerShell-Arrays zu aus Knoten-Id + ":" + TreeEvents
            gebildeten Keys enthält.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Workers.ContainsCombinedKey(System.String)">
            <summary>
            Prüft, ob Workers zu einem aus durch ":" getrennten NodeId und TreeEvent zusammengesetzten
            Key ein WorkerShell-Array enthält.
            </summary>
            <param name="node_id">Id des zu prüfenden Knotens.</param>
            <returns>True, wenn Workers den aus NodeId + ":" + TreeEvent zusammengesetzten Key enthält.</returns>
        </member>
        <member name="M:LogicalTaskTree.Workers.Add(System.String,LogicalTaskTree.WorkerShell[])">
            <summary>
            Fügt ein WorkerShell-Array mit einem aus Knoten-Id + ":" + TreeEventsString
            gebildeten Key in Workers ein.
            </summary>
            <param name="node_event">Ein String mit durch ":" getrennten NodeId und TreeEvents.</param>
            <param name="workerArray">Ein Array von WorkerShells.</param>
        </member>
        <member name="P:LogicalTaskTree.Workers.Keys">
            <summary>
            Liefert die Keys von Workers.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Workers.Values">
            <summary>
            Liefert die Values von Workers.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Workers.Item(System.String)">
            <summary>
            Indexer: liefert zu einem aus Knoten-Id + : + TreeEvent-Name zusammengesetzten Key
            das zugehörige WorkerShell-Array aus Workers.
            </summary>
            <param name="key"></param>
            <returns>Das WorkerShell-Array zu einem aus Knoten-Id + : + TreeEvent-Name zusammengesetzten Key.</returns>
        </member>
        <member name="M:LogicalTaskTree.Workers.#ctor(System.Action{System.String,LogicalTaskTree.WorkerShell[]},System.Func{System.String,LogicalTaskTree.WorkerShell[]},System.Func{System.String,System.Boolean},System.Func{System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,LogicalTaskTree.WorkerShell[]}}.KeyCollection},System.Func{System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,LogicalTaskTree.WorkerShell[]}}.ValueCollection})">
            <summary>
            Konstruktor - übernimmt die 'Zugriffsmethoden auf das private Dictionary
            "Workers" in der instanziierenden Klasse (hier Job).
            </summary>
            <param name="jobAddWorkers">Fügt dem privaten Dictionary _workers von Job ein Element hinzu.</param>
            <param name="jobGetWorkers">Holt zu einem aus Knoten-Id + : + TreeEvent-Namen zusammengesetzten Key
            direkt das zugehörige Worker-Array aus dem privaten Dictionarys _workers von Job.</param>
            <param name="jobContainsCombinedKey">Prüft, ob das private Dictionary zu einem aus durch ":" getrennten
            NodeId und TreeEvents zusammengesetzten Key ein WorkerShell-Array enthält.</param>
            <param name="jobGetKeys">Holt die Liste von Keys des privaten Dictionarys _workers von Job.</param>
            <param name="jobGetValues">Holt die Liste von Keys des privaten Dictionarys _workers von Job.</param>
        </member>
        <member name="T:LogicalTaskTree.JobConnector">
             <summary>
             Wird automatisch generiert, wenn der Name eines Jobs
             innerhalb eines logischen Ausdrucks mehrfach auftritt. Stellt das
             Gruppen-Ergebnis des zuerst aufgetretenen Jobs gleichen Namens ähnlich
             wie in einem Einzelknoten dar.
             </summary>
             <remarks>
             File: ValueModifier.cs
             Autor: Erik Nagel
            
             20.08.2015 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.LogicalExpression">
            <summary>
            Der logische Ausdruck, der durch die referenzierte JobList abgearbeitet wird.
            Die Variablen entsprechen Checkern (Tree-Blätter bzw. Endknoten). 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.LastResult">
            <summary>
            Liefert ein Result für diesen Knoten.
            </summary>
            <returns>Ein Result-Objekten für den Knoten.</returns>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.Logical">
            <summary>
            Der logische Zustand des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.State">
            <summary>
            Der Verarbeitungszustand des Knotens:
            None, Waiting, Working, Finished, Busy (= Waiting | Working) oder CanStart (= None|Finished).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.LogicalState">
            <summary>
            Der Ergebnis-Zustand des Knotens:
            None, Done, Fault, Timeout, UserAbort.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.LastRun">
            <summary>
            Zeitpunkt des letzten Starts des Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.NextRun">
            <summary>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.NextRunInfo">
            <summary>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.ReferencedNodeId">
            <summary>
            Id des ursprünglich referenzierten Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.ReferencedNodePath">
            <summary>
            Pfad des ursprünglich referenzierten Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.SingleNodes">
            <summary>
            Property für die Fortschrittsberechnung.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobConnector.SingleNodesFinished">
            <summary>
            Property für die Fortschrittsberechnung.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element - übernimmt den Eltern-Knoten.
            </summary>
            <param name="mother">Der Eltern-Knoten.</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.JobConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)">
            <summary>
            Konstruktor
            </summary>
            <param name="id">Eindeutige Kennung des Knotens.</param>
            <param name="mother">Id des Parent-Knotens.</param>
            <param name="rootJoblist">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="node">Die LogicalNode, zu der sich dieser NodeConnector verbinden soll.</param>
            <param name="valueModifier">Ein optionaler ValueModifier oder null.</param>
        </member>
        <member name="F:LogicalTaskTree.JobConnector._state">
            <summary>
            Der Verarbeitungszustand des Knotens:
            Null, None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), Busy (= Waiting | Working) oder CanStart (= None | Ready)
            (internes Feld).
            <see cref="T:Vishnu.Interchange.NodeState"/>
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobConnector._logical">
            <summary>
            Der logische Zustand des Knotens (internes Feld).
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobConnector._logicalState">
            <summary>
            Der Ergebnis-Zustand des Knotens:
            None, Start, Done, Fault, Timeout, UserAbort (internes Feld).
            </summary>
        </member>
        <member name="T:LogicalTaskTree.UndefinedJobListClass">
            <summary>
            Klassendefinition für eine undefinierte JobList.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJobList' ersetzt werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.UndefinedJobListClass.UndefinedJobList">
            <summary>
            Statische Instanz für eine undefinierte JobList.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von JobLists und LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch diese Instanz ersetzt werden.
            Es kann dann ggf. auf 'is IUndefinedElement' geprüft werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.UndefinedJobListClass.#ctor">
            <summary>
            Standard-Konstruktor.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.JobList">
             <summary>
             Root eines (Teil-)Baums eines LogicalTaskTree.
             Hier werden die Logik, Bedingungen, Status für einen (Teil-)Baum verwaltet.
             Diese Klasse wird von außen mit der Logik und den Details
             (Worker, Namen, boolescher Ausdruck, etc.) bestückt.
             </summary>
             <remarks>
             File: JobList.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             20.04.2019 GetTriggeringNodeIdAndTriggeredNodes implementiert.
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.JobList.LogicalExpression">
            <summary>
            Der logische Ausdruck, der durch diese JobList abgearbeitet wird.
            Die Variablen entsprechen Checker-Knoten. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.SnapshotTrigger">
            <summary>
            Ein optionaler Trigger, der steuert, wann ein Snapshot des Jobs erstellt
            werden soll oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.IsConrolled">
            <summary>
            Bei true ist diese Joblist ein JobController, das heist u.a.:
            Run resettet den Teilbaum (setzt LastNotNullLogical auf null)
            und startet den Knoten sofort (nicht nur einen eventuellen Trigger).
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.SnapshotUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden SnapshotUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.JobConnectorUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden NodeListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.NodeListUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden NodeListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.SingleNodeUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden SingleNodeUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.ConstantNodeUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden ConstantNodeUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.MaxSubJobDepth">
            <summary>
            Die höchste Hierarchietiefe von Unter-JobLists zu dieser JobList.
            Hat z.B. diese JobList keine untergeordnete JobList, ist
            MaxSubJobDepth = 0, bei einer Sub-JobList, die wiederum eine
            Sub-JobList hat, wäre MaxSubJobDepth = 2.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.LogicalChangedDelay">
            <summary>
            Verzögerung in Millisekunden, bevor ein LogicalCanged-Event weitergegeben wird.
            Default: 0
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element - übernimmt den Eltern-Knoten.
            </summary>
            <param name="mother">Der Eltern-Knoten.</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)">
            <summary>
            Konstruktor
            </summary>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="jobProvider">Die Datenquelle für den Job</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.RunTreeExternals">
            <summary>
            Startet alle TreeExternals zu dieser JobList und aller Sub-JobLists.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.RegisterTriggeredNodes">
            <summary>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.Run(Vishnu.Interchange.TreeEvent)">
            <summary>
            Überschreibt die Run-Logik aus LogicalNode um ggf.
            noch einen vorhandenen SnapshotTrigger und ggf. 
            TreeExternals zu starten.
            </summary>
            <param name="source">Bei abhängigen Checkern das auslösende TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.BreakTreeExternals(System.Boolean)">
            <summary>
            Stoppt alle TreeExternals zu dieser JobList und aller Sub-JobLists.
            </summary>
            <param name="userBreak">Bei True hat der Anwender das Break ausgelöst.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.Break(System.Boolean)">
            <summary>
            Wird aufgerufen, wenn der Teilbaum vom Anwender bewusst gestoppt wurde.
            </summary>
            <param name="userBreak">Bei True hat der Anwender das Break ausgelöst.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetTopRootJobList">
            <summary>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            </summary>
            <returns>Die für den Knoten gültige, oberste Root-JobList.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.PublishAllTreeInfos">
            <summary>
            Gibt über InfoController den aktuellen Tree mit den aktuellen Zuständen seiner Knoten aus.
            Kann für Debug-Zwecke genutzt werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetAllTreeInfos">
            <summary>
            Liefert eine Zusammenfassung des aktuellen Trees
            mit den aktuellen Zuständen seiner Knoten als String-List.
            Kann für Debug-Zwecke genutzt werden.
            </summary>
            <returns>Zusammenfassung des aktuellen Trees mit den aktuellen Zuständen seiner Knoten als String-List.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.Show(System.String)">
            <summary>
            Gibt den (Teil-)Baum in eine StringList aus.
            </summary>
            <param name="indent">Einrückung pro Hierarchiestufe.</param>
            <returns>Baumdarstellung in einer StringList</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.ShowSyntaxTree">
            <summary>
            Gibt den zugehörigen Boolean-Tree in eine StringList aus.
            </summary>
            <returns>Baumdarstellung in einer StringList</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.ShowFlatSyntaxTree">
            <summary>
            Gibt den verarbeiteten booleschen Ausdruck auf Basis des boolean-Trees
            wiederum einzeilig als logischen Ausdruck aus.
            </summary>
            <returns>Ein einzeiliger boolescher Ausdruck</returns>
        </member>
        <member name="P:LogicalTaskTree.JobList.Job">
            <summary>
            Der externe Job mit logischem Ausdruck und u.a. Dictionary der Worker. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.AllCheckersForUnreferencingNodeConnectors">
            <summary>
            Dictionary von externen Prüfroutinen für einen jobPackage.Job mit Namen als Key.
            Wird als Lookup für unaufgelöste JobConnector-Referenzen genutzt.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.UnsatisfiedNodeConnectors">
            <summary>
            Liste von NodeConnectoren, die beim Parsen der Jobs noch nicht aufgelöst
            werden konnten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.TreeExternalCheckers">
            <summary>
            Dictionary von externen Prüfroutinen für eine JobList, die nicht in
            der LogicalExpression referenziert werden; Checker, die ausschließlich
            über ValueModifier angesprochen werden.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobList.TreeExternalSingleNodes">
            <summary>
            Liste von externen SingleNodes für die TopRootJobList, die in keiner
            der LogicalExpressions referenziert werden; Nodes, die ausschließlich
            über NodeConnectoren angesprochen werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.TriggerRelevantEventCache">
            <summary>
            Cache zur Beschleunigung der Verarbeitung von TreeEvents
            bezogen auf EventTrigger.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.WorkerRelevantEventCache">
            <summary>
            Cache zur Beschleunigung der Verarbeitung von TreeEvents
            bezogen auf Worker.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.LoggerRelevantEventCache">
            <summary>
            Cache zur Beschleunigung der Verarbeitung von TreeEvents
            bezogen auf Logger.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.JobsByName">
            <summary>
            Dictionary von JobLists mit ihren Namen als Keys.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.NodesByName">
            <summary>
            Dictionary von LogicalNodes mit ihren Namen als Keys.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.TreeRootLastChanceNodesByName">
            <summary>
            Dictionary von LogicalNodes mit ihren Namen als Keys.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobList.NodesById">
            <summary>
            Dictionary von LogicalNodes mit ihren Ids als Keys.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.ToString">
            <summary>
            Überschriebene ToString()-Methode.
            </summary>
            <returns>Verkettete Properties als String.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.Equals(System.Object)">
            <summary>
            Vergleicht den Inhalt dieser JobList nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen JobList.
            </summary>
            <param name="obj">Die JobList zum Vergleich.</param>
            <returns>True, wenn die übergebene JobList inhaltlich gleich dieser ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetHashCode">
            <summary>
            Erzeugt einen Hashcode für diese JobList.
            </summary>
            <returns>Integer mit Hashwert.</returns>
        </member>
        <member name="F:LogicalTaskTree.JobList.IsChangeEventPending">
            <summary>
            Bei True befindet sich diese JobList in einer kurzen Wartephase
            vor Veränderung des eigenen logischen Zustands. Hintergrund:
            Kinder, die zueinander in der Beziehung Node - NodeConnector
            stehen, lösen im Millisekunden-Bereich zu unterschiedlichen
            Zeiten aus. Wenn besitzende JobList sofort reagieren würde,
            könnten abhängige Worker oder TreeEvents zwischen der
            Zustandsänderung von Node und der von NodeConnector auslösen,
            obwohl am Ende keine relevante logische Änderung stattgefunden
            hat. Die Wartezeit wird über den Parameter "LogicalChangedDelay"
            gesetzt.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetWorkers(System.String)">
            <summary>
            Gibt ein Array von Workern (oder null) zurück, die zum übergebenen Key passen.
            Der Key setzt sich aus Node.Id + ":" + Node.Logical.ToString() zusammen.
            </summary>
            <param name="idLogical">Node.Id + ":" + Node.Logical.ToString()</param>
            <returns>Array von Workern (oder null)</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.RegisterResults(System.Collections.Generic.Dictionary{System.String,Vishnu.Interchange.Result})">
            <summary>
            Speichert von abgeschlossenen NodeLists zurückgegebene
            ResultLists, die evtl. von danach laufenden Checkern als
            Parameter benötigt werden könnten.
            </summary>
            <param name="results">Kopie der zu speichernden ResultList eines Knotens einer Nodelist.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.RegisterResult(Vishnu.Interchange.Result)">
            <summary>
            Speichert von abgeschlossenen SingleNodes (Workern) zurückgegebene
            Result-Objekte, die evtl. von danach laufenden Workern als
            Parameter benötigt werden könnten.
            </summary>
            <param name="result">Das zu speichernde Result-Objekt eines Knotens (enthält die Id des Knotens).</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.UnregisterResult(System.String)">
            <summary>
            Löscht das Result-Objekt aus der Liste, welches zur übergebenen Id gehört.
            </summary>
            <param name="key">Kennung des Knotens, dem das zu löschende Result-Objekt ggehört.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetResult(System.String)">
            <summary>
            Liefert für eine anfragende SingleNode (Checker) das Verarbeitungsergebnis
            (object) eines vorher beendeten Checkers als Eingangsparameter.
            </summary>
            <param name="nodeId">Die Id des Knotens, der ein Result-Objekt hier abgelegt hat.</param>
            <returns>Das Result-Objekt des Knotens.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetTriggeringNodeIdAndTriggeredNodes">
            <summary>
            Liefert ein Dictionary mit allen Ids von auslösenden (triggering) Knoten (Keys)
            und zugehörigen, abhängigen (triggered) Knoten (können jeweils mehrere sein).
            Wenn keine Trigger exisitieren wird ein leeres Dictionary zurückgegeben.
            </summary>
            <returns>Ein Dictionary mit allen Ids von auslösenden (triggering) Knoten (Keys)
            und zugehörigen, abhängigen (triggered) Knoten (können jeweils mehrere sein).</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindEventTriggers(System.String,System.String,System.Collections.Generic.List{LogicalTaskTree.TreeEventTrigger})">
            <summary>
            Sucht nach zuständigen Triggern für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Verbreiters des Events.</param>
            <param name="triggers">Eine Liste von für das Event zuständigen Triggern.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindEventWorkers(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sucht nach zuständigen WorkerShells mit deren zugeordneten Worker-Arrays für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Knotens, der das Events weitergibt.</param>
            <param name="sourceId">Die Id der Quelle des Events.</param>
            <param name="allEvents">Bei True werden alle Worker für einen Knoten unabhängig vom event zurückgegeben.</param>
            <returns>Eine Liste von für das Event zuständigen Worker-Arrays.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindEventWorkers(System.String,System.String,System.Boolean,System.Collections.Generic.List{LogicalTaskTree.WorkerShell[]})">
            <summary>
            Sucht nach zuständigen WorkerShells mit deren zugeordneten Worker-Arrays für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Knotens, der das Events weitergibt.</param>
            <param name="allEvents">Bei True werden alle Worker für einen Knoten unabhängig vom event zurückgegeben.</param>
            <param name="workers">Eine Liste von für das/die Event(s) zuständigen Worker-Arrays.</param>
            <returns>Eine Liste von für das Event zuständigen Worker-Arrays.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.SendersOfLastExecutedWorkersContainsNodeAndEvent(System.String,System.String)">
            <summary>
            Gibt true zurück, wenn der Knoten mit SenderId aktuell im Cache
            für die laufenden Worker, bzw. zuletzt ausgelösten enthalten ist.
            </summary>
            <param name="senderId">Id des zu prüfenden Knotens.</param>
            <param name="eventName">Name eines zurücksetzenden Events, das laufende Worker mit ok-Meldung beendet.#
            oder mit ok-Meldung abschließend startet.</param>
            <returns>True, wenn die senderId aktuell im Cache ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.TryAddWorkerToEventsOfSender(System.String,System.String,LogicalTaskTree.WorkerShell)">
            <summary>
            Fügt die WorkerShell "worker" in die Liste der Worker zu den "eventNames",
            die zu der Event-Liste des auslösenden Knotens "senderId" gehören, ein.
            "eventNames" sind die Namen von Komplementär-Events zu dem ursprünglich den Worker
            auslösenden Event, die den laufenden Worker später wieder zurücksetzen (wieder-ok-Meldung),
            bzw. den Worker später abschließend mit ok-Meldung auslösen sollen.
            Retourniert true, wenn die WorkerShell neu eingefügt wurde.
            </summary>
            <param name="senderId">Id des Knoten, der das auslösende Event gesendet hat.</param>
            <param name="eventNames">Namen von Komplementär-Events zum auslösenden Event (mit '|' getrennt),
            die den laufenden Worker später mit ok-Meldung beenden oder abschließend mit ok-Meldung starten sollen.</param>
            <param name="worker">Die WorkerShell des betroffenen Workers.</param>
            <returns>True, wenn "worker" zu "eventNames" zu "senderId" hinzugefügt wurde.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.GetLastExecutedWorkersToSenderAndEvent(System.String,System.String)">
            <summary>
            Retourniert eine Liste der Worker zu dem Event "eventName" des auslösenden Knotens "senderId".
            </summary>
            <param name="senderId">Id des Knotens, der das zurücksetzende Event sendet.</param>
            <param name="eventName">Name eines zurücksetzenden Events, das laufende Worker mit ok-Meldung beendet
            oder mit ok-Meldung abschließend startet.</param>
            <returns>Liste von WorkerShells zu "senderId" und "eventName".</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.TryRemoveEventFromSender(System.String,System.String)">
            <summary>
            Retourniert eine Liste der Worker zu dem Event "eventName" des auslösenden Knotens "senderId".
            </summary>
            <param name="senderId">Id des Knotens, der das zurücksetzende Event sendet.</param>
            <param name="eventName">Name eines zurücksetzenden Events, das laufende Worker mit ok-Meldung beendet
            oder mit ok-Meldung abschließend startet.</param>
            <returns>Liste von WorkerShells zu "senderId" und "eventName".</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Überschriebene RUN-Logik.
            Für JobList bedeutet das: Starten eventueller TreeExternals
            und Weitergabe des Aufrufs an NodeList (dort an die Kinder).
            Diese Routine wird asynchron ausgeführt.
            </summary>
            <param name="source">Bei abhängigen Checkern das auslösende TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)">
            <summary>
            Setzt alle Knoten im Teilbaum zurück.
            Setzt auch alle TreeExternals zurück.
            </summary>
            <param name="branch">Der oberste Knoten des zurückzusetzenden Teilbaums.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindNodeById(System.String)">
            <summary>
            Sucht in der aktuellen JobList und allen übergeodneten JobLists
            nach der Node mit der übergebenen 'nodeId'.
            Der erste Treffer gewinnt.
            </summary>
            <param name="nodeId">Die Id der zu suchenden Node.</param>
            <returns>Die gefundene LogicalNode oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindEventTriggers(System.String,System.String,System.String)">
            <summary>
            Sucht nach zuständigen Triggern für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Verbreiters des Events.</param>
            <param name="sourceId">Die Id der Quelle des Events.</param>
            <returns>Eine Liste von für das Event zuständigen Triggern.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,LogicalTaskTree.JobList})">
            <summary>
            Konstruktor für rekursive Aufrufe
            </summary>
            <param name="logicalName">Eindeutige Kennung des Knotens</param>
            <param name="mother">Id des Parent-Knotens.</param>
            <param name="rootJoblist">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="jobProvider">Die Datenquelle für den Job</param>
            <param name="parsedJobs">Liste von Namen aller bisher geparsten Jobs.</param>
            <param name="subJobs">Liste von Namen aller bisher verarbeiteten JobLists.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.parse">
            <summary>
            1. Stößt das Parsen des booleschen Ausdrucks an.
            2. Baut nach dem Vorbild des Boolean-Tree den LogicalTask(Teil-)Tree
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobList.buildParallelTree(LogicalTaskTree.NodeList,NetEti.ExpressionParser.SyntaxTree)">
            <summary>
            Baut nach dem Vorbild des Boolean-Tree den LogicalTask(Teil-)Tree.
            </summary>
            <param name="mother">Der übergeordnete Knoten des Teil-Baums</param>
            <param name="template">Der boolesche (Teil-)Baum (Bauplan)</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.AddToNodesById(System.String,LogicalTaskTree.LogicalNode)">
            <summary>
            Fügt die LogicalNode mit nodeId in die Liste _nodesById und die aller
            übergeordneten _rootJobLists ein.
            </summary>
            <param name="nodeId">Die Id der einzufügenden Node.</param>
            <param name="node">Einzufügende LogicalNode.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.TryAddToNodesByName(System.String,LogicalTaskTree.LogicalNode)">
            <summary>
            Fügt die LogicalNode mit nodeName in die Liste _nodesByName ein
            und fügt die LogicalNode mit nodeName auch in alle übergeordneten
            _rootJobLists ein, die den nodeName noch nicht in _nodesByName haben.
            </summary>
            <param name="nodeName">Der Name der einzufügenden Node.</param>
            <param name="node">Einzufügende LogicalNode.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindNodeByName(System.String,Vishnu.Interchange.NodeTypes,System.Boolean)">
            <summary>
            Sucht in der aktuellen JobList und, bei 'recurse' true,
            in allen übergeodneten JobLists nach der Node mit dem
            übergebenen 'nodeName'. Der erste Treffer gewinnt.
            </summary>
            <param name="nodeName">Name des gesuchten Knotens.</param>
            <param name="nodeTypes">Zulässige Knotentypen für einen Treffer.</param>
            <param name="tryLastChance">Bei true wird auch in TreeRootJobList._treeRootLastChanceNodesByName gesucht.</param>
            <returns>Die gefundene LogicalNode oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobList.TryAddToJobsByName(System.String,LogicalTaskTree.JobList)">
            <summary>
            Fügt die JobList mit jobName in die Liste _jobsByName ein
            und fügt die LogicalNode mit nodeName auch in alle übergeordneten
            _rootJobLists ein, die den nodeName noch nicht in _jobsByName haben.
            </summary>
            <param name="jobName">Der Name der einzufügenden JobList.</param>
            <param name="jobList">Einzufügende JobList.</param>
        </member>
        <member name="M:LogicalTaskTree.JobList.FindJobByName(System.String,System.Boolean)">
            <summary>
            Sucht in der aktuellen JobList und, bei 'recurse' true,
            in allen übergeodneten JobLists nach der JobList mit dem
            übergebenen 'jobName'. Der erste Treffer gewinnt.
            </summary>
            <param name="jobName">Name der gesuchten JobList.</param>
            <param name="recurse">Bei true wird bis zur Tree-Root gesucht.</param>
            <returns>Die gefundene JobList oder null.</returns>
        </member>
        <member name="T:LogicalTaskTree.JobPackage">
             <summary>
             Container für einen Job, einen logischen Namen für diesen Job
             und einen optionalen Dateipfad zum Job-File.
             </summary>
             <remarks>
             File: JobPackage.cs
             Autor: Erik Nagel
            
             05.08.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.JobPackage.JobFilePath">
            <summary>
            Der Dateipfad zum gespeicherten Job.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobPackage.JobName">
            <summary>
            Der logische Name des Jobs.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.JobPackage.Job">
            <summary>
            Der jobPackage.Job.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobPackage.SubJobPackages">
            <summary>
            JobPackages, die innerhalb des Jobs referenziert werden (inline oder extern).
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobPackage.#ctor(System.String)">
            <summary>
            Konstruktor - initialisiert einen leeren Job.
            </summary>
            <param name="jobFilePath">Dateipfad zur XML-Datei mit der Job-Beschreibung.</param>
        </member>
        <member name="M:LogicalTaskTree.JobPackage.#ctor(System.String,System.String)">
            <summary>
            Konstruktor - initialisiert einen leeren Job.
            </summary>
            <param name="jobFilePath">Dateipfad zur XML-Datei mit der Job-Beschreibung.</param>
            <param name="jobName">Name der XML-Datei mit der Job-Beschreibung.</param>
        </member>
        <member name="T:LogicalTaskTree.JobProviderBase">
             <summary>
             Basisklasse für alle JobProvider; muss abgeleitet werden.
                       implementiert IJobProvider.
             </summary>
             <remarks>
             File: JobProviderBase
             Autor: Erik Nagel
            
             05.05.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider">
            <summary>
            Klassendefinition für einen undefinierten JobProvider.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedJobProvider' ersetzt werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.TryLoadJobPackage(System.String@)">
            <summary>
              Fügt dem Dictionary LoadedJobPackages das JobPackage
              mit dem logischen Pfad logicalJobName hinzu.
              Im Fehlerfall wird einfach nichts hinzugefügt.
            </summary>
            <param name="logicalJobName">Der logische Name des Jobs oder null beim Root-Job.</param>
        </member>
        <member name="F:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.undefinedJobProvider">
            <summary>
            Statische Instanz für einen undefinierten JobProvider.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes und JobLists
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch diese Instanz ersetzt werden.
            Es kann dann ggf. auf 'is IUndefinedElement' geprüft werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.GetJob(System.String@)">
            <summary>
            Liefert eine konkrete Job-Instanz für eine JobList
            in einem LogicalTaskTree.
            </summary>
            <param name="name">Namen/Suchbegriff/Pfad des Jobs oder null</param>
            <returns>Instanz des Jobs, der zu dem Namen gehört.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.GetLogicalJobName(System.String)">
            <summary>
            Retourniert den logischen Namen des Jobs mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Logischer Name des Jobs oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.GetPhysicalJobPath(System.String)">
            <summary>
            Retourniert den physischen Namen des JobPackages mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Physischer Name des JobPackages oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.#ctor">
            <summary>
            Standard Konstruktor.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.JobProviderBase.TryLoadJobPackage(System.String@)">
            <summary>
            Fügt dem Dictionary LoadedJobPackages das JobPackage
            zu dem logischen Job-Namen logicalJobName hinzu.
            Im Fehlerfall wird einfach nichts hinzugefügt.
            Muss überschrieben werden.
            </summary>
            <param name="logicalJobName">Der logische Name des Jobs oder null beim Root-Job.</param>
        </member>
        <member name="F:LogicalTaskTree.JobProviderBase.LoadedJobPackages">
            <summary>
            Dictionary mit allen bisher geladenen JobPackages.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.JobProviderBase._appSettings">
            <summary>
            Diverse Anwendungseinstellungen als Properties.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.LoggerShell">
             <summary>
             Kapselt den Aufruf eines externen Loggers,
             der dynamisch als Dll-Plugin geladen wird.
             </summary>
             <remarks>
             File: LoggerShell.cs
             Autor: Erik Nagel
            
             25.07.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)">
            <summary>
            Übergibt LogInfos an den externen Logger.
            </summary>
            <param name="loggerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="treeEvent">Informationen über den Knoten, in dem das Ereignis auftritt.</param>
            <param name="additionalEventArgs">Enthält z.B. beim Event 'Exception' die zugehörige Exception.</param>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.Dispose">
            <summary>
            Öffentliche Methode zum Aufräumen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.Dispose(System.Boolean)">
            <summary>
            Hier wird aufgeräumt: ruft für alle User-Elemente, die Disposable sind, Dispose() auf.;
            </summary>
            <param name="disposing">Bei true wurde diese Methode von der öffentlichen Dispose-Methode
            aufgerufen; bei false vom internen Destruktor.</param>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.Finalize">
            <summary>
            Finalizer: wird vom GarbageCollector aufgerufen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.GetLogEvents">
            <summary>
            Liefert einen String mit Pipe-separierten Log-Event-Namen.
            Delegiert ggf. an die SlaveLoggerShell.
            </summary>
            <returns>String mit Pipe-separierten Log-Event-Namen</returns>
        </member>
        <member name="P:LogicalTaskTree.LoggerShell.LogEvents">
            <summary>
            String mit durch '|' separierten Logging-Event-Namen.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LoggerShell.LoggerParameters">
            <summary>
            String mit zusätzlichen Logger-Parametern.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.#ctor(System.String,System.String)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeLogger implementiert.</param>
            <param name="loggerParameters">String mit durch '|' separierten Logging-Event Namen und optional ',' gefolgt von weiteren Logger-Parametern.</param>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.#ctor(System.String)">
            <summary>
            Konstruktor
            </summary>
            <param name="loggerShellReference">Name eines benannten Loggers.</param>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.GetLoggerReference">
            <summary>
            Liefert den Namen des Loggers, der einem Knoten zugeordnet werden soll.
            </summary>
            <returns>Namen des Loggers, der dem Knoten zugeordnet werden soll oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.LoggerShell.SetSlaveLoggerShell(LogicalTaskTree.LoggerShell)">
            <summary>
            Bei LoggerShells, die bei der Instanziierung nur eine Namensreferenz
            mitbekommen haben, wird hier nachträglich der Logger übergeben.
            </summary>
            <param name="loggerShell">Referenz auf den tatsächlichen Logger bei LoggerShells, die bei der Instanziierung
            nur eine Namensreferenz mitbekommen haben.</param>
        </member>
        <member name="T:LogicalTaskTree.AllStatesChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.LogicalChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="logical">True, False oder NULL</param>
        </member>
        <member name="T:LogicalTaskTree.LastNotNullLogicalChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="logical">True oder False</param>
            <param name="eventId">Eindeutige Kennung des Ereignisses.</param>
        </member>
        <member name="T:LogicalTaskTree.StateChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="state">None, Waiting, Working, Finished, Busy (= Waiting | Working) oder CanStart (= None|Finished).</param>
        </member>
        <member name="T:LogicalTaskTree.LogicalStateChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich der Ergebnis-Zustand eines Knotens geändert hat.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="logicalState">None, Done, Fault, Timeout, UserAbort</param>
        </member>
        <member name="T:LogicalTaskTree.ResultChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="result">Das neue Result.</param>
        </member>
        <member name="T:LogicalTaskTree.ExceptionRaisedEventHandler">
            <summary>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="exeption">Die aufgetretene Exception.</param>
        </member>
        <member name="T:LogicalTaskTree.NodeChangedEventHandler">
            <summary>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
        </member>
        <member name="T:LogicalTaskTree.UndefinedLogicalNodeClass">
            <summary>
            Klassendefinition für eine undefinierte LogicalNode.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedLogicalNode' ersetzt werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.UndefinedLogicalNodeClass.UndefinedLogicalNode">
            <summary>
            Statische Instanz für eine undefinierte LogicalNode.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch diese Instanz ersetzt werden.
            Es kann dann ggf. auf 'is IUndefinedElement' geprüft werden.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.LastResult">
            <summary>
            Result für diesen Knoten.
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.Logical">
            <summary>
            Der logische Zustand eines Knotens; hierum geht es letztendlich in der
            gesamten Verarbeitung.
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodes">
            <summary>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums.
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodesFinished">
            <summary>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.State">
            <summary>
            Der Verarbeitungszustand eines Knotens:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.UndefinedLogicalNodeClass.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            Wirft hier eine NotImplementedException.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.UndefinedLogicalNodeClass.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Die eigentliche, Knotentyp-spezifische Verarbeitung.
            Wirft hier eine NotImplementedException.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.UndefinedLogicalNodeClass.GetResultList">
            <summary>
            Liefert eine Liste mit allen Result-Objekten des Teilbaums.
            Wirft hier eine NotImplementedException.
            </summary>
            <returns>Wirft hier eine NotImplementedException.</returns>
        </member>
        <member name="M:LogicalTaskTree.UndefinedLogicalNodeClass.#ctor">
            <summary>
            Standard-Konstruktor.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.LogicalNode">
             <summary>
             Abstrakte Basisklasse für einen Knoten im LogicalTaskTree.
             </summary>
             <remarks>
             File: LogicalNode.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             06.08.2016 Erik Nagel: IVishnuNode implementiert.
             </remarks>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.AllNodesStateChanged">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.PropertiesChanged">
            <summary>
            Dieses Event aus IVishnuNode.INotifyPropertiesChanged kann von LogicalNodeViewmodel abonniert werden.
            Dieses erhält über die übergebenen PropertiesChangedEventArgs eine String-List mit Property-Namen
            und kann seinerseits über INotifyProperyChanged die UI informieren.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged">
            <summary>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged">
            <summary>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeResultChanged">
            <summary>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeStateChanged">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.ExceptionRaised">
            <summary>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.ExceptionCleared">
            <summary>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged">
            <summary>
            Wird aufgerufen, wenn sich der Gesamtzustand der dem Knoten
            zugeordneten Worker geändert hat.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeProgressStarted">
            <summary>
            Wird aufgerufen, wenn ein Knoten gestartet wurde.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeProgressChanged">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungs-Fortschritt eines Knotens geändert hat.
            </summary>
        </member>
        <member name="E:LogicalTaskTree.LogicalNode.NodeProgressFinished">
            <summary>
            Wird aufgerufen, wenn die Verarbeitung eines Knotens abgeschlossen wurde (unabhängig vom Ergebnis).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IdInfo">
            <summary>
            Die eindeutige Kennung des Knotens (identisch zur Property Id).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.NameInfo">
            <summary>
            "Menschenfreundliche" Darstellung des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.PathInfo">
            <summary>
            Der Pfad zum Knoten (identisch zur Property Path).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.TypeInfo">
            <summary>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <see cref="T:Vishnu.Interchange.NodeTypes"/>
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LevelInfo">
            <summary>
            Die Hierarchie-Ebene des Knotens (identisch zur Property Level).
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsTreePaused">
            <summary>
            Liefert true, wenn die Verarbeitung im Tree gerade angehalten wurde.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsTreeFlushing">
            <summary>
            Liefert true, wenn die Verarbeitung im Tree gerade angehalten werden soll
            aber schon erzeugte logische Änderungen noch zuende verteilt werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsSnapshotProhibited">
            <summary>
            Liefert true, wenn gerade keine Snapshots erlaubt sind.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.BreakWithResult">
            <summary>
            Ein Teilbaum kann u.U. schon ein eindeutiges logisches Ergebnis haben,
            bevor alle Kinder ihre Verarbeitung beendet haben.
            Bei BreakWithResult=True werden diese dann abgebochen, wenn in dem
            bereffenden Ast keine Trigger aktiv sind.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.CanTreeStart">
            <summary>
            Gibt an, ob ein (Teil-)Baum gestartet werden kann, d.h. dass bei einem
            Knoten mit Kindern alle seine Kinder (rekursiv) gestartet werden können
            oder bei einem Endknoten (Checker) ohne Kinder dieser selbst gestartet werden kann.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.DebugMode">
            <summary>
            Bei True können zusätzliche Testausgaben erfolgen.
            Default: False.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Id">
            <summary>
            Die eindeutige Kennung des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.InitNodes">
            <summary>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IsActive">
            <summary>
            Bei true befindet sich der Teilbaum/Knoten in aktivem (gestartetem) Zustand.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IsGlobal">
            <summary>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IsInSleepTime">
            <summary>
            Returns true, wenn gerade eine vom User definierte Ruhezeit
            für Vishnu-Akteure (Checker) läuft.
            </summary>
            <returns>True, wenn gerade eine vom User definierte Ruhezeit
            für Vishnu-Akteure (Checker) läuft.</returns>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IsInSnapshot">
            <summary>
            Bei True befindet sich diese LogicalNode innerhalb eines Snapshots.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy">
            <summary>
            Bei True dient dieser Knoten nur zur Anzeige und lässt keine weiteren Funktionen zu.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.LastExceptions">
            <summary>
            Beim letzten Lauf aufgetretene Exception oder null;
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent">
            <summary>
            Das letzte auslösende TreeEvent (bei TreeEvent-getriggerten Knoten)
            oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastLogical">
            <summary>
            Der letzte logische Zustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastLogicalState">
            <summary>
            Der letzte Ergebniszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastNotNullLogical">
            <summary>
            Merkfeld für den letzten Zustand von Logical, der nicht null war;
            wird benötigt, damit Worker nur dann gestartet werden, wenn sich
            der Zustand von Logical signifikant geändert hat und nicht jedesmal,
            wenn der Checker arbeitet (Logical = null).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastResult">
            <summary>
            Result für diesen Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastRun">
            <summary>
            Zeitpunkt des letzten Starts des Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LastState">
            <summary>
            Der letzte Verarbeitungszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Level">
            <summary>
            Die Hierarchie-Ebene des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LockName">
            <summary>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Logger">
            <summary>
            Ein optionaler Logger, der bei bestimmten Ereignissen
            aufgerufen wird oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Logical">
            <summary>
            Der logische Zustand eines Knotens; hierum geht es letztendlich in der
            gesamten Verarbeitung.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.LogicalState">
            <summary>
            Der Ergebnis-Zustand des Knotens:
            None, Start, Done, Fault, Timeout, UserAbort.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Name">
            <summary>
            "Menschenfreundliche" Darstellung des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.NameId">
            <summary>
            Kombination aus Name und Id des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.NextRun">
            <summary>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.NextRunInfo">
            <summary>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.NodeType">
            <summary>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.ParentView">
            <summary>
            Das Parent-Control, in dem dieser Knoten dargestellt wird.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Path">
            <summary>
            Der Pfad zum Knoten bestehend aus einer durch '/' getrennte Kette von NameIds:
            NameId ist Name + "(" + Id + ")" bei Knoten mit Name != null,
                   nur Id bei Name = null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.IdPath">
            <summary>
            Auf eine durch '/' getrennte Kette von Ids reduzierter Pfad zum Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.ReferencedNodeId">
            <summary>
            Id eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.ReferencedNodePath">
            <summary>
            Pfad eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.SingleNodes">
            <summary>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
            <summary>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.SleepTimeFrom">
            <summary>
            Der Beginn einer möglichen Ruhezeit.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.SleepTimeTo">
            <summary>
            Das Ende einer möglichen Ruhezeit.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.StartCollapsed">
            <summary>
            Bei True wird der Job beim Start zusammengeklappt angezeigt, wenn die UI dies unterstützt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.State">
            <summary>
            Der Verarbeitungszustand eines Knotens:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.ThreadLocked">
            <summary>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False;
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Trigger">
            <summary>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult außer Kraft).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay">
            <summary>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.WorkersState">
            <summary>
            Ein Sammelstatus für alle zugeordneten Worker.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnAllNodesStateChanged">
            <summary>
            Löst das NodeStateChanged-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.DoNodeLogicalChanged">
            <summary>
            Verarbeitet die Änderung von Logical für diesen Knoten.
            Führt ggf. zugeordnete Worker aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeLogicalChanged">
            <summary>
            Löst das NodeLogicalChanged-Ereignis aus.
            Dieses gibt die Änderung von Logical im Tree nach oben weiter.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnPropertiesChanged(System.Collections.Generic.List{System.String})">
            <summary>
            Löst das PropertiesChanged-Ereignis aus.
            Dieses gibt die Namen von für die UI relevanten Properties an das ViewModel weiter.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeStateChanged">
            <summary>
            Löst das NodeStateChanged-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeResultChanged">
            <summary>
            Löst das NodeResultChanged-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeLogicalStateChanged">
            <summary>
            Löst das NodeLogicalStateChanged-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)">
            <summary>
            Löst das ExceptionRaised-Ereignis aus.
            </summary>
            <param name="source">Die Quelle der Exception.</param>
            <param name="exception">Die Exception.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnExceptionCleared(LogicalTaskTree.LogicalNode)">
            <summary>
            Löscht Exceptions im Tree für diesen Knoten.
            </summary>
            <param name="source">Die Quelle der Exception.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Löst das NodeStarted-Ereignis aus.
            </summary>
            <param name="source">Der Knoten , der das Event ausgelöst hat.</param>
            <param name="args">CommonProgressChangedEventArgs.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)">
            <summary>
            Löst das NodeProgressChanged-Ereignis aus.
            </summary>
            <param name="itemsName">Name für die Elemente, die für den Verarbeitungsfortschritt gezählt werden.</param>
            <param name="countAll">Gesamtanzahl - entspricht 100%.</param>
            <param name="countSucceeded">Erreichte Anzahl - kleiner-gleich 100%.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)">
            <summary>
            Löst das NodeProgressFinished-Ereignis aus.
            </summary>
            <param name="itemsName">Name für die Elemente, die für den Verarbeitungsfortschritt gezählt werden.</param>
            <param name="countAll">Gesamtanzahl - entspricht 100%.</param>
            <param name="countSucceeded">Erreichte Anzahl - kleiner-gleich 100%.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeBreaked">
            <summary>
            Löst das NodeBreaked-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Löst das NodeLastNotNullLogicalChanged-Ereignis aus.
            </summary>
            <param name="source">Ein Knoten im Tree (LogicalNode).</param>
            <param name="logical">Logisches Ergebnis des Knotens.</param>
            <param name="eventId">Eindeutige Kennung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Kapselt den Aufruf des nicht vererbbaren Events NodeLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            </summary>
            <param name="source">Die ursprüngliche Quelle der Events.</param>
            <param name="logical">Der logische Wert des Senders.</param>
            <param name="eventId">Eine optionale Guid zur eindeutigen Identifizierung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Triggert das TreeEvent "AnyLastNotNullLogicalHasChanged" und ruft "OnNodeLastNotNullLogicalChanged".
            </summary>
            <param name="source">Die ursprüngliche Quelle der Events.</param>
            <param name="lastNotNullLogical">Der logische Wert des Senders.</param>
            <param name="eventId">Eine optionale Guid zur eindeutigen Identifizierung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Kapselt den Aufruf des nicht vererbbaren Events LastNotNullLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            </summary>
            <param name="source">Die ursprüngliche Quelle der Events.</param>
            <param name="lastNotNullLogical">Der logische Wert des Senders.</param>
            <param name="eventId">Eine optionale Guid zur eindeutigen Identifizierung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged">
            <summary>
            Löst das NodeWorkersStateChanged-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ProhibitSnapshots">
            <summary>
            Verhindert Snapshots.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.AllowSnapshots">
            <summary>
            Erlaubt Snapshots.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.PauseTree">
            <summary>
            Hält die Verarbeitung im Tree an.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ResumeTree">
            <summary>
            Lässt einen angehaltenen Tree weiterlaufen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered">
            <summary>
            Aktualisiert bei TreeEvent-getriggerten Knoten die Werte
            des Knotens, bevor mit ihnen weitergearbeitet wird.
            Ist bei Situationen wichtig, in dem entweder der Knoten das
            auslösende TreeEvent verpasst hat (beim Programmstart)
            oder ein anderes TreeEvent schneller war und zu einer
            Reaktion führt, die die aktuellen Werte des Knotens
            benötigt (JobSnapshotTrigger).
            </summary>
            <returns>Feuernder Knoten oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)">
            <summary>
            Gibt an, ob ein (Teil-)Baum in einem JobController gestartet werden kann, d.h. dass
            der Knoten und alle seine Eltern (rekursiv) gestartet werden können.
            </summary>
            <param name="calledFromRoot">Bei true wurde die Methode vom Root-Knoten aufgerufen.</param>
            <param name="collectedEnvironment">Dictionary mit Ergebnissen der dem Knoten vorausgegangenen Knoten.</param>
            <returns>True, wenn der Knoten gestartet werden kann.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.#cctor">
            <summary>
            Statischer Konstruktor.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element.
            </summary>
            <param name="mother">Der Eltern-Knoten</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor
            </summary>
            <param name="id">Eindeutige Kennung des Knotens.</param>
            <param name="mother">Der Parent-Knoten.</param>
            <param name="rootJobList">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Invalidate">
            <summary>
            Löscht interne Caches, so dass alles neu ausgewertet wird.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)">
            <summary>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            </summary>
            <param name="source">LogicalNode mit zu übernehmenden Eigenschaften.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Refresh">
            <summary>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.UserRun">
            <summary>
            Startet die Verarbeitung dieses Knotens nach einem Start
            durch den Anwender. Gibt die Information, dass der Start
            durch den Anwender erfolgte, im TreeEvent an Run weiter.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)">
            <summary>
            Prüft, ob ein Knoten gestartet werden kann und startet dann den Knoten, seinen Trigger,
            oder beide (über StartNodeOrTrigger).
            </summary>
            <param name="source">Auslösendes TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes">
            <summary>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode">
            <summary>
            Setzt den Teilbaum auf nicht startbar.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.UserBreak">
            <summary>
            Wird aufgerufen, wenn der Teilbaum vom Anwender bewusst gestoppt wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Reload">
            <summary>
            Wird aufgerufen, wenn der Teilbaum neu geladen werden soll.
            </summary>
            <returns>Die RootJobList des neu geladenen Jobs.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)">
            <summary>
            Wenn erforderlich, beim Trigger abmelden,
            Abbrechen der Task über CancellationToken, Status setzen.
            </summary>
            <param name="userBreak">Bei True hat der Anwender das Break ausgelöst.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetTopRootJobList">
            <summary>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            </summary>
            <returns>Die für den Knoten gültige, oberste Root-JobList.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)">
            <summary>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            </summary>
            <param name="eventName">Name des Events, das verarbeitet werden soll.</param>
            <param name="addInfo">Zusätzliche Information (Exception, Progress%, etc.).</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)">
            <summary>
            Setzt die Property StartCollapsed für einen ganzen (Teil-)Baum.
            </summary>
            <param name="value">Neuer Wert für StartCollapsed.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetResults">
            <summary>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </summary>
            <returns>Dictionary mit NodeIds und Results</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetEnvironment">
            <summary>
            Returniert das ConcurrentDictionary Environment als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </summary>
            <returns>Dictionary mit NodeIds und Results</returns>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.RootJobList">
            <summary>
            Nächsthöhere JobList für diesen Knoten oder der Knoten selbst,
            wenn er eine JobList ist.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.TreeRootJobList">
            <summary>
            Oberste JobList.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.TreeParams">
            <summary>
            Zusätzliche Parameter, einige, die für den gesamten Tree
            Gültigkeit haben und einige knotenspezifische Parameter
            oder null.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ToString">
            <summary>
            Überschriebene ToString()-Methode.
            </summary>
            <returns>Verkettete Properties als String.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Equals(System.Object)">
            <summary>
            Vergleicht den Inhalt dieser LogicalNode nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen LogicalNode.
            </summary>
            <param name="obj">Die LogicalNode zum Vergleich.</param>
            <returns>True, wenn die übergebene LogicalNode inhaltlich gleich dieser ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetHashCode">
            <summary>
            Erzeugt einen Hashcode für diese LogicalNode.
            </summary>
            <returns>Integer mit Hashwert.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)">
            <summary>
            Hierüber kann eine Ableitung von LogicalNode ihren eigenen Thread
            zum Abbruch veranlassen.
            </summary>
            <summary>
            Sucht in der aktuellen JobList und allen übergeodneten JobLists
            nach der (Single)Node mit der übergebenen 'nodeId'.
            Der erste Treffer gewinnt.
            </summary>
            <param name="nodeId">Die Id der zu suchenden SingleNode.</param>
            <returns>Die gefundene LogicalNode oder null.</returns>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsFirstRun">
            <summary>
            Bei true verhält sich der Knoten wie beim ersten Start.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsResetting">
            <summary>
            True: der Knoten wird gerade auf Start zurückgesetzt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.UserBreakedNodePath">
            <summary>
            Pfad zu dem Knoten, dessen Verarbeitung gerade vom Anwender
            über die Oberfläche abgebrochen wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.FindEventWorkers(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sucht nach zuständigen WorkerShells mit deren zugeordneten Worker-Arrays für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Knotens, der das Events weitergibt.</param>
            <param name="sourceId">Die Id der Quelle des Events.</param>
            <param name="allEvents">Bei True werden alle Worker für einen Knoten unabhängig vom event zurückgegeben.</param>
            <returns>Eine Liste von für das Event zuständigen Worker-Arrays.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetResultList">
            <summary>
            Liefert eine Liste mit allen Result-Objekten des Teilbaums.
            </summary>
            <returns>Liste von Result-Objekten des Teilbaums.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetResultsFromResultList">
            <summary>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            </summary>
            <returns>ResultDictionary mit Ids und zugehörigen Results.</returns>
        </member>
        <member name="P:LogicalTaskTree.LogicalNode.Environment">
            <summary>
            Liste mit allen Result-Objekten der Vorgänger des Teilbaums.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.GetResultsFromEnvironment">
            <summary>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            </summary>
            <returns>ResultDictionary mit Ids und zugehörigen Results.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.AddEnvironment(Vishnu.Interchange.TreeEvent)">
            <summary>
            Fügt dem Environment des aktuellen Knotens das Environment und die Results
            des aufrufenden Knotens hinzu.
            </summary>
            <param name="source">Einzufügendes TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.Reset">
            <summary>
            Setzt den Knoten auf Initialwerte zurück.
            Das entspricht dem Zustand beim ersten Starten des Trees.
            Bei Jobs mit gesetztem 'IsConrolled' ist das entscheidend,
            da sonst Knoten gestartet würden, ohne dass die Voraussetzungen
            erneut geprüft wurden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.AppSettings">
            <summary>
            Applikationseinstellungen.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.CancellationToken">
            <summary>
            Über die CancellationTokenSource kann dieses Token auf
            Abbruch gesetzt werden, was in diesem Knoten zum Aufruf
            der Routine cancelNotification führt.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled">
            <summary>
            True: der Knoten ist gerade aktiv oder durch einen Timer kontrolliert.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.IsRunRequired">
            <summary>
            True: der Knoten soll gestartet werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.LastLogicalLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastLogical.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastLogical.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.LastStateLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastState.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastLogicalState.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.ResultLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von Result.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode.ExceptionLocker">
            <summary>
            Dient zum kurzzeitigen Sperren bei Exceptions.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode._parentViewLocker">
            <summary>
            Dient zur Sperrung für Thread-safen Zugriff auf ParentView.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode._lastRun">
            <summary>
            Zeitpunkt des letzten Starts des Knoten (internes Feld).
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode._nextRunInfo">
            <summary>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null (internes Feld).
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Die eigentliche, Knotentyp-spezifische Verarbeitung;
            muss überschrieben werden.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)">
            <summary>
            Sucht nach zuständigen Triggern für ein Event.
            </summary>
            <param name="eventName">Der Name des zugehörigen Events.</param>
            <param name="senderId">Die Id des Verbreiters des Events.</param>
            <param name="sourceId">Die Id der Quelle des Events.</param>
            <returns>Eine Liste von für das Event zuständigen Triggern.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})">
            <summary>
            Setzt threadsafe LastLogical.
            </summary>
            <param name="newLogical">Neuer Wert (bool?)</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)">
            <summary>
            Setzt threadsafe LastState.
            </summary>
            <param name="newState">Neuer Wert (NodeLogicalState?)</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)">
            <summary>
            Setzt threadsafe LastLogicalState.
            </summary>
            <param name="newLogicalState">Neuer Wert (NodeLogicalState?)</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.SleepIfNecessary">
            <summary>
            Streut System.Sleeps zur Systementlastung ein.
            Ist feiner regulierbar, als fixe Sleeps in geschachtelten Inner-Loops.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.LogWithDistinctTime(System.String)">
            <summary>
            Schreibt eine Nachricht mit kurzer Sleeptime vorher und nacher, um zeitnahe
            Vorgänge später im Log in zeitlicher Folge sichtbar zu machen.
            </summary>
            <param name="message">Die zu loggende Nachricht.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)">
            <summary>
            Setzt einen gemeinsamen (kombinierten) NodeWorkerState 'WorkersState'
            für alle NodeWorker.
            Retourniert NodeWorkersState.
            </summary>
            <param name="treeEvent">Das auslösende treeEvent (interner Name).</param>
            <returns>Kombinierter NodeWorkerState für alle NodeWorker.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)">
            <summary>
            Trägt thread in die Liste ungültiger Threads ein,
            falls der Thread noch aktiv ist.
            </summary>
            <param name="thread">Ungültiger Thread.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.IsThreadValid(System.Threading.Thread)">
            <summary>
            Prüft, ob ein Thread gültig (nicht als ungültig markiert) ist.
            </summary>
            <param name="thread">Der zu prüfende Thread.</param>
            <returns>True, wenn der Thread gültig ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)">
            <summary>
            Entfernt thread aus der Liste ungültiger Threads.
            </summary>
            <param name="thread">Der zu entfernende Thread.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes">
            <summary>
            Setzt alle Knoten im gesamten Tree zurück.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)">
            <summary>
            Setzt alle Knoten im Teilbaum ab branch zurück.
            </summary>
            <param name="branch">Der oberste Knoten des zurückzusetzenden Teilbaums.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes">
            <summary>
            Setzt alle Knoten im Teilbaum zurück, von denen andere per TreeEvent abhängen.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode._logicalState">
            <summary>
            Der Ergebnis-Zustand des Knotens:
            None, Start, Done, Fault, Timeout, UserAbort (internes Feld).
            </summary>
        </member>
        <member name="F:LogicalTaskTree.LogicalNode._workersState">
            <summary>
            Gruppenzustand für die dem Knoten zugeordneten Worker.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.WaitWhileSnapshotProhibited">
            <summary>
            Wartet, falls gerade keine Snapshots erlaubt sind, solange, bis die Sperre wieder aufgehoben wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.WaitWhileTreePausedOrFlushing">
            <summary>
            Wartet, falls der Tree gerade pausiert werden soll oder schon pausiert ist,
            solange, bis die Pause wieder aufgehoben wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.WaitWhileTreePaused">
            <summary>
            Wartet, falls der Tree gerade pausiert wurde, solange, bis die Pause wieder aufgehoben wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.TryRunAsyncWhileIsRunRequired(Vishnu.Interchange.TreeEvent)">
            <summary>
            Eigene (Timer-)Task Action für den Run eines (Teil-)Baums.
            Versucht, den Teil-Baum über runAsync zu starten, solange
            der Schalter IsRunRequired gesetzt ist.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.RunAsync(Vishnu.Interchange.TreeEvent)">
            <summary>
            Action für den Run eines (Teil-)Baums.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.LogAsync(LogicalTaskTree.LogicalNode,Vishnu.Interchange.TreeEvent,System.Object)">
            <summary>
            Eigene Task Action für den Aufruf des externen Loggers.
            </summary>
            <param name="treeEvent">Klasse mit Informationen zum auslösenden Ereignis.</param>
            <param name="additionalEventArgs">Enthält z.B. beim Event 'Exception' die zugehörige Exception.</param>
            <param name="sender">Der Sender (Weiterleiter oder Auslöser) des Events und Besitzer des Loggers.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.CancelNotification">
            <summary>
            Informiert über den Abbruch der Verarbeitung in einem Teilbaum.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(LogicalTaskTree.LogicalNode,LogicalTaskTree.LogicalNode,System.String,System.Object)">
            <summary>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            </summary>
            <param name="sender">Publisher des Events, das verarbeitet werden soll.</param>
            <param name="source">Quelle des Events, das verarbeitet werden soll.</param>
            <param name="eventName">Name des Events, das verarbeitet werden soll.</param>
            <param name="addInfo">Zusätzliche Information (Exception, Progress%, etc.).</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ProcessSingleTreeEvent(LogicalTaskTree.LogicalNode,LogicalTaskTree.LogicalNode,System.String,System.Object)">
            <summary>
            Hilfsroutine für ProcessTreeEvent, wird bei"Any..."-Events im Loop aufgerufen.
            </summary>
            <param name="sender">Publisher des Events, das verarbeitet werden soll.</param>
            <param name="source">Quelle des Events, das verarbeitet werden soll.</param>
            <param name="eventName">Name des Events, das verarbeitet werden soll.</param>
            <param name="addInfo">Zusätzliche Information (Exception, Progress%, etc.).</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.LogIfConfigured(LogicalTaskTree.LogicalNode,System.String,Vishnu.Interchange.TreeEvent,System.Object)">
            <summary>
            Gibt Logging-Informationen an einen externen Logger weiter,
            wenn ein externer Logger für den übergebenen internalEventName eingerichtet ist.
            </summary>
            <param name="sender">Quelle des Events, das das Logging auslöst.</param>
            <param name="treeEvent">Klasse mit Informationen zum Ereignis.</param>
            <param name="internalEventName">Interner Name des aktuellen Events.</param>
            <param name="addInfo">Zusätzliche Information (Exception, Progress%, etc.).</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)">
            <summary>
            Setzt den Knoten auf die Starteinstellungen zurück.
            </summary>
            <param name="depth">Interner Parameter - hier immer 0.</param>
            <param name="node">Der Knoten, der initialisiert werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.StartNodeOrTrigger(Vishnu.Interchange.TreeEvent)">
            <summary>
            Startet die Verarbeitung eines (Teil-)Baums.
            Intern wird für jeden Run eine eigene Task gestartet.
            </summary>
            <param name="source">Auslösendes TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.CanRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Prüft, ob ein Knoten gestartet werden kann. In dieser Prüfung wird eventuell
            eine Abfrage geschaltet, durch die das erste Prüfungsergebnis übersteuert
            werden kann.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, wenn der Knoten gestartet werden kann.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalNode.ShallDirectRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Prüft, ob ein Knoten direkt gestartet werden soll, auch wenn er getriggert
            ist (gilt nicht für TreeEventTrigger). 
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, wenn der Knoten auch direkt gestartet werden soll.</returns>
        </member>
        <member name="T:LogicalTaskTree.LogicalTaskTree">
             <summary>
             Enthält einen nach erweiterten logischen Ausdrücken augebauten,
             hierarchisch strukturierten Tree mit Blättern, in denen benutzerspezifische
             Verarbeitungsknoten dynamisch eingehängt werden können.
             Dient als Framework zur Prozess-Überwachung und -Steuerung.
             </summary>
             <remarks>
             File: LogicalTaskTree.cs
             Autor: Erik Nagel
            
             18.08.2014 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="F:LogicalTaskTree.LogicalTaskTree.TreeId">
            <summary>
            Pro Tree eindeutiger ID-Zusatz.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.LogicalTaskTree.TreeParams">
            <summary>
            Zusätzliche Parameter, die für den gesamten Tree Gültigkeit haben oder null.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.Dispose">
            <summary>
            Öffentliche Methode zum Aufräumen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.Dispose(System.Boolean)">
            <summary>
            Hier wird aufgeräumt: ruft für alle User-Elemente, die Disposable sind, Dispose() auf.
            </summary>
            <param name="disposing">Bei true wurde diese Methode von der öffentlichen Dispose-Methode
            aufgerufen; bei false vom internen Destruktor.</param>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.Finalize">
            <summary>
            Finalizer: wird vom GarbageCollector aufgerufen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.GetTopJobList">
            <summary>
            Liefert die oberste JobList des Trees als IVishnuNode.
            </summary>
            <returns>Die oberste JobList des Trees.</returns>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.SetTopJobList(Vishnu.Interchange.IVishnuNode)">
            <summary>
            Setzt die oberste JobList des Trees.
            Returnt die bisher oberste JobList.
            </summary>
            <param name="topJobList">Die neue oberste JobList des Trees.</param>
            <returns>Die bisher oberste JobList des Trees.</returns>
        </member>
        <member name="P:LogicalTaskTree.LogicalTaskTree.Tree">
            <summary>
            Liefert die RootJobList des LogicalTaskTrees inklusive Setter.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.LogicalTaskTree.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)">
            <summary>
            Konstruktor - übernimmt die globalen Tree-Parameter und die Datenquelle für den Job.
            </summary>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="jobProvider">Die Datenquelle für den Job</param>
        </member>
        <member name="T:LogicalTaskTree.NodeCheckerBase">
             <summary>
             Basisklasse für NodeChecker und ValueModifier;
                       implementiert INodeChecker; muss abgeleitet werden.
             </summary>
             <remarks>
             File: NodeCheckerBase.cs
             Autor: Erik Nagel
            
             28.05.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="E:LogicalTaskTree.NodeCheckerBase.NodeProgressChanged">
            <summary>
            Wird aufgerufen, wenn sich der Verarbeitungs-Fortschritt des Checkers geändert hat.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.ReturnObject">
            <summary>
            Rückgabe-Objekt des Checkers, kann null sein.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.IsMirror">
            <summary>
            Bei true spiegelt dieser Knoten die Werte eines referenzierten
            Knoten 1:1 wieder.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.InitNodes">
            <summary>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.TriggeredRunDelay">
            <summary>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.IsInvalid">
            <summary>
            Bei True wird nach erfolgreichem globalen Locking
            kein weiterer Startversuch unternommen und das Locking
            aufgehoben.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.#ctor">
            <summary>
            Konstruktor.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt (oder beobachtet).
            </summary>
            <param name="checkerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, False oder null</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.ModifyValue(System.Object)">
            <summary>
            Konvertiert einen Wert in ein gegebenes Format.
            Muss überschrieben werden.
            </summary>
            <param name="toConvert">Zu konvertierender Wert</param>
            <returns>Konvertierter Wert.</returns>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.CheckerTrigger">
            <summary>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult auf false).
            Wird vom IJobProvider bei der Instanziierung mitgegeben.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.CheckerLogger">
            <summary>
            Ein optionaler Logger, der vom Knoten aufgerufen wird
            oder null.
            Wird vom IJobProvider bei der Instanziierung mitgegeben.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.LastReturned">
            <summary>
            Das zuletzt zurückgegebene Ergebnis.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.IsGlobal">
            <summary>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.GetCheckerReference">
            <summary>
            Liefert den Namen des Checkers, der einem ValueConverter zugeordnet werden soll.
            </summary>
            <returns>Namen des Checkers, der dem ValueConverter zugeordnet werden soll oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.SetChecker(LogicalTaskTree.NodeCheckerBase)">
            <summary>
            Übernimmt den Checker bei ValueConvertern.
            </summary>
            <param name="checker">Instanz des Checkers, der dem ValueConverter zugeordnet werden soll.</param>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.ThreadLocked">
            <summary>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeCheckerBase.LockName">
            <summary>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeCheckerBase._isMirror">
            <summary>
            Bei true spiegelt dieser Knoten die Werte eines referenzierten
            Knoten 1:1 wieder.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeCheckerBase.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Wird angesprungen, wenn sich der Verarbeitungsfortschritt des Checkers geändert hat.
            </summary>
            <param name="sender">Der Checker-Prozess des Anwenders.</param>
            <param name="args">CommonProgressChangedEventArgs.</param>
        </member>
        <member name="T:LogicalTaskTree.NodeConnector">
             <summary>
             Wird automatisch generiert, wenn der Name eines Einzelknotens
             innerhalb eines logischen Ausdrucks mehrfach auftritt. Wirkt nach außen so,
             als ob der Knoten zweimal (oder mehrmals) im Tree aufträte, verweist intern
             aber nur auf den ersten Knoten dieses Namens. Dadurch wird sichergestellt,
             dass die zu dem ursprünglichen Knoten gehörige Verarbeitung in Tree nur
             einmal ausgeführt wird.
             Filtert das ReturnObject eines INodeCheckers nach Typ und ggf. Format-String.
             </summary>
             <remarks>
             File: NodeConnector.cs
             Autor: Erik Nagel
            
             27.05.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.Logical">
            <summary>
            Der logische Zustand des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.State">
            <summary>
            Der Verarbeitungszustand des Knotens:
            None, Waiting, Working, Finished, Busy (= Waiting | Working) oder CanStart (= None|Finished).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.LogicalState">
            <summary>
            Der Ergebnis-Zustand des Knotens:
            None, Done, Fault, Timeout, UserAbort.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.SingleNodes">
            <summary>
            Property für die Fortschrittsberechnung.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.SingleNodesFinished">
            <summary>
            Property für die Fortschrittsberechnung.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.Checker">
            <summary>
            Der Arbeitsprozess - hier wird mit der Welt kommuniziert,
            externe Prozesse gestartet oder beobachtet.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.LastResult">
            <summary>
            Das letzte Verarbeitungsergebnis für diesen Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.LastRun">
            <summary>
            Zeitpunkt des letzten Starts des Knoten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.NextRun">
            <summary>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.NextRunInfo">
            <summary>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.ReferencedNodeId">
            <summary>
            Id des ursprünglich referenzierten Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.ReferencedNodePath">
            <summary>
            Pfad des ursprünglich referenzierten Knotens.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element.
            Dieser Konstruktor leitet für den Konstruktor von NodeConnector direkt an LogicalNode weiter.
            </summary>
            <param name="mother">Der Eltern-Knoten</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)">
            <summary>
            Konstruktor
            </summary>
            <param name="id">Eindeutige Kennung des Knotens.</param>
            <param name="mother">Der Parent-Knotens.</param>
            <param name="rootJoblist">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="node">Die LogicalNode, zu der sich dieser NodeConnector verbinden soll.</param>
            <param name="valueModifier">Ein optionaler ValueModifier oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.InitReferencedNode(LogicalTaskTree.LogicalNode)">
            <summary>
            Merkt sich den zu referenzierenden Knoten und hängt sich in dessen Events.
            </summary>
            <param name="node">Zu referenzierenden Knoten</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.UserRun">
            <summary>
            Startet den Originalknoten.
            </summary>
            <returns>True, wenn gestartet wurde.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.UserBreak">
            <summary>
            Stoppt den Originalknoten.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.Reload">
            <summary>
            Lädt den Zweig oder Knoten neu.
            </summary>
            <returns>Die RootJobList des neu geladenen Jobs.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.Run(Vishnu.Interchange.TreeEvent)">
            <summary>
            Überschrieben, um das Starten von ValueModifiern zu unterbinden.
            Stattdessen wird über UserRun zum Originalknoten weitergeleitet.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der Checker-Thread gestartet.
            Diese Routine läuft asynchron.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.Break(System.Boolean)">
            <summary>
            Überschrieben, um das Abbrechen von ValueModifiern zu unterbinden.
            Stattdessen wird zum Originalknoten weitergeleitet.
            </summary>
            <param name="userBreak">Bei True hat der Anwender das Break ausgelöst.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.ToString">
            <summary>
            Überschriebene ToString()-Methode.
            </summary>
            <returns>Verkettete Properties als String.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.Equals(System.Object)">
            <summary>
            Vergleicht den Inhalt dieses NodeConnectors nach logischen Gesichtspunkten
            mit dem Inhalt eines übergebenen NodeConnectors.
            </summary>
            <param name="obj">Der NodeConnector zum Vergleich.</param>
            <returns>True, wenn der übergebene NodeConnector inhaltlich gleich diesem ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.GetHashCode">
            <summary>
            Erzeugt einen Hashcode für diesen NodeConnector.
            </summary>
            <returns>Integer mit Hashwert.</returns>
        </member>
        <member name="P:LogicalTaskTree.NodeConnector.Environment">
            <summary>
            Liste mit allen Result-Objekten der Vorgänger des Teilbaums.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeConnector._node">
            <summary>
            Der Knoten, auf den dieser NodeConnector verweist.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeConnector._lastResult">
            <summary>
            Das letzte Verarbeitungsergebnis für diesen Knoten (internes Feld).
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeConnector._userControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl (internes Feld).
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Wird angesprungen, wenn die Verarbeitung des Kind-Knotens beendet ist.
            Kaskadiert u.U. im Tree bis zum Root-Knoten.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein NodeProgressFinished-Event
            nur dann, wenn die Verarbeitung aller Kind-Knoten beendet ist.
            </summary>
            <param name="sender">Der referenzierte Originalknoten (LogicalNode).</param>
            <param name="args">Informationen zum Verarbeitungsfortschritt.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeConnector.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
            <summary>
            Wird angesprungen, wenn sich das Result eines Kind-Knotens geändert hat.
            Kaskadiert im Tree bis zum Root-Knoten nach oben.
            </summary>
            <param name="sender">Der Kind-Knoten.</param>
            <param name="result">Neues Result des Kind-Knotens.</param>
        </member>
        <member name="T:LogicalTaskTree.NodeList">
             <summary>
             Knoten mit Kindern in LogicalTaskTree.
             </summary>
             <remarks>
             File: NodeList.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.NodeList.Logical">
            <summary>
            Der logische Zustand eines Knotens. In einer NodeList wird dieser
            bei jeder Anfrage on the fly rekursiv ermittelt:
            True wird dann zurückgegeben, wenn die Anzahl der Kinder mit Logical=True
            größer als die Schranke nPlus ist und kleiner als die Schranke n- ist und
            auch durch die noch nicht fertigen Kinder nicht mehr >= n- werden kann.
            False wird dann zurückgegeben, wenn entweder die Anzahl der Kinder mit
            Logical=True größer als die Schranke nMinus ist oder
            auch durch die noch nicht fertigen Kinder die Schranke nPlus nicht
            mehr überschritten werden kann.
            Die Schranken nPlus und nMinus werden für diese NodeList in der
            zugehörigen JobList beim Aufbau des Teilbaums gesetzt.
            Für die Vergleichsoperatoren gilt nur, dass alle Operanden beendet sein müssen,
            dann wird der Vergleich ausgeführt und dessen Ergebnis zurückgegeben.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.State">
            <summary>
            Der Verarbeitungszustand eines Knotens. In einer NodeList wird dieser
            bei jeder Anfrage on the fly rekursiv ermittelt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LogicalState">
            <summary>
            Der Ergebnis-Zustand eines Knotens. In einer NodeList wird dieser
            bei jeder Anfrage on the fly rekursiv ermittelt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.SingleNodes">
            <summary>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums;
            Achtung: dieser Wert ist, ebenso wie SingleNodesFinished, verhundertfacht
            (<see cref="P:LogicalTaskTree.SingleNode.SingleNodes"/>).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.SingleNodesFinished">
            <summary>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            In einer NodeList wird dieser bei jeder Anfrage on the fly
            rekursiv ermittelt.
            Achtung: dieser Wert ist, ebenso wie SingleNodes, verhundertfacht
            (<see cref="P:LogicalTaskTree.SingleNode.SingleNodes"/>).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.SnapshotUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden SnapshotUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.JobListUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden JobListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.JobConnectorUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden NodeListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.SingleNodeUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden SingleNodeUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.ConstantNodeUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden ConstantNodeUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.nOperands">
            <summary>
            Anzahl der logisch verknüpften Elemente (SingleNodes oder Teilbäume)
            auf der Ebene dieser NodeList.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.nPlus">
            <summary>
            Schranke für die Ermittlung der Property 'Logical', Details <see cref="P:LogicalTaskTree.NodeList.Logical"/>.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.nMinus">
            <summary>
            Schranke für die Ermittlung der Property 'Logical', Details <see cref="P:LogicalTaskTree.NodeList.Logical"/>.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.IsVolatile">
            <summary>
            Bei True wird zur Ergebnisermittlung im Tree Logical benutzt,
            bei False LastNotNullLogical;
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LastResult">
            <summary>
            Liefert ein Result für diesen Knoten.
            </summary>
            <returns>Ein Result-Objekten für den Knoten.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element - übernimmt den Eltern-Knoten.
            </summary>
            <param name="mother">Der Eltern-Knoten.</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstuktor
            </summary>
            <param name="id">Eindeutige Kennung des Knotens</param>
            <param name="mother">Id des Parent-Knotens.</param>
            <param name="rootJobList">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)">
            <summary>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            </summary>
            <param name="source">LogicalNode mit zu übernehmenden Eigenschaften.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.Refresh">
            <summary>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeList.Break(System.Boolean)">
            <summary>
            Abbrechen der Task.
            Wenn der Knoten selber beschäftigt ist, dann diesen zum Abbruch veranlassen,
            ansonsten die Abbruch-Anforderung an alle Kinder weitergeben.
            </summary>
            <param name="userBreak">Bei True hat der Anwender das Break ausgelöst.</param>
        </member>
        <member name="F:LogicalTaskTree.NodeList.ListNodeState">
            <summary>
            Zusätzlicher NodeState für NodeLists.
            Wird gesetzt, wenn sich für die Liste selbst ein veränderter
            Zustand ergibt. Dies passiert, wenn eine Sub-JobList auf
            Freigabe durch die für sie zuständige JobList wartet.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.ListLogicalState">
            <summary>
            Zusätzlicher NodeLogicalState für NodeLists.
            Wird gesetzt, wenn sich für die Liste selbst ein veränderter
            Zustand ergibt. Dies passiert, wenn eine wartende Sub-JobList
            abgebrochen wird.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LastSingleNodes">
            <summary>
            Die letzte Anzahl Endknoten-Kinder eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.CountResults">
            <summary>
            Anzahl Kinder mit Ergebnis.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LastCountResults">
            <summary>
            Die letzte Anzahl beendeter Kinder eines Knotens mit Ergebnis True oder False.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.CountPositiveResults">
            <summary>
            Anzahl Kinder mit Ergebnis=True. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LastCountPositiveResults">
            <summary>
            Die letzte Anzahl mit True beendeter Kinder eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.CountTerminatedElements">
            <summary>
            Anzahl beendete Kinder.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeList.LastCountTerminatedElements">
            <summary>
            Die letzte Anzahl beendeter Kinder eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.LastCountResultsLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastCountResults.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.LastSingleNodesLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastSingleNodes.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastCountResults.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastReturnedLogical.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.ListLogicalStateLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von ListLogicalState.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeList.LastReturnedLogical">
            <summary>
            Vergleichswert für die Erkennung von Veränderungen des Logical-Wertes unabhängig
            von technisch bedingten Initialisierungen (vor allem für Logging, LastLogical
            würde technisch bedingt zu oft auslösen).
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeList.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Überschriebene RUN-Logik.
            Für NodeList bedeutet das: Einhängen in die Events
            und Weitergabe des Aufrufs an die Kinder.
            Diese Routine wird asynchron ausgeführt.
            </summary>
            <param name="source">Bei abhängigen Checkern das auslösende TreeEvent.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)">
            <summary>
            Setzt threadsafe LastSingleNodes.
            </summary>
            <param name="singleNodes">Neuer Wert</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)">
            <summary>
            Setzt threadsafe LastCountTerminatedElements.
            </summary>
            <param name="countTerminatedElements">Neuer Wert</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)">
            <summary>
            Setzt threadsafe LastCountResults.
            </summary>
            <param name="countResults">Neuer Wert</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)">
            <summary>
            Setzt threadsafe LastCountPositiveResults.
            </summary>
            <param name="countPositiveResults">Neuer Wert</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)">
            <summary>
            Setzt threadsafe ListLogicalState.
            </summary>
            <param name="newLogicalState">Neuer Wert (NodeLogicalState?)</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})">
            <summary>
            Setzt threadsafe LastReturnedLogical.
            </summary>
            <param name="newLogical">Neuer Wert (bool?)</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.ThreadRefreshParentNode">
            <summary>
            Sorgt dafür, dass die NodeList ihre Werte neu ermittelt und sich neu darstellt.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Wird angesprungen, wenn sich der logische Zustand "LastNotNullLogical" eines Kindes geändert hat.
            Dieses Event ist entscheidend für eine mögliche Änderung des logischen Zustandes des Parent-Knoten.
            Kann von SingleNodes und ParentNodes bis hin zum Root-Knoten ausgelöst werden.
            Ursprünglicher Auslöser ist immer eine SingleNode.
            Kaskadiert u.U. im Tree bis zum Root-Knoten nach oben.
            </summary>
            <param name="source">Der auslösende Kind-Knoten.</param>
            <param name="lastNotNullLogical">Letztes relevantes logisches Ergebnis des Kind-Knotens.</param>
            <param name="eventId">Eindeutige Kennung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
            <summary>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands dieser NodeList
            neu zu starten; bei &lt;=&gt; Vergleichen wichtig.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
            <param name="result">Das neue Result.</param>
        </member>
        <member name="T:LogicalTaskTree.NodeParent">
             <summary>
             Funktion: Basisklasse für Knoten mit Kindern: NodeList und NodeConnector.
             </summary>
             <remarks>
             File: NodeParent.cs
             Autor: Erik Nagel
            
             03.06.2018 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.NodeParent.HookedTo">
            <summary>
            Enthält Komma-separiert TreeParams.Name und IdInfo der Knoten, in deren
            Events sich dieser NodeParent eingehängt hat oder den Text "NULL".
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element - gibt die Verarbeitung an die Basisklasse "LogicalNode" weiter.
            </summary>
            <param name="mother">Der Eltern-Knoten</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor - gibt die Verarbeitung an die Basisklasse "LogicalNode" weiter.
            </summary>
            <param name="id">Eindeutige Kennung des Knotens.</param>
            <param name="mother">Der Parent-Knoten.</param>
            <param name="rootJobList">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)">
            <summary>
            Speichert den Kindknoten am übergebenen Index und hängt sich in die Events des Kindknoten ein.
            </summary>
            <param name="index">Der Index, an dem der Child-Knoten gespeichert werden soll.</param>
            <param name="child">Die zu speichernde Child-Node.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)">
            <summary>
            Löst die Event-Verknüpfungen mit dem Child-Knoten am Index index und 
            ruft danach ggf. Dispose für den Child-Knoten auf.
            </summary>
            <param name="index">Der Index, an dem der Child-Knoten freigegeben werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)">
            <summary>
            Löst die Event-Verknüpfungen mit dem Child-Knoten am Index index.
            </summary>
            <param name="index">Der Index, an dem der Child-Knoten freigegeben werden soll.</param>
        </member>
        <member name="P:LogicalTaskTree.NodeParent.IsResultDependent">
            <summary>
            Dieses Flag zeigt an, ob eine neue Auswertung des Parent-Knoten bei Veränderungen
            des logischen Ergebnisses (LastNotNullLogical) eines seiner Kinder erfolgen soll
            (Default), oder bei jeder Result-Veränderung eines seiner Kinder.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.AddChild(LogicalTaskTree.LogicalNode)">
            <summary>
            Speichert den Kindknoten und hängt sich in die Events des Kindknoten ein.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.GetNextChildIndex">
            <summary>
            Liefert den Index, an dem das nächste Child eingefügt würde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.GenerateNextChildId">
            <summary>
            Erzeugt eine eindeutige Id.
            </summary>
            <returns>Eindeutige Id</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.HookChildEvents(LogicalTaskTree.LogicalNode)">
            <summary>
            Speichert den Kindknoten und hängt sich in die Events des Kindknoten ein.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.UnhookChildEvents(LogicalTaskTree.LogicalNode)">
            <summary>
            Löst die Event-Verknüpfungen mit dem Child-Knoten.
            </summary>
            <param name="child">Der zu lösende Child-Knoten.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.GetResultList">
            <summary>
            Liefert eine Liste mit allen Result-Objekten des Teilbaums.
            </summary>
            <returns>Liste von Result-Objekten des Teilbaums.</returns>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.Reset">
            <summary>
            Setzt den Knoten auf Initialwerte zurück.
            Das entspricht dem Zustand beim ersten Starten des Trees.
            Bei Jobs mit gesetztem 'IsConrolled' ist das entscheidend,
            da sonst Knoten gestartet würden, ohne dass die Voraussetzungen
            erneut geprüft wurden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.ThreadRefreshParentNode">
            <summary>
            Sorgt dafür, dass die NodeList ihre Werte neu ermittelt und sich neu darstellt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished">
            <summary>
            Die letzte Anzahl beendeter Endknoten-Kinder eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker">
            <summary>
            Dient zum kurzzeitigen Sperren von LastSingleNodesFinished.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker">
            <summary>
            Dient zum kurzzeitigen Sperren für das Zurücksetzen (Invalidieren)
            verschiedener für die Ermittlung des aktuellen Zustands der
            ParentNode wichtiger Counter.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker">
            <summary>
            Dient zum kurzzeitigen Sperren für das Zurücksetzen (Invalidieren)
            verschiedener für die Ermittlung des aktuellen Zustands der
            ParentNode wichtiger Counter.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)">
            <summary>
            Wird angesprungen, wenn sich der Verarbeitungszustand eines Kindes geändert hat.
            Wird von einer SingleNode ausgelöst.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            </summary>
            <param name="sender">Der Kind-Knoten.</param>
            <param name="state">Verarbeitungszustand des Kind-Knotens.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})">
            <summary>
            Wird angesprungen, wenn sich das aktuelle logische Ergebnis des Child-Knotens geändert hat.
            Wird von einer SingleNode ausgelöst.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            </summary>
            <param name="sender">Kind-Knoten</param>
            <param name="logical">Logisches Ergebnis (null, false, true)</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Wird angesprungen, wenn sich der logische Zustand "LastNotNullLogical" eines Kindes geändert hat.
            Dieses Event ist entscheidend für eine mögliche Änderung des logischen Zustandes des Parent-Knoten.
            Kann von SingleNodes und ParentNodes bis hin zum Root-Knoten ausgelöst werden.
            Ursprünglicher Auslöser ist immer eine SingleNode.
            Kaskadiert u.U. im Tree bis zum Root-Knoten nach oben.
            </summary>
            <param name="sender">Der auslösende Kind-Knoten.</param>
            <param name="lastNotNullLogical">Letztes relevantes logisches Ergebnis des Kind-Knotens.</param>
            <param name="eventId">Eindeutige Kennung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
            <summary>
            Wird angesprungen, wenn sich das Result eines Kind-Knotens geändert hat.
            Kaskadiert im Tree bis zum Root-Knoten nach oben.
            </summary>
            <param name="sender">Der Kind-Knoten.</param>
            <param name="result">Neues Result des Kind-Knotens.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)">
            <summary>
            Wird angesprungen, wenn in einem Kind eine Exception aufgetreten ist.
            Kaskadiert die Exception bis zum Root-Knoten nach oben, ohne die Verarbeitung abzubrechen.
            </summary>
            <param name="source">Die Quelle der Exception.</param>
            <param name="exception">Aufgetretene Exception.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)">
            <summary>
            Wird angesprungen, wenn in einem Kind eine Exception gelöscht wurde.
            Kaskadiert die Auflösung einer vormaligen Exception u.U. bis zum Root-Knoten nach oben.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein ExceptionCleared-Event
            nur dann, wenn kein Child-Knoten mehr eine Exception hält.
            </summary>
            <param name="source">Die Quelle der Exception.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Wird angesprungen, wenn die Verarbeitung des Kind-Knotens gestarted wurde.
            Kaskadiert u.U. im Tree bis zum Root-Knoten nach oben.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein NodeProgressStarted-Event
            nur dann, wenn dieses das erste (und bisher einzige) Kind ist, dessen Verarbeitung gestartet wurde.
            </summary>
            <param name="source">Die Quelle der Exception.</param>
            <param name="args">Zusätzliche Event-Parameter (Fortschritts-% und Info-Object).</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Wird angesprungen, wenn sich der Verarbeitungsfortschritt
            des Referenzierten Originalknotens geändert hat.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            </summary>
            <param name="sender">Der referenzierte Originalknoten (LogicalNode).</param>
            <param name="args">Informationen zum Verarbeitungsfortschritt.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Wird angesprungen, wenn die Verarbeitung des Kind-Knotens beendet ist.
            Kaskadiert u.U. im Tree bis zum Root-Knoten.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein NodeProgressFinished-Event
            nur dann, wenn die Verarbeitung aller Kind-Knoten beendet ist.
            </summary>
            <param name="sender">Der referenzierte Originalknoten (LogicalNode).</param>
            <param name="args">Informationen zum Verarbeitungsfortschritt.</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)">
            <summary>
            Setzt threadsafe LastLogicalState.
            </summary>
            <param name="newLogicalState">Neuer Wert (NodeLogicalState?)</param>
        </member>
        <member name="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)">
            <summary>
            Setzt threadsafe LastSingleNodesFinished.
            </summary>
            <param name="singleNodesFinished">Neuer Wert</param>
        </member>
        <member name="T:LogicalTaskTree.NodeResultComparer">
             <summary>
             Vergleicht i.d.R. zwei oder mehr Result.ReturnObjects möglichst typgerecht über
             einen übergebenen Vergleichsoperator miteinander. Unterstützte Typen sind: bool, DateTime,
             int, double und String. Bei unbekannten Typen wird über die ToString()-Methode verglichen.
             </summary>
             <remarks>
             File: NodeResultComparer
             Autor: Erik Nagel
            
             30.05.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.NodeResultComparer.Compare(System.String,System.Collections.Generic.List{Vishnu.Interchange.Result})">
            <summary>
            Vergleicht mehrere Results über einen übergebenen Vergleichsoperator.
            Gibt null zurück wenn eins der beteiligten Results = null ist.
            </summary>
            <param name="comparer">Vergleichsoperator:"LT","LE","NE","EQ","GE" oder "GT"</param>
            <param name="results">Liste mit zu vergleichenden Objekten</param>
            <returns>True, False oder null</returns>
        </member>
        <member name="T:LogicalTaskTree.NodeShellBase">
             <summary>
             Basisklasse für CheckerShell, TriggerShell, WorkerShell.
             Stellt Parameter-Ersetzung zur Verfügung.
             Berücksichtigt eine lokale IParameterReplacer-Dll oder eine solche
             im UserAssemblies Verzeichnis.
             Stellt bool CanRun() zur Verfügung.
             Berücksichtigt eine lokale ICanRun-Dll oder eine solche
             im UserAssemblies Verzeichnis (Hinweis: IParameterReplacer und
             ICanRun können auch von einer gemeinsamen dll implementiert werden).
             </summary>
             <remarks>
             File: NodeShellBase.cs
             Autor: Erik Nagel
            
             30.05.2015 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
            <summary>
            Wird von Vishnu vor jedem Run eines Checkers, Workers oder vor
            Start eines Triggers aufgerufen.
            Returnt true, wenn der Run/Start ausgewführt werden kann.
            </summary>
            <param name="parameters">Aufrufparameter des Benutzers.</param>
            <param name="treeParameters">Interne Parameter des Trees.</param>
            <param name="source">Aufrufewndes TreeEvent.</param>
            <returns>True, wenn der Run/Start ausgeführt werden kann.</returns>
        </member>
        <member name="P:LogicalTaskTree.NodeShellBase.CanRunDllPath">
            <summary>
            Pfad zu einer optionalen Dll, die eine ICanRun-Instanz zur Verfügung stellt.
            Wenn vorhanden, wird vor jedem Run des zugehörigen Checkers oder Workers
            CanRun aufgerufen. Liefert CanRun false zurück, wird der Start abgebrochen.
            Zusätzlich können in CanRun die übergebenen Parameter noch modifiziert werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.NodeShellBase.#ctor">
            <summary>
            Standard-Konstruktor: prüft, ob ICanRun-dll und/oder IParameterReader-dll
            im aktuellen- oder UserAssemblies-Verzeichnis existieren und lädt diese.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeShellBase.CanRunLoadingException">
            <summary>
            Wenn ungleich null, dann ist beim dynamischen Laden der Dll ein Fehler aufgetreten.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.NodeShellBase.CanRunDll">
            <summary>
            Dll mit der Instanz von ICanRun. Wenn vorhanden, wird CanRun vor jedem Start
            eines Knotens aufgerufen. Liefert CanRun false zurück, wir der Start abgebrochen.
            In CanRun können darüber hinaus die per ref übergebenen Parameter noch
            modifiziert werden.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.Provider.EmptyJobProvider">
            <summary>
            Dummy-JobProvider für Snapshots.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Provider.EmptyJobProvider.GetJob(System.String@)">
            <summary>
            Liefert eine konkrete Job-Instanz für eine JobList
            in einem LogicalTaskTree.
            </summary>
            <param name="name">Namen/Suchbegriff/Pfad des Jobs oder null</param>
            <returns>Instanz des Jobs, der zu dem Namen gehört.</returns>
        </member>
        <member name="M:LogicalTaskTree.Provider.EmptyJobProvider.GetLogicalJobName(System.String)">
            <summary>
            Retourniert den logischen Namen des Jobs mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Logischer Name des Jobs oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.Provider.EmptyJobProvider.GetPhysicalJobPath(System.String)">
            <summary>
            Retourniert den physischen Namen des JobPackages mit dem
            physischen Namen des JobPackages oder logischen Namen des Jobs.
            </summary>
            <param name="name">Logischer oder physischer Name des Jobs oder JobPackages.</param>
            <returns>Physischer Name des JobPackages oder null.</returns>
        </member>
        <member name="T:LogicalTaskTree.Provider.ProductionJobProvider">
            <summary>
              Sucht, lädt und liefert Jobs für JobList-Knoten im LogicalTaskTree.
            </summary>
            <remarks>
              File: ProductionJobProvider.cs
              Autor: Erik Nagel
              12.10.2013 Erik Nagel: erstellt
              27.10.2017 Erik Nagel: Bessere Auflösung gezippter Jobs mit SubJobs.
              01.02.2024 Erik Nagel: AppSettings.JobDirPathes um "Documentation" und "Tests" erweitert.
              22.02.2024 Erik Nagel: GetJobElementResolvedPath, isPathServerReachable und canPing
                         hier rausgeschmissen und in überarbeiteter Form in NetworkMappingsRefresher realisiert.
            </remarks>
        </member>
        <member name="M:LogicalTaskTree.Provider.ProductionJobProvider.TryLoadJobPackage(System.String@)">
            <summary>
              Fügt dem Dictionary LoadedJobPackages das JobPackage
              mit dem logischen Pfad logicalJobName hinzu.
              Im Fehlerfall wird einfach nichts hinzugefügt.
            </summary>
            <param name="logicalJobName">Der logische Name des Jobs oder null beim Root-Job.</param>
        </member>
        <member name="T:LogicalTaskTree.ResultList">
            <summary>
            Ein Thread-safes Dictionary mit Results; Keys sind die jeweiligen NodeIDs.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.SingleNode">
             <summary>
             Endknoten in einem LogicalTaskTree.
             Besitzt einen Checker, der die Arbeit macht und ein logisches
             Ergebnis zurück liefert, ggf. auch noch ein Rückgabe-Objekt.
             </summary>
             <remarks>
             File: SingleNode.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.Logical">
            <summary>
            Der logische Zustand des Knotens.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.State">
            <summary>
            Der Verarbeitungszustand des Knotens:
            Null, None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), Busy (= Waiting | Working) oder CanStart (= None | Ready).
            <see cref="T:Vishnu.Interchange.NodeState"/>
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.SingleNodes">
            <summary>
            Anzahl Endknoten eines Teilbaumes, hier immer = 100.
            Normalerweise kann hier nur die 1 (für eine SingleNode) zurückgegeben werden,
            durch die Verhundertfachung wird aber eine granulare Fortschrittsmeldung für einen
            Knoten ermöglicht. Dies zieht sich dann aber durch den kompletten Baum, weshalb alle
            Zählerwerte gedanklich durch 100 geteilt werden müssen um wieder die Anzahl Endknoten
            zu erhalten.
            <see cref = "P:LogicalTaskTree.SingleNode.SingleNodesFinished" />
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.SingleNodesFinished">
            <summary>
            Verarbeitungsfortschritt in Prozent.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.Checker">
            <summary>
            Der Arbeitsprozess - hier wird mit der Welt kommuniziert,
            externe Prozesse gestartet oder beobachtet.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.LastResult">
            <summary>
            Liefert ein Result für diesen Knoten.
            </summary>
            <returns>Ein Result-Objekten für den Knoten.</returns>
        </member>
        <member name="P:LogicalTaskTree.SingleNode.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor für ein Snapshot-Dummy-Element - übernimmt den Eltern-Knoten.
            </summary>
            <param name="mother">Der Eltern-Knoten.</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor
            </summary>
            <param name="id">Eindeutige Kennung des Knotens.</param>
            <param name="mother">Id des Parent-Knotens.</param>
            <param name="rootJoblist">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.SetReturnObject(System.Object)">
            <summary>
            Setzt das ReturnObject auf ein Object (für Snapshots).
            </summary>
            <param name="returnObject">Ein beliebiges Object.</param>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.ToString">
            <summary>
            Überschriebene ToString()-Methode.
            </summary>
            <returns>Verkettete Properties als String.</returns>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.Equals(System.Object)">
            <summary>
            Vergleicht den Inhalt dieser SingleNode nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen SingleNode.
            </summary>
            <param name="obj">Die SingleNode zum Vergleich.</param>
            <returns>True, wenn die übergebene SingleNode inhaltlich gleich dieser ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.GetHashCode">
            <summary>
            Erzeugt einen Hashcode für diese SingleNode.
            </summary>
            <returns>Integer mit Hashwert.</returns>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.GetResultList">
            <summary>
            Das Result wegen der Kompatibilität zur Liste aufgeblasen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.SetLastResult">
            <summary>
            Setzt LastResult auf die aktuellen Werte oder erzeugt
            ein new Result mit den aktuellen Werten.
            Registriert das LastResult bei der RootJoblist und
            schleudert OnLogicalStateChanged.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.RaiseNodeLastResultChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
            <summary>
            Triggert das TreeEvent "AnyResultHasChanged" und ruft "OnNodeResultChanged".
            </summary>
            <param name="source">Die ursprüngliche Quelle der Events.</param>
            <param name="lastNotNullLogical">Der logische Wert des Senders.</param>
            <param name="eventId">Eine optionale Guid zur eindeutigen Identifizierung des Events.</param>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.Reset">
            <summary>
            Setzt den Knoten auf Initialwerte zurück.
            Das entspricht dem Zustand beim ersten Starten des Trees.
            Bei Jobs mit gesetztem 'IsConrolled' ist das entscheidend,
            da sonst Knoten gestartet würden, ohne dass die Voraussetzungen
            erneut geprüft wurden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der Checker-Thread gestartet.
            Diese Routine läuft asynchron.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.SingleNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)">
            <summary>
            Löst das NodeProgressFinished-Ereignis aus.
            </summary>
            <param name="itemsName">Name für die Elemente, die für den Verarbeitungsfortschritt gezählt werden.</param>
            <param name="countAll">Gesamtanzahl - entspricht 100%.</param>
            <param name="countSucceeded">Erreichte Anzahl - kleiner-gleich 100%.</param>
        </member>
        <member name="F:LogicalTaskTree.SingleNode._returnObject">
            <summary>
            Rückgabe-Objekt des letzten Checker-Durchlaufs, nicht öffentliche, interne Representation.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.SingleNode._state">
            <summary>
            Der Verarbeitungszustand des Knotens:
            Null, None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), Busy (= Waiting | Working) oder CanStart (= None | Ready)
            (internes Feld).
            <see cref="T:Vishnu.Interchange.NodeState"/>
            </summary>
        </member>
        <member name="F:LogicalTaskTree.SingleNode._logical">
            <summary>
            Der logische Zustand des Knotens (internes Feld).
            </summary>
        </member>
        <member name="T:LogicalTaskTree.SnapshotRefreshedEventHandler">
            <summary>
            Wird aufgerufen, wenn der Snapshot refreshed wurde.
            </summary>
            <param name="sender">Die Ereignis-Quelle.</param>
        </member>
        <member name="T:LogicalTaskTree.Snapshot">
             <summary>
             Knoten in einem LogicalTaskTree, der zur Anzeige
             eines Remote-LogicalTaskTree dient.
             </summary>
             <remarks>
             File: Snapshot.cs
             Autor: Erik Nagel
            
             09.11.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="E:LogicalTaskTree.Snapshot.SnapshotRefreshed">
            <summary>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.SingleNodes">
            <summary>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums;
            Achtung: dieser Wert ist, ebenso wie SingleNodesFinished, verhundertfacht
            (<see cref="P:LogicalTaskTree.SingleNode.SingleNodes"/>).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.SingleNodesFinished">
            <summary>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            In einer NodeList wird dieser bei jeder Anfrage on the fly
            rekursiv ermittelt.
            Achtung: dieser Wert ist, ebenso wie SingleNodes, verhundertfacht
            (<see cref="P:LogicalTaskTree.SingleNode.SingleNodes"/>).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.Timestamp">
            <summary>
            Der Zeitpunkt, zu dem dieser Snapshot erstellt wurde.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.SnapshotPath">
            <summary>
            Die XML-Datei, aus der dieser Snapshot erstellt wurde.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.IsDefaultSnapshot">
            <summary>
            True, wenn dieser Snapshot nicht geladen werden konnte und stattdessen
            der Default-Snapshot geladen wurde.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.JobListUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden JobListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.NodeListUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden NodeListUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.SingleNodeUserControlPath">
            <summary>
            Der Pfad zu aktuell dynamisch zu ladenden SingleNodeUserControls.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.Snapshot.WasDefaultSnapshot">
            <summary>
            True, wenn dieser Snapshot geladen wird und vorher
            der Default-Snapshot geladen wurde.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
            <summary>
            Konstruktor - übernimmt den Eltern-Knoten.
            </summary>
            <param name="mother">Der Eltern-Knoten.</param>
            <param name="rootJobList">Die Root-JobList</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.Show(System.String)">
            <summary>
            Gibt den (Teil-)Baum in eine StringList aus.
            </summary>
            <param name="indent">Einrück-Weite pro Hierarchie-Tiefe.</param>
            <returns>Baumdarstellung in einer StringList</returns>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.RefreshSnapshot(LogicalTaskTree.LogicalNode,System.Boolean)">
            <summary>
            Aktualisiert den Snapshot aus einer externen XML-Datei.
            </summary>
            <param name="mother">Der besitzende Knoten.</param>
            <param name="isConstructor">Default-Parameter: bei true stammt der Aufruf
            vom Snapshot-Constructor; Default: false.</param>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.RefreshSnapshot">
            <summary>
            Aktualisiert den Snapshot aus einer externen XML-Datei.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider,System.Collections.Generic.List{System.String})">
            <summary>
            Konstruktor für rekursive Aufrufe.
            </summary>
            <param name="logicalName">Eindeutige Kennung des Knotens</param>
            <param name="mother">Der besitzende Knoten.</param>
            <param name="rootJoblist">Die zuständige JobList.</param>
            <param name="treeParams">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="jobProvider">Die Datenquelle für den Job</param>
            <param name="parsedJobs">Liste von Namen aller bisher geparsten Jobs.</param>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.GetResult(System.String)">
            <summary>
            Liefert für eine anfragende SingleNode (Worker) das Verarbeitungsergebnis
            (object) eines vorher beendeten Knotens als Eingangsparameter.
            </summary>
            <param name="nodeId">Die Id des Knotens, der ein Result-Objekt hier abgelegt hat.</param>
            <returns>Das Result-Objekt des Knotens.</returns>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.DoRun(Vishnu.Interchange.TreeEvent)">
            <summary>
            Überschriebene RUN-Logik.
            Diese Routine wird asynchron ausgeführt.
            </summary>
            <param name="source">Auslösendes TreeEvent oder null.</param>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.OnSnapshotRefreshed">
            <summary>
            Löst das SnapshotRefreshed-Ereignis aus.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.Snapshot.buildTreeFromRemoteJob(LogicalTaskTree.LogicalNode,System.Int32,LogicalTaskTree.LogicalNode@,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Baut den LogicalTask(Teil-)Tree.
            </summary>
            <param name="level">Die Hierarchie-Stufe des Teil-Baums</param>
            <param name="node2parse">Der zu parsende Knoten des Teil-Baums</param>
            <param name="xElement">Der aktuelle Knoten des XML-Dokuments.</param>
            <param name="isConstructor">Default-Parameter: bei true stammt der Aufruf
            vom Snapshot-Constructor; Default: false.</param>
            <param name="mother">Der besitzende Knoten.</param>
        </member>
        <member name="T:LogicalTaskTree.SnapshotManager">
             <summary>
             Statische Klasse für die asynchrone, thread-sichere Erzeugung von JobSnapsots.
             Bei mehrfach hintereinander eintreffenden Anforderungen wird eine gerade laufende
             Snapshot-Erzeugung nicht unterbrochen, sondern nur über ein Flag geregelt, dass direkt
             nach Fertigstellung des aktuellen Snapshots der nächste begonnen wird. Zwischenzeitliche
             Anforderungen werden verworfen.
             </summary>
             <remarks>
             File: SnapshotManager.cs
             Autor: Erik Nagel
            
             26.12.2013 Erik Nagel: erstellt
             14.07.2016 Erik Nagel: _taskWorker_TaskProgressFinished zum Loggen von Exceptions implementiert.
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.SnapshotManager.RequestSnapshot(LogicalTaskTree.LogicalNode)">
            <summary>
            Fordert einen Snapshot des trees an.
            </summary>
            <param name="tree">Root des Trees</param>
        </member>
        <member name="M:LogicalTaskTree.SnapshotManager.CleanUp">
            <summary>
            Löscht am Ende der Verarbeitung alle stehengebliebenen Snapshots.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.SnapshotManager.#cctor">
            <summary>
            Statischer Konstruktor - inizialisiert den SnapshotManager.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.SnapshotManager.Tree2XML(LogicalTaskTree.LogicalNode)">
            <summary>
            Gibt den (Teil-)Baum in eine XML-Struktur aus.
            </summary>
            <returns>Baumdarstellung in einer XML-Struktur (XElement).</returns>
        </member>
        <member name="M:LogicalTaskTree.SnapshotManager.Node2XML(System.Int32,LogicalTaskTree.LogicalNode,System.Object)">
            <summary>
            Erstellt für die übergebene LogicalNode einen XML-Snapshot.
            </summary>
            <param name="depth">Nullbasierter Zähler der Rekursionstiefe eines Knotens im LogicalTaskTree.</param>
            <param name="node">Basisklasse eines Knotens im LogicalTaskTree.</param>
            <param name="parent">Elternelement des User-Objekts.</param>
            <returns>User-Objekt.</returns>
        </member>
        <member name="T:LogicalTaskTree.TreeEventQueue">
             <summary>
             Statische Queue für TreeEvents. Ein TreeEvent für ein Ereignis und einen Knotentyp
             wird nur maximal einmal gleichzeitig in die Queue aufgenommen. Die Queue wird asynchron
             abgearbeitet, so dass eventuelle zirkuläre Event-Referenzen nicht zur System-Überlastung
             führen. Events, die gerade nicht in die Queue aufgenommen werden können, werden ersatzlos
             verworfen. Deshalb ist diese Queue auch nur für die Ablaufsteuerung, aber z.B. nicht für
             Logging geeignet.
             </summary>
             <remarks>
             File: TreeEventQueue.cs
             Autor: Erik Nagel
            
             23.11.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.TreeEventQueue.#cctor">
            <summary>
            Statischer Konstruktor - inizialisiert die TreeEventQueue.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.ComposedQueueElement">
            <summary>
            Enthält zu einem Key (treeEvent + ":" + nodeId) einen TreeEventTrigger (Trigger).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ComposedQueueElement.Key">
            <summary>
            treeEvent + ":" + nodeId.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ComposedQueueElement.Source">
            <summary>
            Das auslösende TreeEvent.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ComposedQueueElement.Trigger">
            <summary>
            TreeEventTrigger.
            </summary>
        </member>
        <member name="T:LogicalTaskTree.TreeEventTrigger">
             <summary>
             Trigger für interne Events aus dem Tree.
             Macht Tree-Events für Trigger "von außen" nutzbar und erweitert
             so das Trigger-Einsatzspektrum.
             Ein TreeEventTrigger triggert 1 bis n Checker.
             </summary>
             <remarks>
             File: TreeEventTrigger.cs
             Autor: Erik Nagel
            
             19.11.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.Info">
            <summary>
            Enthält Informationen zum besitzenden Trigger.
            Implementiert sind NextRun und NextRunInfo. Für das Hinzufügen weiterer
            Informationen kann diese Klasse abgeleitet werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TreeEventTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Setzt den internen Trigger auf aktiv.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger aufruft.</param>
            <param name="triggerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
            <returns>True, wenn der Trigger durch diesen Aufruf tatsächlich gestartet wurde.</returns>
        </member>
        <member name="M:LogicalTaskTree.TreeEventTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Setzt den internen Trigger auf deaktiv.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger aufruft.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.IsActive">
            <summary>
            Ersetzt das Starten und Stoppen bei internen Triggern.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.InternalEvents">
            <summary>
            Ein normalisierter String mit durch '|' getrennten internen Event-Namen.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.OwnerId">
            <summary>
            Id des Knotens, der von dem Event getriggert wird
            (nicht des Knotens, der das Event auslöst).
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.LastTreeEvent">
            <summary>
            Das letzte aufgetretene TreeEvent für diesen Trigger oder null.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TreeEventTrigger.ReferencedNodeId">
            <summary>
            Enthält den Namen des referenzierten Originalknotens.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TreeEventTrigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Konstruktor - übernimmt und erzeugt diverse Informationen für den TreeEventTrigger.
            </summary>
            <param name="internalEvents">String mit durch '|' getrennten Programm-seitigen Event-Namen.</param>
            <param name="ownerId">Id des besitzenden Knoten.</param>
            <param name="originalReference">Wenn mit einer gültigen Zeitdauer gefüllt, dann feuert der Trigger nach
            Ablauf dieser Zeit auf jeden Fall. Gültige Zeitangaben sind (Regex): "(?:MS|S|M|H|D):\d+".</param>
            <param name="referencedNodeId">Id des Knoten, auf dessen Ereignisse der Trigger hört.</param>
        </member>
        <member name="M:LogicalTaskTree.TreeEventTrigger.OnTriggerFired(Vishnu.Interchange.TreeEvent)">
            <summary>
            Trigger-Event auslösen.
            </summary>
            <param name="source">Der Auslöser des Ereignisses oder null (bei Timer-Induzierung).</param>
        </member>
        <member name="E:LogicalTaskTree.TreeEventTrigger.TriggerIt">
            <summary>
            Wird ausgelöst, wenn das Trigger-Ereignis eintritt. 
            </summary>
        </member>
        <member name="T:LogicalTaskTree.TriggerShell">
             <summary>
             Kapselt einen internen (TreeEvent-) oder externen (Dll-) Trigger.
             </summary>
             <remarks>
             File: TriggerShell.cs
             Autor: Erik Nagel
            
             19.07.2013 Erik Nagel: erstellt.
             18.10.2014 Erik Nagel: komplett überarbeitet.
             20.04.2019 Erik Nagel: Statt des unnützen boolean-Platzhalters wird jetzt der Knoten selbst
                                    in RegisteredMayBeTriggeredNodePathes gespeichert;
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.TriggerShell.Info">
            <summary>
            Enthält Informationen zum besitzenden Trigger.
            Implementiert sind NextRun und NextRunInfo. Für das Hinzufügen weiterer
            Informationen kann die Klasse TriggerInfo abgeleitet werden.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Startet den Trigger mit der aufzurufenden Callback-Routine als Parameter.
            Der Trigger wird nur dann tatsächlich neu gestartet, wenn alle vorher über
            RegisterTriggerIt angemeldeten Knoten auch Trigger.Start aufgerufen haben
            und der Trigger nicht schon läuft.
            </summary>
            <param name="triggerController">Das Objekt, das Trigger.Start aufruft.</param>
            <param name="internalTriggerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
            <returns>True, wenn der Trigger durch diesen Aufruf tatsächlich gestartet wurde.</returns>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Stoppt den Trigger wenn alle zu triggernden Knoten Trigger.Stop aufgerufen haben.
            </summary>
            <param name="triggerController">Das Objekt, das Trigger.Stop aufruft.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.Dispose">
            <summary>
            Öffentliche Methode zum Aufräumen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.Dispose(System.Boolean)">
            <summary>
            Hier wird aufgeräumt: ruft für alle User-Elemente, die Disposable sind, Dispose() auf.
            </summary>
            <param name="disposing">Bei true wurde diese Methode von der öffentlichen Dispose-Methode
            aufgerufen; bei false vom internen Destruktor.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.Finalize">
            <summary>
            Finalizer: wird vom GarbageCollector aufgerufen.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TriggerShell.HasTreeEventTrigger">
            <summary>
            True, wenn die TriggerShell einen TreeEventTrigger kapselt.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.TriggerShell.ReferencedNodeName">
            <summary>
            Name eines ursprünglich referenzierten Knotens oder null.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.GetTreeEventTrigger">
            <summary>
            Liefert den Trigger, wenn die TriggerShell einen TreeEventTrigger kapselt oder null.
            </summary>
            <returns>Zugeordneter TreeEventTrigger oder der einer zugeordneten Slave-TriggerShell oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object)">
            <summary>
            Konstruktor
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Dll, die INodeTrigger implementiert.</param>
            <param name="triggerParameters">String mit Steuerparametern für den Trigger.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="triggerShellReference">Name eines benannten Triggers.</param>
            <param name="triggerParameters">String mit Zusatzinformationen (Node-Id).</param>
            <param name="dummy">Dient nur zur Unterscheidung der Signatur dieses zum anderen Konstruktor.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.GetTriggerReference">
            <summary>
            Liefert den Namen des Triggers, der einem Checker zugeordnet werden soll.
            </summary>
            <returns>Namen des Triggers, der dem Checker zugeordnet werden soll oder null.</returns>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.GetTriggerParameters">
            <summary>
            Liefert die zuletzt übergebenen Parameter dieses Triggers.
            </summary>
            <returns>die zuletzt übergebenen Parameter dieses Triggers.</returns>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.SetSlaveTriggerShell(LogicalTaskTree.TriggerShell)">
            <summary>
            Bei TriggerShells, die bei der Instanziierung nur eine Namensreferenz
            mitbekommen haben, wird hier nachträglich der Trigger übergeben.
            </summary>
            <param name="triggerShell">Referenzierte TriggerShell.</param>
        </member>
        <member name="F:LogicalTaskTree.TriggerShell.RegisteredMayBeTriggeredNodePathes">
            <summary>
            Enthält die Pfade aller von diesem Trigger zu triggernden Knoten und
            die Knoten selbst als LogicalNodes;
            Hintergrund: ein Trigger, der mehrere Knoten triggert, feuert erst dann
            das erste Mal, wenn alle hier vorangemeldeten Knoten auch tatsächlich
            Trigger.Start aufgerufen haben. Damit wird sichergestellt, dass alle
            abhängigen Knoten gestartet sind, bevor der Trigger das erste mal
            feuert.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.RegisterTriggerIt(System.String,LogicalTaskTree.LogicalNode)">
            <summary>
            Registriert einen Knoten über seinen eindeutigen Path für den Trigger;
            Hintergrund: ein Trigger, der mehrere Knoten triggert, feuert erst dann
            das erste Mal, wenn alle hier vorangemeldeten Knoten auch tatsächlich
            Trigger.Start aufgerufen haben. Damit wird sichergestellt, dass alle
            abhängigen Knoten gestartet sind, bevor der Trigger das erste mal
            feuert.
            </summary>
            <param name="path">Eindeutiger Pfad des später zu triggernden Knotens.</param>
            <param name="node">Der Knoten selbst als LogicalNode.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.UnregisterTriggerIt(System.String)">
            <summary>
            Löscht die Registrierung für einen Knoten (passiert für einen Knoten und
            seine Unterknoten beim UserBreak auf den Knoten). Der Knoten wird dann beim
            nächsten Aufruf nicht mehr berücksichtigt.
            </summary>
            <param name="path">Eindeutiger Pfad des Knotens.</param>
        </member>
        <member name="F:LogicalTaskTree.TriggerShell.TriggerParameters">
            <summary>
            Bei TreeEventTriggern der Knoten, auf den der Trigger reagiert.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.TriggerShell.TriggerShellReference">
            <summary>
            Bei TreeEventTriggern die Events, auf die der Trigger feuert.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.unregisterTriggerIt(System.String)">
            <summary>
            Löscht die Registrierung für einen Knoten (passiert für einen Knoten und
            seine Unterknoten beim UserBreak auf den Knoten). Der Knoten wird dann beim
            nächsten Aufruf nicht mehr berücksichtigt.
            </summary>
            <param name="path">Eindeutiger Pfad des Knotens.</param>
        </member>
        <member name="M:LogicalTaskTree.TriggerShell.SlaveTriggersIt(Vishnu.Interchange.TreeEvent)">
            <summary>
            Wird angesprungen, wenn der zugeordnete INodeTrigger feuert:
            gibt das Event weiter.
            </summary>
            <param name="source">Das Auslösende TreeEvent.</param>
        </member>
        <member name="T:LogicalTaskTree.ValueModifier`1">
             <summary>
             Filtert das ReturnObject eines INodeCheckers nach Typ und ggf. Format-String.
             </summary>
             <typeparam name="T">Konkreter Typ der Instanz (Boolean, Int16, Int32, Int64, DateTime, Object).</typeparam>
             <remarks>
             File: ValueModifier.cs
             Autor: Erik Nagel
            
             27.05.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.ReturnObject">
            <summary>
            Das modifizierte ReturnObject des zugeordneten INodeCheckers.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.UserControlPath">
            <summary>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt (oder beobachtet).
            </summary>
            <param name="checkerParameters">Spezifische Aufrufparameter oder null.</param>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="source">Auslösendes TreeEvent oder null.</param>
            <returns>True, False oder null</returns>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.SlavePathName">
            <summary>
            Pfad zum externen ValueModifier. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.FormatString">
            <summary>
            Formatierungs-String. 
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.NodeCheckerBase">
            <summary>
            Ausführender Checker oder ValueModifier.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.CheckerBaseReferenceName">
            <summary>
            Referenz auf eine ausführende NodeCheckerBase.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.ValueModifier`1.CheckerTrigger">
            <summary>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult auf false).
            Wird vom IJobProvider bei der Instanziierung mitgegeben.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.ModifyValue(System.Object)">
            <summary>
            Konvertiert einen Wert in das für diesen
            ValueModifier gültige Format.
            </summary>
            <param name="toConvert">Zu konvertierender Wert</param>
            <returns>Konvertierter Wert.</returns>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.#ctor(LogicalTaskTree.NodeCheckerBase)">
            <summary>
            Konstruktor - übernimmt die zugeordnete NodeCheckerBase.
            </summary>
            <param name="nodeChecker">NodeCheckerBase, deren ReturnObject gefiltert oder verändert werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String)">
            <summary>
            Konstruktor - übernimmt den Namen einer bereits definierten NodeCheckerBase.
            </summary>
            <param name="checkerReference">Name der NodeCheckerBase, dessen ReturnObject gefiltert oder verändert werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,LogicalTaskTree.NodeCheckerBase)">
            <summary>
            Konstruktor - übernimmt einen Format-String oder den Pfad einer externen
            IValueModifier-Dll und die zugeordnete NodeCheckerBase.
            </summary>
            <param name="formatStringOrValueModifierPath">Zusätzlicher Format-String (analog String.Format) oder Pfad zu einer IValueModifier-Dll</param>
            <param name="nodeCheckerBase">NodeCheckerBase, deren ReturnObject gefiltert oder verändert werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,System.String)">
            <summary>
            Konstruktor - übernimmt einen Format-String oder den Pfad einer externen
            IValueModifier-Dll und den Namen einer bereits definierten NodeCheckerBase.
            </summary>
            <param name="formatStringOrValueModifierPath">Zusätzlicher Format-String (analog String.Format) oder Pfad zu einer IValueModifier-Dll</param>
            <param name="checkerReference">Name der NodeCheckerBase, deren ReturnObject gefiltert oder verändert werden soll.</param>
        </member>
        <member name="M:LogicalTaskTree.ValueModifier`1.GetCheckerReference">
            <summary>
            Liefert den Namen des Checkers, der diesem ValueConverter zugeordnet werden soll.
            </summary>
            <returns>Namen des Checkers, der diesem ValueConverter zugeordnet werden soll oder null.</returns>
        </member>
        <member name="T:LogicalTaskTree.WorkerShell">
             <summary>
             Kapselt den Aufruf einer externen Arbeitsroutine,
             die als Reaktion auf eine definierte Änderung des Tree-Zustands
             (TreeEvent) als externe Exe ausgeführt wird (fire and forget)
             TODO: später eventuell auch als lightweight Dll-Plugin realisieren.
             </summary>
             <remarks>
             File: WorkerShell.cs
             Autor: Erik Nagel
            
             01.03.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)">
            <summary>
            Startet einen zuständigen Worker, nachdem sich ein definierter Zustand
            (TreEvent) im Tree geändert hat.
            Intern wird für jeden Exec eine eigene Task gestartet.
            </summary>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="nodeId">Id des Knotens, zu dem der Worker gehört.</param>
            <param name="eventParameters">Klasse mit Informationen zum Ereignis.</param>
            <param name="isResetting">True, wenn der Worker mit einem letzten Aufruf (ok-Meldung) beendet werden soll.</param>
        </member>
        <member name="P:LogicalTaskTree.WorkerShell.SlavePathName">
            <summary>
            Die bei Änderung des Zustands von Logical aufzurufende Exe.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.WorkerShell.TransportByFile">
            <summary>
            Bei True werden die Parameter über eine XML-Datei übergeben, ansonsten über die Kommandozeile;
            Default: false.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.WorkerShell.WorkerState">
            <summary>
            Zustand des Workers.
            None, Valid, Invalid.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.BreakExec">
            <summary>
            Abbrechen der Task.
            Worker Scheduler (nicht den Worker!) über CancellationToken abbrechen.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.Exists">
            <summary>
            Returnt True, wenn der SlavePathName existiert und Zugriff möglich ist.
            </summary>
            <returns>True, wenn der SlavePathName existiert und Zugriff möglich ist.</returns>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement)">
            <summary>
            Konstruktor - übernimmt den Pfad zur Worker-Exe, und einen Parameter-String, der beim
            Aufruf der Exe zusätzlich übergeben wird. Der Parameter-String kann neben beliebigen, durch
            die Programm-Session auflösbaren Platzhaltern folgende Platzhalter
            enthalten, die beim Aufruf der Worker-Exe durch aktuelle Laufzeit-Werte ersetzt werden:
              "%Event%" = Name des Ereignisses, das zum Aufruf des Workers geführt hat,
              "%Source%" = Quelle des Ereignisses (Knoten, in dem das Ereignis zuerst aufgetreten ist),
              "%Sender%" = Knoten, der aufgrund des Ereigniss aktuell den Worker aufruft,
              "%Timestamp%" = aktuelles Datum mit aktueller Uhrzeit im Format "dd.MM.yyyy HH.mm.ss",
              "%Logical%" = aktueller logischer Wert des Senders,
              "%Exception%" = Exception.Message, falls %Event% gleich "Exception" ist, ansonsten "".
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Exe.</param>
            <param name="slaveParameters">Aufrufparameter der Exe als XML.</param>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement,System.Boolean,Vishnu.Interchange.INodeTrigger)">
            <summary>
            Konstruktor - übernimmt den Pfad zur Worker-Exe, und einen Parameter-String, der beim
            Aufruf der Exe zusätzlich übergeben wird. Optional kann zusätzlich ein Trigger übergeben werden,
            der einen einmal aktivierten Worker, wiederholt aufruft.
            Der Parameter-String kann neben beliebigen, durch die Programm-Session auflösbaren Platzhaltern
            folgende Platzhalter enthalten, die beim Aufruf der Worker-Exe durch aktuelle Laufzeit-Werte
            ersetzt werden:
              "%Event%" = Name des Ereignisses, das zum Aufruf des Workers geführt hat,
              "%Source%" = Quelle des Ereignisses (Knoten, in dem das Ereignis zuerst aufgetreten ist),
              "%Sender%" = Knoten, der aufgrund des Ereigniss aktuell den Worker aufruft,
              "%Timestamp%" = aktuelles Datum mit aktueller Uhrzeit im Format "dd.MM.yyyy HH.mm.ss",
              "%Logical%" = aktueller logischer Wert des Senders,
              "%Exception%" = Exception.Message, falls %Event% gleich "Exception" ist, ansonsten "".
            </summary>
            <param name="slavePathName">Dateipfad und Name einer Exe.</param>
            <param name="slaveParameters">Aufrufparameter der Exe als XML.</param>
            <param name="transportByFile">Bei True werden die Parameter über eine XML-Datei übergeben, ansonsten über die Kommandozeile.</param>
            <param name="workerTrigger">Ein Trigger, der den Job wiederholt aufruft oder null.</param>
        </member>
        <member name="P:LogicalTaskTree.WorkerShell.Trigger">
            <summary>
            Ein optionaler Trigger, der den Job wiederholt aufruft oder null.
            Wird vom IJobProvider bei der Instanziierung mitgegeben.
            </summary>
        </member>
        <member name="P:LogicalTaskTree.WorkerShell._nodeCancellationTokenSource">
            <summary>
            Hierüber kann eine Task für einen Loop zum Mehrfach-Start des Workers
            von außen abgebrochen werden.
            </summary>
        </member>
        <member name="F:LogicalTaskTree.WorkerShell._cancellationToken">
            <summary>
            Über die CancellationTokenSource kann dieses Token auf
            Abbruch gesetzt werden, was die Task mit dem Loop beendet.
            </summary>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.execAsync(Vishnu.Interchange.TreeEvent,System.Boolean)">
            <summary>
            Eigene (Timer-)Task Action für den Exec eines Workers.
            </summary>
            <param name="source">Das auslösende Ereignis.</param>
            <param name="calledFromTrigger">True, wenn der Aufruf vom Trigger kommt.</param>
        </member>
        <member name="M:LogicalTaskTree.WorkerShell.exec(System.Int32,Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Windows.Point)">
            <summary>
            Hier wird der (normalerweise externe) Arbeitsprozess ausgeführt.
            In den TreeParameters oder SlaveParameters (beim Konstruktor übergeben)
            enthaltene Pipes ('|') werden beim Aufruf des Workers als Leerzeichen zwischen
            mehreren Kommandozeilenparametern interpretiert.
            </summary>
            <param name="treeParameters">Für den gesamten Tree gültige Parameter oder null.</param>
            <param name="nodeId">Id des Knotens, der diesen Worker besitzt.</param>
            <param name="eventParameters">Klasse mit Informationen zum auslösenden Ereignis.</param>
            <param name="callCounter">Aufrufzähler (1-n). Bei 0 wird der Worker resettet (Fehler behoben).</param>
            <param name="position">Absolute Bildschirmposition des Parent-Controls.</param>
        </member>
    </members>
</doc>
