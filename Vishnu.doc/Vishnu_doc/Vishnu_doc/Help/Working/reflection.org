<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="NetEti.CustomProgressBar">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+b268983ad2aa6fe7c688c3fe52848bea8f5bfb7c</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.ExpressionParser">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+20609015c2da6e03a80f381a46b367814c82f34b</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="VishnuHelpBrowser">
      <assemblydata version="8.1.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+0794241e736afaae6e257279e23d462fa1679121</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="ConstantNodeUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="JobConnectorUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="JobListUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NodeListUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="SingleNodeUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="SnapshotUserControl">
      <assemblydata version="8.1.6.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.6.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="LogicalTaskTree">
      <assemblydata version="8.2.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.2.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Vishnu.Interchange">
      <assemblydata version="8.2.0.3" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.2.0.3</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Vishnu.ViewModel">
      <assemblydata version="8.2.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.2.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Vishnu.WPF_UI">
      <assemblydata version="8.3.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.3.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.ZoomBox">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+5ee800418dee8f46c939f296c9beaab353004ca7</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.AppEnvReader">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+611fa1239a6e379986324d5a4023cd737a7da7a6</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.BasicAppSettings">
      <assemblydata version="8.0.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+47f2d73d44cbabd9edbd44700dbe27e722340f78</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.CommandLineAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+ffa4c84dbc9f6e53c5611269ea829d047bd2c390</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.EnvAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+878e28844b0821f624df030dddb4364a06da759c</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.Global">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+9e45bc96a63c7bb901730bcd263b98db5a48e949</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.InfoController">
      <assemblydata version="8.0.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+acaf81dbf65483efca2a792d55c719cf92119339</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.Logging">
      <assemblydata version="8.0.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+acaf81dbf65483efca2a792d55c719cf92119339</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.IniAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+ecdde68508fe23170dc58bd8ad342f147fdd237d</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.MultiScreen">
      <assemblydata version="8.1.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.1.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+b1cd51f16e3bd2b83e9a562eed3c9519e4865e91</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.MVVMini">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+faf3aa8dcc38bbe36a3c92b1a9f73c75fc662c99</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.ObjectSerializer">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+e2f5e8f28ca5d2718d55e6ce4abc69184365aeb8</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.ProcessTools">
      <assemblydata version="8.0.1.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.1.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+6e6ab0c4fed8e24cd32ff9136ecb6b264898a6a9</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.PropertyAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+76bed0404d0a428ed57d2467e45ce4f661c89ee4</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.QuickEdit">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+42299a9d52f2b850d2458fa836ea72e52cd204a6</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.RegAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+b7b0b4599157eed383a75edf7fe3d7038524e897</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.SettingsAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+db59020278b6ac7296ebb0928c7c1501e867b8e9</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.TaskWorker">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+e8534b1231f9ae398f992d2b9faf36b8f61bc7ed</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.XMLAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+d7f882d93b3335cea0a0e233ace999065f285bd2</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="NetEti.ZipAccess">
      <assemblydata version="8.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0+2996eef2bd6ad690f9f33134f6dd182957ec1b3e</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:LogicalTaskTree">
      <apidata name="LogicalTaskTree" group="namespace" />
      <elements>
        <element api="T:LogicalTaskTree.CheckerShell" />
        <element api="T:LogicalTaskTree.ConfigurationManager" />
        <element api="T:LogicalTaskTree.IJobProvider" />
        <element api="T:LogicalTaskTree.UndefinedJob" />
        <element api="T:LogicalTaskTree.Job" />
        <element api="T:LogicalTaskTree.Workers" />
        <element api="T:LogicalTaskTree.JobConnector" />
        <element api="T:LogicalTaskTree.UndefinedJobListClass" />
        <element api="T:LogicalTaskTree.JobList" />
        <element api="T:LogicalTaskTree.JobPackage" />
        <element api="T:LogicalTaskTree.JobProviderBase" />
        <element api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" />
        <element api="T:LogicalTaskTree.LoggerShell" />
        <element api="T:LogicalTaskTree.AllStatesChangedEventHandler" />
        <element api="T:LogicalTaskTree.LogicalChangedEventHandler" />
        <element api="T:LogicalTaskTree.LastNotNullLogicalChangedEventHandler" />
        <element api="T:LogicalTaskTree.StateChangedEventHandler" />
        <element api="T:LogicalTaskTree.LogicalStateChangedEventHandler" />
        <element api="T:LogicalTaskTree.ResultChangedEventHandler" />
        <element api="T:LogicalTaskTree.ExceptionRaisedEventHandler" />
        <element api="T:LogicalTaskTree.NodeChangedEventHandler" />
        <element api="T:LogicalTaskTree.UndefinedLogicalNodeClass" />
        <element api="T:LogicalTaskTree.LogicalNode" />
        <element api="T:LogicalTaskTree.LogicalTaskTree" />
        <element api="T:LogicalTaskTree.NodeCheckerBase" />
        <element api="T:LogicalTaskTree.NodeConnector" />
        <element api="T:LogicalTaskTree.NodeList" />
        <element api="T:LogicalTaskTree.NodeParent" />
        <element api="T:LogicalTaskTree.NodeResultComparer" />
        <element api="T:LogicalTaskTree.NodeShellBase" />
        <element api="T:LogicalTaskTree.SingleNode" />
        <element api="T:LogicalTaskTree.SnapshotRefreshedEventHandler" />
        <element api="T:LogicalTaskTree.Snapshot" />
        <element api="T:LogicalTaskTree.TreeEventTrigger" />
        <element api="T:LogicalTaskTree.TriggerShell" />
        <element api="T:LogicalTaskTree.ValueModifier`1" />
        <element api="T:LogicalTaskTree.WorkerShell" />
        <element api="T:LogicalTaskTree.ThreadLocker" />
      </elements>
    </api>
    <api id="T:LogicalTaskTree.AllStatesChangedEventHandler">
      <apidata name="AllStatesChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.CheckerShell">
      <apidata name="CheckerShell" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.CheckerShell.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.CheckerShell.Dispose" />
        <element api="M:LogicalTaskTree.CheckerShell.Dispose(System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.Finalize" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,LogicalTaskTree.LoggerShell,System.Boolean)" />
        <element api="M:LogicalTaskTree.CheckerShell.ModifyValue(System.Object)" />
        <element api="P:LogicalTaskTree.CheckerShell.UserControlPath" />
        <element api="P:LogicalTaskTree.CheckerShell.SlavePathName" />
        <element api="P:LogicalTaskTree.CheckerShell.CheckerParameters" />
        <element api="P:LogicalTaskTree.CheckerShell.OriginalCheckerParameters" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.GetCheckerReference" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SetChecker(LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.ReturnObject" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.InitNodes" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsInvalid" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.CheckerTrigger" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.CheckerLogger" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.LastReturned" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsGlobal" />
        <element api="E:LogicalTaskTree.NodeCheckerBase.NodeProgressChanged" />
        <element api="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDllPath" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDll" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerLogger">
          <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.LoggerShell,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerLogger">
          <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerTrigger">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,LogicalTaskTree.TriggerShell,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerTrigger">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="checkerLogger">
          <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.LoggerShell,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="checkerLogger">
          <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
        <parameter name="alwaysReloadChecker">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="checkerTrigger">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,LogicalTaskTree.LoggerShell,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="checkerTrigger">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
        <parameter name="checkerLogger">
          <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,LogicalTaskTree.TriggerShell,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="checkerTrigger">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.#ctor(System.String,System.Object,System.Object,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="originalCheckerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="alwaysReload">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.CheckerShell.CheckerParameters">
      <apidata name="CheckerParameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckerParameters" />
      <setter name="set_CheckerParameters" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.ModifyValue(System.Object)">
      <apidata name="ModifyValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeCheckerBase.ModifyValue(System.Object)">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="toConvert">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IValueModifier.ModifyValue(System.Object)">
          <type api="T:Vishnu.Interchange.IValueModifier" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.CheckerShell.OriginalCheckerParameters">
      <apidata name="OriginalCheckerParameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OriginalCheckerParameters" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.CheckerShell.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeCheckerBase.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeChecker.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.CheckerShell.SlavePathName">
      <apidata name="SlavePathName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SlavePathName" />
      <setter name="set_SlavePathName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.CheckerShell.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeCheckerBase.UserControlPath">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.ConfigurationManager">
      <apidata name="ConfigurationManager" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.ConfigurationManager.SaveLocalConfiguration(Vishnu.Interchange.IExpandableNode,Vishnu.Interchange.TreeOrientation,Vishnu.Interchange.WindowAspects)" />
        <element api="M:LogicalTaskTree.ConfigurationManager.LoadLocalConfiguration(System.String)" />
        <element api="M:LogicalTaskTree.ConfigurationManager.IsExpanded(System.String)" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ConfigurationManager.IsExpanded(System.String)">
      <apidata name="IsExpanded" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="nodePath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ConfigurationManager.LoadLocalConfiguration(System.String)">
      <apidata name="LoadLocalConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="jobName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ConfigurationManager.SaveLocalConfiguration(Vishnu.Interchange.IExpandableNode,Vishnu.Interchange.TreeOrientation,Vishnu.Interchange.WindowAspects)">
      <apidata name="SaveLocalConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tree">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </parameter>
        <parameter name="treeOrientationState">
          <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
        </parameter>
        <parameter name="windowAspects">
          <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.ExceptionRaisedEventHandler">
      <apidata name="ExceptionRaisedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="exeption">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.IJobProvider">
      <apidata name="IJobProvider" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        <type api="T:LogicalTaskTree.Provider.EmptyJobProvider" ref="true" />
      </implementors>
      <elements>
        <element api="M:LogicalTaskTree.IJobProvider.GetJob(System.String@)" />
        <element api="M:LogicalTaskTree.IJobProvider.GetLogicalJobName(System.String)" />
        <element api="M:LogicalTaskTree.IJobProvider.GetPhysicalJobPath(System.String)" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.IJobProvider.GetJob(System.String@)">
      <apidata name="GetJob" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="name">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.IJobProvider.GetLogicalJobName(System.String)">
      <apidata name="GetLogicalJobName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.IJobProvider.GetPhysicalJobPath(System.String)">
      <apidata name="GetPhysicalJobPath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.Job">
      <apidata name="Job" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.Job.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.UndefinedJob" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.Job.undefinedJob" />
        <element api="M:LogicalTaskTree.Job.#ctor" />
        <element api="P:LogicalTaskTree.Job.LogicalExpression" />
        <element api="P:LogicalTaskTree.Job.Checkers" />
        <element api="P:LogicalTaskTree.Job.Triggers" />
        <element api="P:LogicalTaskTree.Job.Loggers" />
        <element api="P:LogicalTaskTree.Job.SnapshotNames" />
        <element api="P:LogicalTaskTree.Job.JobSnapshotTrigger" />
        <element api="P:LogicalTaskTree.Job.JobTrigger" />
        <element api="P:LogicalTaskTree.Job.JobLogger" />
        <element api="P:LogicalTaskTree.Job.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.Job.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.Job.NodeListUserControlPath" />
        <element api="P:LogicalTaskTree.Job.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.Job.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.Job.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.Job.BreakWithResult" />
        <element api="P:LogicalTaskTree.Job.ThreadLocked" />
        <element api="P:LogicalTaskTree.Job.LockName" />
        <element api="P:LogicalTaskTree.Job.IsVolatile" />
        <element api="P:LogicalTaskTree.Job.StartCollapsed" />
        <element api="P:LogicalTaskTree.Job.IsGlobal" />
        <element api="P:LogicalTaskTree.Job.InitNodes" />
        <element api="P:LogicalTaskTree.Job.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.Job.MaxSubJobDepth" />
        <element api="P:LogicalTaskTree.Job.LogicalChangedDelay" />
        <element api="P:LogicalTaskTree.Job.IsDefaultSnapshot" />
        <element api="P:LogicalTaskTree.Job.WasDefaultSnapshot" />
        <element api="P:LogicalTaskTree.Job.EventTriggers" />
        <element api="P:LogicalTaskTree.Job.Workers" />
        <element api="P:LogicalTaskTree.Job.WorkersDictionary" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Job.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.BreakWithResult">
      <apidata name="BreakWithResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BreakWithResult" />
      <setter name="set_BreakWithResult" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.Checkers">
      <apidata name="Checkers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Checkers" />
      <setter name="set_Checkers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.ConstantNodeUserControlPath">
      <apidata name="ConstantNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConstantNodeUserControlPath" />
      <setter name="set_ConstantNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.EventTriggers">
      <apidata name="EventTriggers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EventTriggers" />
      <setter name="set_EventTriggers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.InitNodes">
      <apidata name="InitNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InitNodes" />
      <setter name="set_InitNodes" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.IsDefaultSnapshot">
      <apidata name="IsDefaultSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDefaultSnapshot" />
      <setter name="set_IsDefaultSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.IsGlobal">
      <apidata name="IsGlobal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsGlobal" />
      <setter name="set_IsGlobal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.IsVolatile">
      <apidata name="IsVolatile" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsVolatile" />
      <setter name="set_IsVolatile" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.JobConnectorUserControlPath">
      <apidata name="JobConnectorUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobConnectorUserControlPath" />
      <setter name="set_JobConnectorUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.JobListUserControlPath">
      <apidata name="JobListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobListUserControlPath" />
      <setter name="set_JobListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.JobLogger">
      <apidata name="JobLogger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobLogger" />
      <setter name="set_JobLogger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.JobSnapshotTrigger">
      <apidata name="JobSnapshotTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobSnapshotTrigger" />
      <setter name="set_JobSnapshotTrigger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.JobTrigger">
      <apidata name="JobTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobTrigger" />
      <setter name="set_JobTrigger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.LockName">
      <apidata name="LockName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LockName" />
      <setter name="set_LockName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.Loggers">
      <apidata name="Loggers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Loggers" />
      <setter name="set_Loggers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.LogicalChangedDelay">
      <apidata name="LogicalChangedDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalChangedDelay" />
      <setter name="set_LogicalChangedDelay" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.LogicalExpression">
      <apidata name="LogicalExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalExpression" />
      <setter name="set_LogicalExpression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.MaxSubJobDepth">
      <apidata name="MaxSubJobDepth" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxSubJobDepth" />
      <setter name="set_MaxSubJobDepth" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.NodeListUserControlPath">
      <apidata name="NodeListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeListUserControlPath" />
      <setter name="set_NodeListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.SingleNodeUserControlPath">
      <apidata name="SingleNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SingleNodeUserControlPath" />
      <setter name="set_SingleNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.SnapshotNames">
      <apidata name="SnapshotNames" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotNames" />
      <setter name="set_SnapshotNames" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.SnapshotUserControlPath">
      <apidata name="SnapshotUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotUserControlPath" />
      <setter name="set_SnapshotUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.StartCollapsed">
      <apidata name="StartCollapsed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartCollapsed" />
      <setter name="set_StartCollapsed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.ThreadLocked">
      <apidata name="ThreadLocked" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ThreadLocked" />
      <setter name="set_ThreadLocked" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.TriggeredRunDelay">
      <apidata name="TriggeredRunDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TriggeredRunDelay" />
      <setter name="set_TriggeredRunDelay" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.Triggers">
      <apidata name="Triggers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Triggers" />
      <setter name="set_Triggers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.Job.undefinedJob">
      <apidata name="undefinedJob" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.UndefinedJob" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.WasDefaultSnapshot">
      <apidata name="WasDefaultSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WasDefaultSnapshot" />
      <setter name="set_WasDefaultSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.Workers">
      <apidata name="Workers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Workers" />
      <returns>
        <type api="T:LogicalTaskTree.Workers" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Job.WorkersDictionary">
      <apidata name="WorkersDictionary" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WorkersDictionary" />
      <setter name="set_WorkersDictionary" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <arrayOf rank="1">
                  <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
                </arrayOf>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.JobConnector">
      <apidata name="JobConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.JobConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.JobConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)" />
        <element api="P:LogicalTaskTree.JobConnector.UserControlPath" />
        <element api="P:LogicalTaskTree.JobConnector.LogicalExpression" />
        <element api="P:LogicalTaskTree.JobConnector.LastResult" />
        <element api="P:LogicalTaskTree.JobConnector.Logical" />
        <element api="P:LogicalTaskTree.JobConnector.State" />
        <element api="P:LogicalTaskTree.JobConnector.LogicalState" />
        <element api="P:LogicalTaskTree.JobConnector.LastRun" />
        <element api="P:LogicalTaskTree.JobConnector.NextRun" />
        <element api="P:LogicalTaskTree.JobConnector.NextRunInfo" />
        <element api="P:LogicalTaskTree.JobConnector.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.JobConnector.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.JobConnector.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.JobConnector.SingleNodes" />
        <element api="P:LogicalTaskTree.JobConnector.SingleNodesFinished" />
        <element api="F:LogicalTaskTree.NodeConnector._node" />
        <element api="F:LogicalTaskTree.NodeConnector._lastResult" />
        <element api="F:LogicalTaskTree.NodeConnector._userControlPath" />
        <element api="M:LogicalTaskTree.NodeConnector.InitReferencedNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeConnector.UserRun" />
        <element api="M:LogicalTaskTree.NodeConnector.UserBreak" />
        <element api="M:LogicalTaskTree.NodeConnector.Reload" />
        <element api="M:LogicalTaskTree.NodeConnector.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeConnector.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeConnector.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.NodeConnector.ToString" />
        <element api="M:LogicalTaskTree.NodeConnector.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.NodeConnector.GetHashCode" />
        <element api="M:LogicalTaskTree.NodeConnector.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeConnector.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeConnector.Checker" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJoblist">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="node">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="valueModifier">
          <type nullable="true" api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.LastResult">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.LastRun">
      <apidata name="LastRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.LastRun">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastRun" />
      <setter name="set_LastRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.Logical">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.LogicalExpression">
      <apidata name="LogicalExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalExpression" />
      <setter name="set_LogicalExpression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.LogicalState">
      <apidata name="LogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.LogicalState">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LogicalState" />
      <setter name="set_LogicalState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.NextRun">
      <apidata name="NextRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.NextRun">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_NextRun" />
      <setter name="set_NextRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.NextRunInfo">
      <apidata name="NextRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.NextRunInfo">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_NextRunInfo" />
      <setter name="set_NextRunInfo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.ReferencedNodeId">
      <apidata name="ReferencedNodeId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.ReferencedNodeId">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodeId" />
      <setter name="set_ReferencedNodeId" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.ReferencedNodeName">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodeName" />
      <setter name="set_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.ReferencedNodePath">
      <apidata name="ReferencedNodePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.ReferencedNodePath">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodePath" />
      <setter name="set_ReferencedNodePath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.SingleNodes">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.SingleNodesFinished">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.State">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobConnector.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeConnector.UserControlPath">
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobConnector" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.JobList">
      <apidata name="JobList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.UndefinedJobListClass" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.JobList.UnsatisfiedNodeConnectors" />
        <element api="F:LogicalTaskTree.JobList.TriggerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.WorkerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.LoggerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.JobsByName" />
        <element api="F:LogicalTaskTree.JobList.NodesByName" />
        <element api="F:LogicalTaskTree.JobList.TreeRootLastChanceNodesByName" />
        <element api="F:LogicalTaskTree.JobList.NodesById" />
        <element api="M:LogicalTaskTree.JobList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.JobList.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)" />
        <element api="M:LogicalTaskTree.JobList.RunTreeExternals" />
        <element api="M:LogicalTaskTree.JobList.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.JobList.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.JobList.BreakTreeExternals(System.Boolean)" />
        <element api="M:LogicalTaskTree.JobList.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.JobList.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.JobList.PublishAllTreeInfos" />
        <element api="M:LogicalTaskTree.JobList.GetAllTreeInfos" />
        <element api="M:LogicalTaskTree.JobList.Show(System.String)" />
        <element api="M:LogicalTaskTree.JobList.ShowSyntaxTree" />
        <element api="M:LogicalTaskTree.JobList.ShowFlatSyntaxTree" />
        <element api="M:LogicalTaskTree.JobList.ToString" />
        <element api="M:LogicalTaskTree.JobList.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.JobList.GetHashCode" />
        <element api="M:LogicalTaskTree.JobList.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.JobList.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.JobList.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.JobList.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="P:LogicalTaskTree.JobList.LogicalExpression" />
        <element api="P:LogicalTaskTree.JobList.SnapshotTrigger" />
        <element api="P:LogicalTaskTree.JobList.IsConrolled" />
        <element api="P:LogicalTaskTree.JobList.UserControlPath" />
        <element api="P:LogicalTaskTree.JobList.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.NodeListUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.MaxSubJobDepth" />
        <element api="P:LogicalTaskTree.JobList.LogicalChangedDelay" />
        <element api="P:LogicalTaskTree.JobList.Job" />
        <element api="P:LogicalTaskTree.JobList.AllCheckersForUnreferencingNodeConnectors" />
        <element api="P:LogicalTaskTree.JobList.TreeExternalCheckers" />
        <element api="P:LogicalTaskTree.JobList.TreeExternalSingleNodes" />
        <element api="F:LogicalTaskTree.NodeList.ListNodeState" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalState" />
        <element api="F:LogicalTaskTree.NodeList.LastCountResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastSingleNodesLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalStateLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogical" />
        <element api="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeList.Refresh" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeList.Logical" />
        <element api="P:LogicalTaskTree.NodeList.State" />
        <element api="P:LogicalTaskTree.NodeList.LogicalState" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.NodeList.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.nOperands" />
        <element api="P:LogicalTaskTree.NodeList.nPlus" />
        <element api="P:LogicalTaskTree.NodeList.nMinus" />
        <element api="P:LogicalTaskTree.NodeList.IsVolatile" />
        <element api="P:LogicalTaskTree.NodeList.LastResult" />
        <element api="P:LogicalTaskTree.NodeList.LastSingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.CountResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountResults" />
        <element api="P:LogicalTaskTree.NodeList.CountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.CountTerminatedElements" />
        <element api="P:LogicalTaskTree.NodeList.LastCountTerminatedElements" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="jobProvider">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.AllCheckersForUnreferencingNodeConnectors">
      <apidata name="AllCheckersForUnreferencingNodeConnectors" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AllCheckersForUnreferencingNodeConnectors" />
      <setter name="set_AllCheckersForUnreferencingNodeConnectors" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.Break(System.Boolean)">
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeList.Break(System.Boolean)">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="userBreak">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.BreakTreeExternals(System.Boolean)">
      <apidata name="BreakTreeExternals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userBreak">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.ConstantNodeUserControlPath">
      <apidata name="ConstantNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.ConstantNodeUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ConstantNodeUserControlPath" />
      <setter name="set_ConstantNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeList.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.FindEventTriggers(System.String,System.String,System.String)">
      <apidata name="FindEventTriggers" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="eventName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="senderId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.FindNodeById(System.String)">
      <apidata name="FindNodeById" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="nodeId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.GetAllTreeInfos">
      <apidata name="GetAllTreeInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.GetHashCode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.GetTopRootJobList">
      <apidata name="GetTopRootJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.IsConrolled">
      <apidata name="IsConrolled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsConrolled" />
      <setter name="set_IsConrolled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.Job">
      <apidata name="Job" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Job" />
      <setter name="set_Job" />
      <returns>
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.JobConnectorUserControlPath">
      <apidata name="JobConnectorUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.JobConnectorUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_JobConnectorUserControlPath" />
      <setter name="set_JobConnectorUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.JobsByName">
      <apidata name="JobsByName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.LoggerRelevantEventCache">
      <apidata name="LoggerRelevantEventCache" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.LogicalChangedDelay">
      <apidata name="LogicalChangedDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LogicalChangedDelay" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.LogicalExpression">
      <apidata name="LogicalExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalExpression" />
      <setter name="set_LogicalExpression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.MaxSubJobDepth">
      <apidata name="MaxSubJobDepth" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MaxSubJobDepth" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.NodeListUserControlPath">
      <apidata name="NodeListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeListUserControlPath" />
      <setter name="set_NodeListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.NodesById">
      <apidata name="NodesById" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.NodesByName">
      <apidata name="NodesByName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.PublishAllTreeInfos">
      <apidata name="PublishAllTreeInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.RegisterTriggeredNodes">
      <apidata name="RegisterTriggeredNodes" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)">
      <apidata name="ResetPartTreeNodes" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="branch">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.Run(Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.RunTreeExternals">
      <apidata name="RunTreeExternals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.Show(System.String)">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="indent">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.ShowFlatSyntaxTree">
      <apidata name="ShowFlatSyntaxTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.ShowSyntaxTree">
      <apidata name="ShowSyntaxTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.SingleNodeUserControlPath">
      <apidata name="SingleNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.SingleNodeUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_SingleNodeUserControlPath" />
      <setter name="set_SingleNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.SnapshotTrigger">
      <apidata name="SnapshotTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotTrigger" />
      <setter name="set_SnapshotTrigger" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.SnapshotUserControlPath">
      <apidata name="SnapshotUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.SnapshotUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotUserControlPath" />
      <setter name="set_SnapshotUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobList.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.ToString">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.TreeExternalCheckers">
      <apidata name="TreeExternalCheckers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeExternalCheckers" />
      <setter name="set_TreeExternalCheckers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.TreeExternalSingleNodes">
      <apidata name="TreeExternalSingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeExternalSingleNodes" />
      <setter name="set_TreeExternalSingleNodes" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:LogicalTaskTree.SingleNode" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.TreeRootLastChanceNodesByName">
      <apidata name="TreeRootLastChanceNodesByName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.TriggerRelevantEventCache">
      <apidata name="TriggerRelevantEventCache" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.UnsatisfiedNodeConnectors">
      <apidata name="UnsatisfiedNodeConnectors" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobList.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.UserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobList.WorkerRelevantEventCache">
      <apidata name="WorkerRelevantEventCache" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.JobPackage">
      <apidata name="JobPackage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.JobPackage.SubJobPackages" />
        <element api="M:LogicalTaskTree.JobPackage.#ctor(System.String)" />
        <element api="M:LogicalTaskTree.JobPackage.#ctor(System.String,System.String)" />
        <element api="P:LogicalTaskTree.JobPackage.JobFilePath" />
        <element api="P:LogicalTaskTree.JobPackage.JobName" />
        <element api="P:LogicalTaskTree.JobPackage.Job" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobPackage.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="jobFilePath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobPackage.#ctor(System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="jobFilePath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="jobName">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobPackage.Job">
      <apidata name="Job" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Job" />
      <setter name="set_Job" />
      <returns>
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobPackage.JobFilePath">
      <apidata name="JobFilePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobFilePath" />
      <setter name="set_JobFilePath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.JobPackage.JobName">
      <apidata name="JobName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobName" />
      <setter name="set_JobName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobPackage.SubJobPackages">
      <apidata name="SubJobPackages" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.JobPackage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobPackage" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.JobProviderBase">
      <apidata name="JobProviderBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" defaultConstructor="M:LogicalTaskTree.JobProviderBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
            <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
          </type>
          <type api="T:LogicalTaskTree.Provider.ProductionJobProvider" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.JobProviderBase.LoadedJobPackages" />
        <element api="F:LogicalTaskTree.JobProviderBase._appSettings" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetJob(System.String@)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetLogicalJobName(System.String)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetPhysicalJobPath(System.String)" />
        <element api="M:LogicalTaskTree.JobProviderBase.#ctor" />
        <element api="M:LogicalTaskTree.JobProviderBase.TryLoadJobPackage(System.String@)" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobProviderBase._appSettings">
      <apidata name="_appSettings" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.GetJob(System.String@)">
      <apidata name="GetJob" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetJob(System.String@)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.GetLogicalJobName(System.String)">
      <apidata name="GetLogicalJobName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetLogicalJobName(System.String)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.GetPhysicalJobPath(System.String)">
      <apidata name="GetPhysicalJobPath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetPhysicalJobPath(System.String)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobProviderBase.LoadedJobPackages">
      <apidata name="LoadedJobPackages" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:LogicalTaskTree.JobPackage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.TryLoadJobPackage(System.String@)">
      <apidata name="TryLoadJobPackage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="logicalJobName">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider">
      <apidata name="UndefinedJobProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IUndefinedElement" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.undefinedJobProvider" />
        <element api="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.TryLoadJobPackage(System.String@)" />
        <element api="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.#ctor" />
        <element api="F:LogicalTaskTree.JobProviderBase.LoadedJobPackages" />
        <element api="F:LogicalTaskTree.JobProviderBase._appSettings" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetJob(System.String@)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetLogicalJobName(System.String)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetPhysicalJobPath(System.String)" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.TryLoadJobPackage(System.String@)">
      <apidata name="TryLoadJobPackage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.JobProviderBase.TryLoadJobPackage(System.String@)">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="logicalJobName">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:LogicalTaskTree.JobProviderBase.UndefinedJobProvider.undefinedJobProvider">
      <apidata name="undefinedJobProvider" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LastNotNullLogicalChangedEventHandler">
      <apidata name="LastNotNullLogicalChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LoggerShell">
      <apidata name="LoggerShell" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeLogger" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.LoggerShell.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)" />
        <element api="M:LogicalTaskTree.LoggerShell.Dispose" />
        <element api="M:LogicalTaskTree.LoggerShell.Dispose(System.Boolean)" />
        <element api="M:LogicalTaskTree.LoggerShell.Finalize" />
        <element api="M:LogicalTaskTree.LoggerShell.GetLogEvents" />
        <element api="M:LogicalTaskTree.LoggerShell.#ctor(System.String,System.String)" />
        <element api="M:LogicalTaskTree.LoggerShell.#ctor(System.String)" />
        <element api="M:LogicalTaskTree.LoggerShell.GetLoggerReference" />
        <element api="M:LogicalTaskTree.LoggerShell.SetSlaveLoggerShell(LogicalTaskTree.LoggerShell)" />
        <element api="P:LogicalTaskTree.LoggerShell.LogEvents" />
        <element api="P:LogicalTaskTree.LoggerShell.LoggerParameters" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="loggerShellReference">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.#ctor(System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="loggerParameters">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.GetLogEvents">
      <apidata name="GetLogEvents" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.GetLoggerReference">
      <apidata name="GetLoggerReference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)">
      <apidata name="Log" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="loggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type nullable="true" api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="treeEvent">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
        <parameter name="additionalEventArgs">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.Interchange.INodeLogger.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)">
          <type api="T:Vishnu.Interchange.INodeLogger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LoggerShell.LogEvents">
      <apidata name="LogEvents" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" get-visibility="family" set="true" />
      <getter name="get_LogEvents" />
      <setter name="set_LogEvents" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LoggerShell.LoggerParameters">
      <apidata name="LoggerParameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LoggerParameters" />
      <setter name="set_LoggerParameters" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LoggerShell.SetSlaveLoggerShell(LogicalTaskTree.LoggerShell)">
      <apidata name="SetSlaveLoggerShell" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="loggerShell">
          <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LogicalChangedEventHandler">
      <apidata name="LogicalChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LogicalNode">
      <apidata name="LogicalNode" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.SingleNode" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        <type api="T:NetEti.MVVMini.INotifyPropertiesChanged" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.LogicalNode.IsTreePaused" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTreeFlushing" />
        <element api="F:LogicalTaskTree.LogicalNode.IsSnapshotProhibited" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.ProhibitSnapshots" />
        <element api="M:LogicalTaskTree.LogicalNode.AllowSnapshots" />
        <element api="M:LogicalTaskTree.LogicalNode.PauseTree" />
        <element api="M:LogicalTaskTree.LogicalNode.ResumeTree" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.LogicalNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ToString" />
        <element api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetHashCode" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SleepIfNecessary" />
        <element api="M:LogicalTaskTree.LogicalNode.LogWithDistinctTime(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastResult" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Logical" />
        <element api="P:LogicalTaskTree.LogicalNode.LogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SingleNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.State" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.UserControlPath" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.AllNodesStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type nullable="true" api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode._lastRun">
      <apidata name="_lastRun" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode._nextRunInfo">
      <apidata name="_nextRunInfo" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode._parentViewLocker">
      <apidata name="_parentViewLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.AllNodesStateChanged">
      <apidata name="AllNodesStateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AllNodesStateChanged" />
      <remover name="remove_AllNodesStateChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.AllStatesChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.AllowSnapshots">
      <apidata name="AllowSnapshots" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.AppSettings">
      <apidata name="AppSettings" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)">
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="userBreak">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.BreakWithResult">
      <apidata name="BreakWithResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BreakWithResult" />
      <setter name="set_BreakWithResult" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.CancellationToken">
      <apidata name="CancellationToken" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Threading.CancellationToken" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)">
      <apidata name="CanControlledTreeStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="calledFromRoot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="collectedEnvironment">
          <type api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.CanTreeStart">
      <apidata name="CanTreeStart" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CanTreeStart" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.DebugMode">
      <apidata name="DebugMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugMode" />
      <setter name="set_DebugMode" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.ExceptionCleared">
      <apidata name="ExceptionCleared" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ExceptionCleared" />
      <remover name="remove_ExceptionCleared" />
      <eventhandler>
        <type api="T:LogicalTaskTree.NodeChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.ExceptionLocker">
      <apidata name="ExceptionLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.ExceptionRaised">
      <apidata name="ExceptionRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ExceptionRaised" />
      <remover name="remove_ExceptionRaised" />
      <eventhandler>
        <type api="T:LogicalTaskTree.ExceptionRaisedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)">
      <apidata name="FindEventTriggers" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="eventName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="senderId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)">
      <apidata name="FindNodeById" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="nodeId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.GetEnvironment">
      <apidata name="GetEnvironment" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered">
      <apidata name="GetlastEventSourceIfIsTreeEventTriggered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.GetResults">
      <apidata name="GetResults" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.GetTopRootJobList">
      <apidata name="GetTopRootJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Id">
      <apidata name="Id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Id" />
      <setter name="set_Id" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IdInfo">
      <apidata name="IdInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IdInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuNode.IdInfo">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IdPath">
      <apidata name="IdPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IdPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)">
      <apidata name="InitFromNode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)">
      <apidata name="InitNode" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="depth">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="node">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.InitNodes">
      <apidata name="InitNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InitNodes" />
      <setter name="set_InitNodes" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Invalidate">
      <apidata name="Invalidate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IsActive">
      <apidata name="IsActive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsActive" />
      <setter name="set_IsActive" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IsGlobal">
      <apidata name="IsGlobal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsGlobal" />
      <setter name="set_IsGlobal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IsInSleepTime">
      <apidata name="IsInSleepTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInSleepTime" />
      <setter name="set_IsInSleepTime" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IsInSnapshot">
      <apidata name="IsInSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInSnapshot" />
      <setter name="set_IsInSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.IsRunRequired">
      <apidata name="IsRunRequired" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy">
      <apidata name="IsSnapshotDummy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsSnapshotDummy" />
      <setter name="set_IsSnapshotDummy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.IsSnapshotProhibited">
      <apidata name="IsSnapshotProhibited" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled">
      <apidata name="IsTaskActiveOrScheduled" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.IsTreeFlushing">
      <apidata name="IsTreeFlushing" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.IsTreePaused">
      <apidata name="IsTreePaused" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.LastExceptions">
      <apidata name="LastExceptions" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Concurrent.ConcurrentDictionary`2" ref="true">
          <specialization>
            <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            <type api="T:System.Exception" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent">
      <apidata name="LastExecutingTreeEvent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_LastExecutingTreeEvent" />
      <setter name="set_LastExecutingTreeEvent" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastLogical">
      <apidata name="LastLogical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastLogical" />
      <setter name="set_LastLogical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.LastLogicalLocker">
      <apidata name="LastLogicalLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastLogicalState">
      <apidata name="LastLogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastLogicalState" />
      <setter name="set_LastLogicalState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker">
      <apidata name="LastLogicalStateLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastNotNullLogical">
      <apidata name="LastNotNullLogical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastNotNullLogical" />
      <setter name="set_LastNotNullLogical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastRun">
      <apidata name="LastRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_LastRun" />
      <setter name="set_LastRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LastState">
      <apidata name="LastState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastState" />
      <setter name="set_LastState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.LastStateLocker">
      <apidata name="LastStateLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Level">
      <apidata name="Level" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Level" />
      <setter name="set_Level" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LevelInfo">
      <apidata name="LevelInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_LevelInfo" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuNode.LevelInfo">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LockName">
      <apidata name="LockName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LockName" />
      <setter name="set_LockName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Logger">
      <apidata name="Logger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Logger" />
      <setter name="set_Logger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.LogicalState">
      <apidata name="LogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalState" />
      <setter name="set_LogicalState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.LogWithDistinctTime(System.String)">
      <apidata name="LogWithDistinctTime" group="member" subgroup="method" />
      <memberdata visibility="family" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)">
      <apidata name="MarkThreadAsInvalidIfActive" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="thread">
          <type nullable="true" api="T:System.Threading.Thread" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.NameId">
      <apidata name="NameId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NameId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.NameInfo">
      <apidata name="NameInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_NameInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuNode.NameInfo">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.NextRun">
      <apidata name="NextRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_NextRun" />
      <setter name="set_NextRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.NextRunInfo">
      <apidata name="NextRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_NextRunInfo" />
      <setter name="set_NextRunInfo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged">
      <apidata name="NodeLastNotNullLogicalChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeLastNotNullLogicalChanged" />
      <remover name="remove_NodeLastNotNullLogicalChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.LastNotNullLogicalChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged">
      <apidata name="NodeLogicalChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeLogicalChanged" />
      <remover name="remove_NodeLogicalChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.LogicalChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeProgressChanged">
      <apidata name="NodeProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeProgressChanged" />
      <remover name="remove_NodeProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeProgressFinished">
      <apidata name="NodeProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeProgressFinished" />
      <remover name="remove_NodeProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeProgressStarted">
      <apidata name="NodeProgressStarted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeProgressStarted" />
      <remover name="remove_NodeProgressStarted" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeResultChanged">
      <apidata name="NodeResultChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeResultChanged" />
      <remover name="remove_NodeResultChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.ResultChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeStateChanged">
      <apidata name="NodeStateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeStateChanged" />
      <remover name="remove_NodeStateChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.StateChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.NodeType">
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged">
      <apidata name="NodeWorkersStateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeWorkersStateChanged" />
      <remover name="remove_NodeWorkersStateChanged" />
      <eventhandler>
        <type api="T:LogicalTaskTree.NodeChangedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="OnLastNotNullLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnNodeBreaked">
      <apidata name="OnNodeBreaked" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)">
      <apidata name="OnNodeProgressChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="itemsName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="countAll">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countSucceeded">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)">
      <apidata name="OnNodeProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="itemsName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="countAll">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countSucceeded">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="OnNodeProgressStarted" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged">
      <apidata name="OnNodeWorkersStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.ParentView">
      <apidata name="ParentView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ParentView" />
      <setter name="set_ParentView" />
      <returns>
        <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Path">
      <apidata name="Path" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Path" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.PathInfo">
      <apidata name="PathInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_PathInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuNode.PathInfo">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.PauseTree">
      <apidata name="PauseTree" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)">
      <apidata name="ProcessTreeEvent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="eventName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="addInfo">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ProhibitSnapshots">
      <apidata name="ProhibitSnapshots" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.LogicalNode.PropertiesChanged">
      <apidata name="PropertiesChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertiesChanged" />
      <remover name="remove_PropertiesChanged" />
      <eventhandler>
        <type api="T:NetEti.MVVMini.PropertiesChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:NetEti.MVVMini.INotifyPropertiesChanged.PropertiesChanged">
          <type api="T:NetEti.MVVMini.INotifyPropertiesChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="RaiseNodeLastNotNullLogicalChangedWithTreeEvent" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lastNotNullLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="RaiseNodeLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.ReferencedNodeId">
      <apidata name="ReferencedNodeId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodeId" />
      <setter name="set_ReferencedNodeId" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodeName" />
      <setter name="set_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.ReferencedNodePath">
      <apidata name="ReferencedNodePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodePath" />
      <setter name="set_ReferencedNodePath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Refresh">
      <apidata name="Refresh" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes">
      <apidata name="RegisterTriggeredNodes" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Reload">
      <apidata name="Reload" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes">
      <apidata name="ResetAllTreeEventTriggeringNodes" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes">
      <apidata name="ResetAllTreeNodes" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)">
      <apidata name="ResetPartTreeNodes" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="branch">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.ResultLocker">
      <apidata name="ResultLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ResumeTree">
      <apidata name="ResumeTree" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.RootJobList">
      <apidata name="RootJobList" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)">
      <apidata name="SetTreeCollapsed" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)">
      <apidata name="SetWorkersState" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="treeEvent">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.SleepIfNecessary">
      <apidata name="SleepIfNecessary" group="member" subgroup="method" />
      <memberdata visibility="family" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.SleepTimeFrom">
      <apidata name="SleepTimeFrom" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeFrom" />
      <setter name="set_SleepTimeFrom" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.SleepTimeTo">
      <apidata name="SleepTimeTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeTo" />
      <setter name="set_SleepTimeTo" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.StartCollapsed">
      <apidata name="StartCollapsed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartCollapsed" />
      <setter name="set_StartCollapsed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker">
      <apidata name="SubLastNotNullLogicalLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.ThreadLocked">
      <apidata name="ThreadLocked" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ThreadLocked" />
      <setter name="set_ThreadLocked" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})">
      <apidata name="ThreadUpdateLastLogical" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)">
      <apidata name="ThreadUpdateLastLogicalState" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="newLogicalState">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)">
      <apidata name="ThreadUpdateLastState" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newState">
          <type api="T:Vishnu.Interchange.NodeState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.TreeParams">
      <apidata name="TreeParams" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TreeParams" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalNode.TreeRootJobList">
      <apidata name="TreeRootJobList" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.Trigger">
      <apidata name="Trigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Trigger" />
      <setter name="set_Trigger" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay">
      <apidata name="TriggeredRunDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TriggeredRunDelay" />
      <setter name="set_TriggeredRunDelay" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.TypeInfo">
      <apidata name="TypeInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_TypeInfo" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuNode.TypeInfo">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)">
      <apidata name="UnMarkThreadAsInvalid" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="thread">
          <type api="T:System.Threading.Thread" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode">
      <apidata name="UnregisterTriggeredNode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.UserBreak">
      <apidata name="UserBreak" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalNode.UserRun">
      <apidata name="UserRun" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalNode.WorkersState">
      <apidata name="WorkersState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_WorkersState" />
      <setter name="set_WorkersState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LogicalStateChangedEventHandler">
      <apidata name="LogicalStateChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logicalState">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.LogicalTaskTree">
      <apidata name="LogicalTaskTree" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.LogicalTaskTree.TreeId" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.Dispose" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.Dispose(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.Finalize" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.GetTopJobList" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.SetTopJobList(Vishnu.Interchange.IVishnuNode)" />
        <element api="M:LogicalTaskTree.LogicalTaskTree.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)" />
        <element api="P:LogicalTaskTree.LogicalTaskTree.TreeParams" />
        <element api="P:LogicalTaskTree.LogicalTaskTree.Tree" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.#ctor(Vishnu.Interchange.TreeParameters,LogicalTaskTree.IJobProvider)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="jobProvider">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.GetTopJobList">
      <apidata name="GetTopJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IBusinessLogicRoot.GetTopJobList">
          <type api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.LogicalTaskTree.SetTopJobList(Vishnu.Interchange.IVishnuNode)">
      <apidata name="SetTopJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="topJobList">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IBusinessLogicRoot.SetTopJobList(Vishnu.Interchange.IVishnuNode)">
          <type api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalTaskTree.Tree">
      <apidata name="Tree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Tree" />
      <setter name="set_Tree" />
      <returns>
        <type api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.LogicalTaskTree.TreeId">
      <apidata name="TreeId" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.LogicalTaskTree.TreeParams">
      <apidata name="TreeParams" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TreeParams" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeChangedEventHandler">
      <apidata name="NodeChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeCheckerBase">
      <apidata name="NodeCheckerBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" defaultConstructor="M:LogicalTaskTree.NodeCheckerBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.CheckerShell" ref="true" />
          <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        <type api="T:Vishnu.Interchange.IValueModifier" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.NodeCheckerBase.#ctor" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.ModifyValue(System.Object)" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.GetCheckerReference" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SetChecker(LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.ReturnObject" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.UserControlPath" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.InitNodes" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsInvalid" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.CheckerTrigger" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.CheckerLogger" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.LastReturned" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsGlobal" />
        <element api="E:LogicalTaskTree.NodeCheckerBase.NodeProgressChanged" />
        <element api="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDllPath" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDll" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.CheckerLogger">
      <apidata name="CheckerLogger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckerLogger" />
      <setter name="set_CheckerLogger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.CheckerTrigger">
      <apidata name="CheckerTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckerTrigger" />
      <setter name="set_CheckerTrigger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.GetCheckerReference">
      <apidata name="GetCheckerReference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.InitNodes">
      <apidata name="InitNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InitNodes" />
      <setter name="set_InitNodes" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.IsGlobal">
      <apidata name="IsGlobal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsGlobal" />
      <setter name="set_IsGlobal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.IsInvalid">
      <apidata name="IsInvalid" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInvalid" />
      <setter name="set_IsInvalid" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.LastReturned">
      <apidata name="LastReturned" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastReturned" />
      <setter name="set_LastReturned" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.ModifyValue(System.Object)">
      <apidata name="ModifyValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="toConvert">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IValueModifier.ModifyValue(System.Object)">
          <type api="T:Vishnu.Interchange.IValueModifier" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.NodeCheckerBase.NodeProgressChanged">
      <apidata name="NodeProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeProgressChanged" />
      <remover name="remove_NodeProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:Vishnu.Interchange.INodeChecker.NodeProgressChanged">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.ReturnObject">
      <apidata name="ReturnObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ReturnObject" />
      <setter name="set_ReturnObject" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.INodeChecker.ReturnObject">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeChecker.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.SetChecker(LogicalTaskTree.NodeCheckerBase)">
      <apidata name="SetChecker" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="checker">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeCheckerBase.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.TriggeredRunDelay">
      <apidata name="TriggeredRunDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TriggeredRunDelay" />
      <setter name="set_TriggeredRunDelay" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeCheckerBase.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeConnector">
      <apidata name="NodeConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.JobConnector" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.NodeConnector._node" />
        <element api="F:LogicalTaskTree.NodeConnector._lastResult" />
        <element api="F:LogicalTaskTree.NodeConnector._userControlPath" />
        <element api="M:LogicalTaskTree.NodeConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.NodeConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.NodeConnector.InitReferencedNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeConnector.UserRun" />
        <element api="M:LogicalTaskTree.NodeConnector.UserBreak" />
        <element api="M:LogicalTaskTree.NodeConnector.Reload" />
        <element api="M:LogicalTaskTree.NodeConnector.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeConnector.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeConnector.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.NodeConnector.ToString" />
        <element api="M:LogicalTaskTree.NodeConnector.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.NodeConnector.GetHashCode" />
        <element api="M:LogicalTaskTree.NodeConnector.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeConnector.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeConnector.Logical" />
        <element api="P:LogicalTaskTree.NodeConnector.State" />
        <element api="P:LogicalTaskTree.NodeConnector.LogicalState" />
        <element api="P:LogicalTaskTree.NodeConnector.SingleNodes" />
        <element api="P:LogicalTaskTree.NodeConnector.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.NodeConnector.UserControlPath" />
        <element api="P:LogicalTaskTree.NodeConnector.Checker" />
        <element api="P:LogicalTaskTree.NodeConnector.LastResult" />
        <element api="P:LogicalTaskTree.NodeConnector.LastRun" />
        <element api="P:LogicalTaskTree.NodeConnector.NextRun" />
        <element api="P:LogicalTaskTree.NodeConnector.NextRunInfo" />
        <element api="P:LogicalTaskTree.NodeConnector.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.NodeConnector.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.NodeConnector.ReferencedNodePath" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters,LogicalTaskTree.LogicalNode,LogicalTaskTree.NodeCheckerBase)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJoblist">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="node">
          <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="valueModifier">
          <type nullable="true" api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeConnector._lastResult">
      <apidata name="_lastResult" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeConnector._node">
      <apidata name="_node" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeConnector._userControlPath">
      <apidata name="_userControlPath" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.Break(System.Boolean)">
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="userBreak">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.Checker">
      <apidata name="Checker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Checker" />
      <setter name="set_Checker" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.GetHashCode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.InitReferencedNode(LogicalTaskTree.LogicalNode)">
      <apidata name="InitReferencedNode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="node">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LastResult">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.LastRun">
      <apidata name="LastRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LastRun">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_LastRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.Logical">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.LogicalState">
      <apidata name="LogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LogicalState">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LogicalState" />
      <setter name="set_LogicalState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.NextRun">
      <apidata name="NextRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.NextRun">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NextRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.NextRunInfo">
      <apidata name="NextRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.NextRunInfo">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NextRunInfo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.ReferencedNodeId">
      <apidata name="ReferencedNodeId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_ReferencedNodeId" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.ReferencedNodePath">
      <apidata name="ReferencedNodePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_ReferencedNodePath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.Reload">
      <apidata name="Reload" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Reload">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.Run(Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodes">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.State">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
      <apidata name="SubNodeResultChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeParent.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="result">
          <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.ToString">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.UserBreak">
      <apidata name="UserBreak" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.UserBreak">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeConnector.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.UserControlPath">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeConnector.UserRun">
      <apidata name="UserRun" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.UserRun">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeList">
      <apidata name="NodeList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.JobList" ref="true" />
          <type api="T:LogicalTaskTree.Snapshot" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.NodeList.ListNodeState" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalState" />
        <element api="F:LogicalTaskTree.NodeList.LastCountResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastSingleNodesLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalStateLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogical" />
        <element api="M:LogicalTaskTree.NodeList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.NodeList.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeList.Refresh" />
        <element api="M:LogicalTaskTree.NodeList.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.NodeList.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeList.Logical" />
        <element api="P:LogicalTaskTree.NodeList.State" />
        <element api="P:LogicalTaskTree.NodeList.LogicalState" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.NodeList.UserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.nOperands" />
        <element api="P:LogicalTaskTree.NodeList.nPlus" />
        <element api="P:LogicalTaskTree.NodeList.nMinus" />
        <element api="P:LogicalTaskTree.NodeList.IsVolatile" />
        <element api="P:LogicalTaskTree.NodeList.LastResult" />
        <element api="P:LogicalTaskTree.NodeList.LastSingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.CountResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountResults" />
        <element api="P:LogicalTaskTree.NodeList.CountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.CountTerminatedElements" />
        <element api="P:LogicalTaskTree.NodeList.LastCountTerminatedElements" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ToString" />
        <element api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetHashCode" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.Break(System.Boolean)">
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="userBreak">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.ConstantNodeUserControlPath">
      <apidata name="ConstantNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ConstantNodeUserControlPath" />
      <setter name="set_ConstantNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.CountPositiveResults">
      <apidata name="CountPositiveResults" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CountPositiveResults" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.CountResults">
      <apidata name="CountResults" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CountResults" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.CountTerminatedElements">
      <apidata name="CountTerminatedElements" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CountTerminatedElements" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)">
      <apidata name="InitFromNode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.IsVolatile">
      <apidata name="IsVolatile" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsVolatile" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.JobConnectorUserControlPath">
      <apidata name="JobConnectorUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_JobConnectorUserControlPath" />
      <setter name="set_JobConnectorUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.JobListUserControlPath">
      <apidata name="JobListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_JobListUserControlPath" />
      <setter name="set_JobListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LastCountPositiveResults">
      <apidata name="LastCountPositiveResults" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastCountPositiveResults" />
      <setter name="set_LastCountPositiveResults" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker">
      <apidata name="LastCountPositiveResultsLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LastCountResults">
      <apidata name="LastCountResults" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastCountResults" />
      <setter name="set_LastCountResults" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.LastCountResultsLocker">
      <apidata name="LastCountResultsLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LastCountTerminatedElements">
      <apidata name="LastCountTerminatedElements" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastCountTerminatedElements" />
      <setter name="set_LastCountTerminatedElements" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LastResult">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.LastReturnedLogical">
      <apidata name="LastReturnedLogical" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker">
      <apidata name="LastReturnedLogicalLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LastSingleNodes">
      <apidata name="LastSingleNodes" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastSingleNodes" />
      <setter name="set_LastSingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.LastSingleNodesLocker">
      <apidata name="LastSingleNodesLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.ListLogicalState">
      <apidata name="ListLogicalState" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.ListLogicalStateLocker">
      <apidata name="ListLogicalStateLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeList.ListNodeState">
      <apidata name="ListNodeState" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.Logical">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.LogicalState">
      <apidata name="LogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LogicalState">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LogicalState" />
      <setter name="set_LogicalState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.nMinus">
      <apidata name="nMinus" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_nMinus" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.nOperands">
      <apidata name="nOperands" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_nOperands" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.nPlus">
      <apidata name="nPlus" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_nPlus" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.Refresh">
      <apidata name="Refresh" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Refresh">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodes">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.SingleNodeUserControlPath">
      <apidata name="SingleNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_SingleNodeUserControlPath" />
      <setter name="set_SingleNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.SnapshotUserControlPath">
      <apidata name="SnapshotUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotUserControlPath" />
      <setter name="set_SnapshotUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.State">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="SubNodeLastNotNullLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lastNotNullLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
      <apidata name="SubNodeResultChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeParent.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="result">
          <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)">
      <apidata name="ThreadUpdateLastCountPositiveResults" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="countPositiveResults">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)">
      <apidata name="ThreadUpdateLastCountResults" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="countResults">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)">
      <apidata name="ThreadUpdateLastCountTerminatedElements" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="countTerminatedElements">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})">
      <apidata name="ThreadUpdateLastReturnedLogical" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)">
      <apidata name="ThreadUpdateLastSingleNodes" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="singleNodes">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)">
      <apidata name="ThreadUpdateListLogicalState" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newLogicalState">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeList.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.UserControlPath">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeList" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeParent">
      <apidata name="NodeParent" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.NodeConnector" ref="true" />
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.NodeParent.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ToString" />
        <element api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetHashCode" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastResult" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Logical" />
        <element api="P:LogicalTaskTree.LogicalNode.LogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SingleNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.State" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.UserControlPath" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type nullable="true" api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type nullable="true" api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)">
      <apidata name="FreeChildAt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeParent.HookedTo">
      <apidata name="HookedTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HookedTo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished">
      <apidata name="LastSingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastSingleNodesFinished" />
      <setter name="set_LastSingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker">
      <apidata name="LastSingleNodesFinishedLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)">
      <apidata name="ReleaseChildAt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)">
      <apidata name="SetChildAt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="child">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)">
      <apidata name="SubNodeExceptionCleared" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)">
      <apidata name="SubNodeExceptionRaised" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="SubNodeLastNotNullLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lastNotNullLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})">
      <apidata name="SubNodeLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressStarted" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)">
      <apidata name="SubNodeResultChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="result">
          <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)">
      <apidata name="SubNodeStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:Vishnu.Interchange.NodeState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker">
      <apidata name="SubNodeStateChangedLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker">
      <apidata name="ThreadRefreshParentNodeLocker" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)">
      <apidata name="ThreadUpdateLastLogicalState" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="newLogicalState">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)">
      <apidata name="ThreadUpdateLastSingleNodesFinished" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="singleNodesFinished">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeParent" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeResultComparer">
      <apidata name="NodeResultComparer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.NodeResultComparer.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.NodeResultComparer.Compare(System.String,System.Collections.Generic.List{Vishnu.Interchange.Result})" />
        <element api="M:LogicalTaskTree.NodeResultComparer.#ctor" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeResultComparer.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeResultComparer" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeResultComparer.Compare(System.String,System.Collections.Generic.List{Vishnu.Interchange.Result})">
      <apidata name="Compare" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="comparer">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="results">
          <type nullable="true" api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeResultComparer" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.NodeShellBase">
      <apidata name="NodeShellBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.NodeShellBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.ICanRun" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.NodeShellBase.#ctor" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDllPath" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDll" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeShellBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="CanRun" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="parameters">
          <referenceTo nullable="true">
            <type nullable="true" api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.ICanRun.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:Vishnu.Interchange.ICanRun" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeShellBase.CanRunDll">
      <apidata name="CanRunDll" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CanRunDll" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.ICanRun" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.NodeShellBase.CanRunDllPath">
      <apidata name="CanRunDllPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CanRunDllPath" />
      <setter name="set_CanRunDllPath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.ResultChangedEventHandler">
      <apidata name="ResultChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="result">
          <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.SingleNode">
      <apidata name="SingleNode" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LogicalTaskTree.SingleNode._returnObject" />
        <element api="M:LogicalTaskTree.SingleNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.SingleNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.SingleNode.SetReturnObject(System.Object)" />
        <element api="M:LogicalTaskTree.SingleNode.ToString" />
        <element api="M:LogicalTaskTree.SingleNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.SingleNode.GetHashCode" />
        <element api="M:LogicalTaskTree.SingleNode.RaiseNodeLastResultChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.SingleNode.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.SingleNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="P:LogicalTaskTree.SingleNode.Logical" />
        <element api="P:LogicalTaskTree.SingleNode.State" />
        <element api="P:LogicalTaskTree.SingleNode.SingleNodes" />
        <element api="P:LogicalTaskTree.SingleNode.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.SingleNode.UserControlPath" />
        <element api="P:LogicalTaskTree.SingleNode.Checker" />
        <element api="P:LogicalTaskTree.SingleNode.LastResult" />
        <element api="P:LogicalTaskTree.SingleNode.ReferencedNodeName" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.LogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.#ctor(System.String,LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJoblist">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.SingleNode._returnObject">
      <apidata name="_returnObject" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.Checker">
      <apidata name="Checker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Checker" />
      <setter name="set_Checker" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.GetHashCode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LastResult">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.Logical">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)">
      <apidata name="OnNodeProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="itemsName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="countAll">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countSucceeded">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.RaiseNodeLastResultChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="RaiseNodeLastResultChangedWithTreeEvent" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lastNotNullLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ReferencedNodeName" />
      <setter name="set_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.SetReturnObject(System.Object)">
      <apidata name="SetReturnObject" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="returnObject">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodes">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.State">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.SingleNode.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.ToString">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.SingleNode.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.UserControlPath">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.SingleNode" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.Snapshot">
      <apidata name="Snapshot" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.Snapshot.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)" />
        <element api="M:LogicalTaskTree.Snapshot.Show(System.String)" />
        <element api="M:LogicalTaskTree.Snapshot.RefreshSnapshot(LogicalTaskTree.LogicalNode,System.Boolean)" />
        <element api="M:LogicalTaskTree.Snapshot.RefreshSnapshot" />
        <element api="M:LogicalTaskTree.Snapshot.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.Snapshot.OnSnapshotRefreshed" />
        <element api="P:LogicalTaskTree.Snapshot.SingleNodes" />
        <element api="P:LogicalTaskTree.Snapshot.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.Snapshot.Timestamp" />
        <element api="P:LogicalTaskTree.Snapshot.SnapshotPath" />
        <element api="P:LogicalTaskTree.Snapshot.IsDefaultSnapshot" />
        <element api="P:LogicalTaskTree.Snapshot.UserControlPath" />
        <element api="P:LogicalTaskTree.Snapshot.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.Snapshot.NodeListUserControlPath" />
        <element api="P:LogicalTaskTree.Snapshot.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.Snapshot.WasDefaultSnapshot" />
        <element api="E:LogicalTaskTree.Snapshot.SnapshotRefreshed" />
        <element api="F:LogicalTaskTree.NodeList.ListNodeState" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalState" />
        <element api="F:LogicalTaskTree.NodeList.LastCountResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastSingleNodesLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalStateLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogical" />
        <element api="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeList.Refresh" />
        <element api="M:LogicalTaskTree.NodeList.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeList.Logical" />
        <element api="P:LogicalTaskTree.NodeList.State" />
        <element api="P:LogicalTaskTree.NodeList.LogicalState" />
        <element api="P:LogicalTaskTree.NodeList.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.nOperands" />
        <element api="P:LogicalTaskTree.NodeList.nPlus" />
        <element api="P:LogicalTaskTree.NodeList.nMinus" />
        <element api="P:LogicalTaskTree.NodeList.IsVolatile" />
        <element api="P:LogicalTaskTree.NodeList.LastResult" />
        <element api="P:LogicalTaskTree.NodeList.LastSingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.CountResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountResults" />
        <element api="P:LogicalTaskTree.NodeList.CountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.CountTerminatedElements" />
        <element api="P:LogicalTaskTree.NodeList.LastCountTerminatedElements" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ToString" />
        <element api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetHashCode" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.#ctor(LogicalTaskTree.LogicalNode,LogicalTaskTree.JobList,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="rootJobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeList.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.IsDefaultSnapshot">
      <apidata name="IsDefaultSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDefaultSnapshot" />
      <setter name="set_IsDefaultSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.JobListUserControlPath">
      <apidata name="JobListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.JobListUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_JobListUserControlPath" />
      <setter name="set_JobListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.NodeListUserControlPath">
      <apidata name="NodeListUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeListUserControlPath" />
      <setter name="set_NodeListUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.OnSnapshotRefreshed">
      <apidata name="OnSnapshotRefreshed" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.RefreshSnapshot">
      <apidata name="RefreshSnapshot" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.RefreshSnapshot(LogicalTaskTree.LogicalNode,System.Boolean)">
      <apidata name="RefreshSnapshot" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="mother">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="isConstructor" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Snapshot.Show(System.String)">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="indent">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.SingleNodes">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.SingleNodesFinished">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.SingleNodeUserControlPath">
      <apidata name="SingleNodeUserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.SingleNodeUserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_SingleNodeUserControlPath" />
      <setter name="set_SingleNodeUserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.SnapshotPath">
      <apidata name="SnapshotPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotPath" />
      <setter name="set_SnapshotPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="E:LogicalTaskTree.Snapshot.SnapshotRefreshed">
      <apidata name="SnapshotRefreshed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SnapshotRefreshed" />
      <remover name="remove_SnapshotRefreshed" />
      <eventhandler>
        <type api="T:LogicalTaskTree.SnapshotRefreshedEventHandler" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.Timestamp">
      <apidata name="Timestamp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Timestamp" />
      <setter name="set_Timestamp" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeList.UserControlPath">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Snapshot.WasDefaultSnapshot">
      <apidata name="WasDefaultSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WasDefaultSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Snapshot" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.SnapshotRefreshedEventHandler">
      <apidata name="SnapshotRefreshedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.StateChangedEventHandler">
      <apidata name="StateChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:Vishnu.Interchange.NodeState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.ThreadLocker">
      <apidata name="ThreadLocker" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.ThreadLocker.LockNameGlobal(System.String)" />
        <element api="M:LogicalTaskTree.ThreadLocker.UnlockNameGlobal(System.String)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ThreadLocker.LockNameGlobal(System.String)">
      <apidata name="LockNameGlobal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ThreadLocker" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ThreadLocker.UnlockNameGlobal(System.String)">
      <apidata name="UnlockNameGlobal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ThreadLocker" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.TreeEventTrigger">
      <apidata name="TreeEventTrigger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.TreeEventTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:LogicalTaskTree.TreeEventTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:LogicalTaskTree.TreeEventTrigger.#ctor(System.String,System.String,System.String,System.String)" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.Info" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.IsActive" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.InternalEvents" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.OwnerId" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.LastTreeEvent" />
        <element api="P:LogicalTaskTree.TreeEventTrigger.ReferencedNodeId" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TreeEventTrigger.#ctor(System.String,System.String,System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="internalEvents">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ownerId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="originalReference">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="referencedNodeId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.Info">
      <apidata name="Info" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Info" />
      <setter name="set_Info" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.INodeTrigger.Info">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.InternalEvents">
      <apidata name="InternalEvents" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InternalEvents" />
      <setter name="set_InternalEvents" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.IsActive">
      <apidata name="IsActive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsActive" />
      <setter name="set_IsActive" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.LastTreeEvent">
      <apidata name="LastTreeEvent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastTreeEvent" />
      <setter name="set_LastTreeEvent" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.OwnerId">
      <apidata name="OwnerId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OwnerId" />
      <setter name="set_OwnerId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TreeEventTrigger.ReferencedNodeId">
      <apidata name="ReferencedNodeId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReferencedNodeId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TreeEventTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TreeEventTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.TriggerShell">
      <apidata name="TriggerShell" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.TriggerShell.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:LogicalTaskTree.TriggerShell.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:LogicalTaskTree.TriggerShell.Dispose" />
        <element api="M:LogicalTaskTree.TriggerShell.Dispose(System.Boolean)" />
        <element api="M:LogicalTaskTree.TriggerShell.Finalize" />
        <element api="M:LogicalTaskTree.TriggerShell.GetTreeEventTrigger" />
        <element api="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object,System.Boolean)" />
        <element api="M:LogicalTaskTree.TriggerShell.GetTriggerReference" />
        <element api="M:LogicalTaskTree.TriggerShell.GetTriggerParameters" />
        <element api="M:LogicalTaskTree.TriggerShell.SetSlaveTriggerShell(LogicalTaskTree.TriggerShell)" />
        <element api="P:LogicalTaskTree.TriggerShell.Info" />
        <element api="P:LogicalTaskTree.TriggerShell.HasTreeEventTrigger" />
        <element api="P:LogicalTaskTree.TriggerShell.ReferencedNodeName" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="triggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.#ctor(System.String,System.Object,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="triggerShellReference">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="triggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="dummy">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.GetTreeEventTrigger">
      <apidata name="GetTreeEventTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.GetTriggerParameters">
      <apidata name="GetTriggerParameters" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.GetTriggerReference">
      <apidata name="GetTriggerReference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TriggerShell.HasTreeEventTrigger">
      <apidata name="HasTreeEventTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasTreeEventTrigger" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TriggerShell.Info">
      <apidata name="Info" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Info" />
      <setter name="set_Info" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.INodeTrigger.Info">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.TriggerShell.ReferencedNodeName">
      <apidata name="ReferencedNodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReferencedNodeName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.SetSlaveTriggerShell(LogicalTaskTree.TriggerShell)">
      <apidata name="SetSlaveTriggerShell" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="triggerShell">
          <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="internalTriggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.TriggerShell.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.UndefinedJob">
      <apidata name="UndefinedJob" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.UndefinedJob.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.Job" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IUndefinedElement" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.UndefinedJob.#ctor" />
        <element api="P:LogicalTaskTree.Job.LogicalExpression" />
        <element api="P:LogicalTaskTree.Job.Checkers" />
        <element api="P:LogicalTaskTree.Job.Triggers" />
        <element api="P:LogicalTaskTree.Job.Loggers" />
        <element api="P:LogicalTaskTree.Job.SnapshotNames" />
        <element api="P:LogicalTaskTree.Job.JobSnapshotTrigger" />
        <element api="P:LogicalTaskTree.Job.JobTrigger" />
        <element api="P:LogicalTaskTree.Job.JobLogger" />
        <element api="P:LogicalTaskTree.Job.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.Job.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.Job.NodeListUserControlPath" />
        <element api="P:LogicalTaskTree.Job.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.Job.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.Job.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.Job.BreakWithResult" />
        <element api="P:LogicalTaskTree.Job.ThreadLocked" />
        <element api="P:LogicalTaskTree.Job.LockName" />
        <element api="P:LogicalTaskTree.Job.IsVolatile" />
        <element api="P:LogicalTaskTree.Job.StartCollapsed" />
        <element api="P:LogicalTaskTree.Job.IsGlobal" />
        <element api="P:LogicalTaskTree.Job.InitNodes" />
        <element api="P:LogicalTaskTree.Job.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.Job.MaxSubJobDepth" />
        <element api="P:LogicalTaskTree.Job.LogicalChangedDelay" />
        <element api="P:LogicalTaskTree.Job.IsDefaultSnapshot" />
        <element api="P:LogicalTaskTree.Job.WasDefaultSnapshot" />
        <element api="P:LogicalTaskTree.Job.EventTriggers" />
        <element api="P:LogicalTaskTree.Job.Workers" />
        <element api="P:LogicalTaskTree.Job.WorkersDictionary" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.UndefinedJob.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedJob" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.UndefinedJobListClass">
      <apidata name="UndefinedJobListClass" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.UndefinedJobListClass.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.JobList" ref="true" />
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
          <type api="T:LogicalTaskTree.NodeParent" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IUndefinedElement" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.UndefinedJobListClass.UndefinedJobList" />
        <element api="M:LogicalTaskTree.UndefinedJobListClass.#ctor" />
        <element api="F:LogicalTaskTree.JobList.UnsatisfiedNodeConnectors" />
        <element api="F:LogicalTaskTree.JobList.TriggerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.WorkerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.LoggerRelevantEventCache" />
        <element api="F:LogicalTaskTree.JobList.JobsByName" />
        <element api="F:LogicalTaskTree.JobList.NodesByName" />
        <element api="F:LogicalTaskTree.JobList.TreeRootLastChanceNodesByName" />
        <element api="F:LogicalTaskTree.JobList.NodesById" />
        <element api="M:LogicalTaskTree.JobList.RunTreeExternals" />
        <element api="M:LogicalTaskTree.JobList.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.JobList.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.JobList.BreakTreeExternals(System.Boolean)" />
        <element api="M:LogicalTaskTree.JobList.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.JobList.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.JobList.PublishAllTreeInfos" />
        <element api="M:LogicalTaskTree.JobList.GetAllTreeInfos" />
        <element api="M:LogicalTaskTree.JobList.Show(System.String)" />
        <element api="M:LogicalTaskTree.JobList.ShowSyntaxTree" />
        <element api="M:LogicalTaskTree.JobList.ShowFlatSyntaxTree" />
        <element api="M:LogicalTaskTree.JobList.ToString" />
        <element api="M:LogicalTaskTree.JobList.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.JobList.GetHashCode" />
        <element api="M:LogicalTaskTree.JobList.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.JobList.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.JobList.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.JobList.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="P:LogicalTaskTree.JobList.LogicalExpression" />
        <element api="P:LogicalTaskTree.JobList.SnapshotTrigger" />
        <element api="P:LogicalTaskTree.JobList.IsConrolled" />
        <element api="P:LogicalTaskTree.JobList.UserControlPath" />
        <element api="P:LogicalTaskTree.JobList.SnapshotUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.JobConnectorUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.NodeListUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.SingleNodeUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.ConstantNodeUserControlPath" />
        <element api="P:LogicalTaskTree.JobList.MaxSubJobDepth" />
        <element api="P:LogicalTaskTree.JobList.LogicalChangedDelay" />
        <element api="P:LogicalTaskTree.JobList.Job" />
        <element api="P:LogicalTaskTree.JobList.AllCheckersForUnreferencingNodeConnectors" />
        <element api="P:LogicalTaskTree.JobList.TreeExternalCheckers" />
        <element api="P:LogicalTaskTree.JobList.TreeExternalSingleNodes" />
        <element api="F:LogicalTaskTree.NodeList.ListNodeState" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalState" />
        <element api="F:LogicalTaskTree.NodeList.LastCountResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastSingleNodesLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastCountPositiveResultsLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogicalLocker" />
        <element api="F:LogicalTaskTree.NodeList.ListLogicalStateLocker" />
        <element api="F:LogicalTaskTree.NodeList.LastReturnedLogical" />
        <element api="M:LogicalTaskTree.NodeList.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeList.Refresh" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastSingleNodes(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountTerminatedElements(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastCountPositiveResults(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateListLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeList.ThreadUpdateLastReturnedLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.NodeList.SubNodeResultChanged(LogicalTaskTree.LogicalNode,Vishnu.Interchange.Result)" />
        <element api="P:LogicalTaskTree.NodeList.Logical" />
        <element api="P:LogicalTaskTree.NodeList.State" />
        <element api="P:LogicalTaskTree.NodeList.LogicalState" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.NodeList.JobListUserControlPath" />
        <element api="P:LogicalTaskTree.NodeList.nOperands" />
        <element api="P:LogicalTaskTree.NodeList.nPlus" />
        <element api="P:LogicalTaskTree.NodeList.nMinus" />
        <element api="P:LogicalTaskTree.NodeList.IsVolatile" />
        <element api="P:LogicalTaskTree.NodeList.LastResult" />
        <element api="P:LogicalTaskTree.NodeList.LastSingleNodes" />
        <element api="P:LogicalTaskTree.NodeList.CountResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountResults" />
        <element api="P:LogicalTaskTree.NodeList.CountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.LastCountPositiveResults" />
        <element api="P:LogicalTaskTree.NodeList.CountTerminatedElements" />
        <element api="P:LogicalTaskTree.NodeList.LastCountTerminatedElements" />
        <element api="F:LogicalTaskTree.NodeParent.LastSingleNodesFinishedLocker" />
        <element api="F:LogicalTaskTree.NodeParent.ThreadRefreshParentNodeLocker" />
        <element api="F:LogicalTaskTree.NodeParent.SubNodeStateChangedLocker" />
        <element api="M:LogicalTaskTree.NodeParent.SetChildAt(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.FreeChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.ReleaseChildAt(System.Int32)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionRaised(LogicalTaskTree.LogicalNode,System.Exception)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeExceptionCleared(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.SubNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.NodeParent.ThreadUpdateLastSingleNodesFinished(System.Int32)" />
        <element api="P:LogicalTaskTree.NodeParent.HookedTo" />
        <element api="P:LogicalTaskTree.NodeParent.LastSingleNodesFinished" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.UndefinedJobListClass.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedJobListClass" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.UndefinedJobListClass.UndefinedJobList">
      <apidata name="UndefinedJobList" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.UndefinedJobListClass" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedJobListClass" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.UndefinedLogicalNodeClass">
      <apidata name="UndefinedLogicalNodeClass" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.UndefinedLogicalNodeClass.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IUndefinedElement" ref="true" />
      </implements>
      <elements>
        <element api="F:LogicalTaskTree.UndefinedLogicalNodeClass.UndefinedLogicalNode" />
        <element api="M:LogicalTaskTree.UndefinedLogicalNodeClass.DoRun(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.UndefinedLogicalNodeClass.#ctor" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.LastResult" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.Logical" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodes" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodesFinished" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.State" />
        <element api="P:LogicalTaskTree.UndefinedLogicalNodeClass.UserControlPath" />
        <element api="F:LogicalTaskTree.LogicalNode.LastExceptions" />
        <element api="F:LogicalTaskTree.LogicalNode.RootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.TreeRootJobList" />
        <element api="F:LogicalTaskTree.LogicalNode.AppSettings" />
        <element api="F:LogicalTaskTree.LogicalNode.CancellationToken" />
        <element api="F:LogicalTaskTree.LogicalNode.IsTaskActiveOrScheduled" />
        <element api="F:LogicalTaskTree.LogicalNode.IsRunRequired" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.SubLastNotNullLogicalLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.LastLogicalStateLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ResultLocker" />
        <element api="F:LogicalTaskTree.LogicalNode.ExceptionLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._parentViewLocker" />
        <element api="F:LogicalTaskTree.LogicalNode._lastRun" />
        <element api="F:LogicalTaskTree.LogicalNode._nextRunInfo" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressChanged(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeProgressFinished(System.String,System.Int64,System.Int64)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeBreaked" />
        <element api="M:LogicalTaskTree.LogicalNode.OnLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.RaiseNodeLastNotNullLogicalChangedWithTreeEvent(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:LogicalTaskTree.LogicalNode.OnNodeWorkersStateChanged" />
        <element api="M:LogicalTaskTree.LogicalNode.GetlastEventSourceIfIsTreeEventTriggered" />
        <element api="M:LogicalTaskTree.LogicalNode.CanControlledTreeStart(System.Boolean,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:LogicalTaskTree.LogicalNode.Invalidate" />
        <element api="M:LogicalTaskTree.LogicalNode.InitFromNode(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.Refresh" />
        <element api="M:LogicalTaskTree.LogicalNode.UserRun" />
        <element api="M:LogicalTaskTree.LogicalNode.Run(Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.LogicalNode.RegisterTriggeredNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.UnregisterTriggeredNode" />
        <element api="M:LogicalTaskTree.LogicalNode.UserBreak" />
        <element api="M:LogicalTaskTree.LogicalNode.Reload" />
        <element api="M:LogicalTaskTree.LogicalNode.Break(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetTopRootJobList" />
        <element api="M:LogicalTaskTree.LogicalNode.ProcessTreeEvent(System.String,System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetTreeCollapsed(System.Boolean)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetResults" />
        <element api="M:LogicalTaskTree.LogicalNode.GetEnvironment" />
        <element api="M:LogicalTaskTree.LogicalNode.ToString" />
        <element api="M:LogicalTaskTree.LogicalNode.Equals(System.Object)" />
        <element api="M:LogicalTaskTree.LogicalNode.GetHashCode" />
        <element api="M:LogicalTaskTree.LogicalNode.FindNodeById(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.FindEventTriggers(System.String,System.String,System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogical(System.Nullable{System.Boolean})" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastState(Vishnu.Interchange.NodeState)" />
        <element api="M:LogicalTaskTree.LogicalNode.ThreadUpdateLastLogicalState(Vishnu.Interchange.NodeLogicalState)" />
        <element api="M:LogicalTaskTree.LogicalNode.SetWorkersState(System.String)" />
        <element api="M:LogicalTaskTree.LogicalNode.MarkThreadAsInvalidIfActive(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.UnMarkThreadAsInvalid(System.Threading.Thread)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetPartTreeNodes(LogicalTaskTree.LogicalNode)" />
        <element api="M:LogicalTaskTree.LogicalNode.ResetAllTreeEventTriggeringNodes" />
        <element api="M:LogicalTaskTree.LogicalNode.InitNode(System.Int32,LogicalTaskTree.LogicalNode)" />
        <element api="P:LogicalTaskTree.LogicalNode.IdInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NameInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.PathInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.TypeInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.LevelInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.BreakWithResult" />
        <element api="P:LogicalTaskTree.LogicalNode.CanTreeStart" />
        <element api="P:LogicalTaskTree.LogicalNode.DebugMode" />
        <element api="P:LogicalTaskTree.LogicalNode.Id" />
        <element api="P:LogicalTaskTree.LogicalNode.InitNodes" />
        <element api="P:LogicalTaskTree.LogicalNode.IsActive" />
        <element api="P:LogicalTaskTree.LogicalNode.IsGlobal" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSleepTime" />
        <element api="P:LogicalTaskTree.LogicalNode.IsInSnapshot" />
        <element api="P:LogicalTaskTree.LogicalNode.IsSnapshotDummy" />
        <element api="P:LogicalTaskTree.LogicalNode.LastExecutingTreeEvent" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastLogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.LastNotNullLogical" />
        <element api="P:LogicalTaskTree.LogicalNode.LastRun" />
        <element api="P:LogicalTaskTree.LogicalNode.LastState" />
        <element api="P:LogicalTaskTree.LogicalNode.Level" />
        <element api="P:LogicalTaskTree.LogicalNode.LockName" />
        <element api="P:LogicalTaskTree.LogicalNode.Logger" />
        <element api="P:LogicalTaskTree.LogicalNode.LogicalState" />
        <element api="P:LogicalTaskTree.LogicalNode.Name" />
        <element api="P:LogicalTaskTree.LogicalNode.NameId" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRun" />
        <element api="P:LogicalTaskTree.LogicalNode.NextRunInfo" />
        <element api="P:LogicalTaskTree.LogicalNode.NodeType" />
        <element api="P:LogicalTaskTree.LogicalNode.ParentView" />
        <element api="P:LogicalTaskTree.LogicalNode.Path" />
        <element api="P:LogicalTaskTree.LogicalNode.IdPath" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeId" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.LogicalNode.ReferencedNodePath" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeFrom" />
        <element api="P:LogicalTaskTree.LogicalNode.SleepTimeTo" />
        <element api="P:LogicalTaskTree.LogicalNode.StartCollapsed" />
        <element api="P:LogicalTaskTree.LogicalNode.ThreadLocked" />
        <element api="P:LogicalTaskTree.LogicalNode.Trigger" />
        <element api="P:LogicalTaskTree.LogicalNode.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.LogicalNode.WorkersState" />
        <element api="P:LogicalTaskTree.LogicalNode.TreeParams" />
        <element api="E:LogicalTaskTree.LogicalNode.PropertiesChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeLastNotNullLogicalChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeResultChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionRaised" />
        <element api="E:LogicalTaskTree.LogicalNode.ExceptionCleared" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeWorkersStateChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressStarted" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressChanged" />
        <element api="E:LogicalTaskTree.LogicalNode.NodeProgressFinished" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.UndefinedLogicalNodeClass.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.UndefinedLogicalNodeClass.DoRun(Vishnu.Interchange.TreeEvent)">
      <apidata name="DoRun" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.LogicalNode.DoRun(Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="source">
          <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.LastResult">
      <apidata name="LastResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.LastResult">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_LastResult" />
      <setter name="set_LastResult" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.Logical">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodes">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.SingleNodesFinished">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.State">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="F:LogicalTaskTree.UndefinedLogicalNodeClass.UndefinedLogicalNode">
      <apidata name="UndefinedLogicalNode" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.UndefinedLogicalNodeClass.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.LogicalNode.UserControlPath">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.ValueModifier`1">
      <apidata name="ValueModifier" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
          <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:LogicalTaskTree.ValueModifier`1.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.ModifyValue(System.Object)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.#ctor(LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,System.String)" />
        <element api="M:LogicalTaskTree.ValueModifier`1.GetCheckerReference" />
        <element api="P:LogicalTaskTree.ValueModifier`1.ReturnObject" />
        <element api="P:LogicalTaskTree.ValueModifier`1.UserControlPath" />
        <element api="P:LogicalTaskTree.ValueModifier`1.SlavePathName" />
        <element api="P:LogicalTaskTree.ValueModifier`1.FormatString" />
        <element api="P:LogicalTaskTree.ValueModifier`1.NodeCheckerBase" />
        <element api="P:LogicalTaskTree.ValueModifier`1.CheckerBaseReferenceName" />
        <element api="P:LogicalTaskTree.ValueModifier`1.CheckerTrigger" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SetChecker(LogicalTaskTree.NodeCheckerBase)" />
        <element api="M:LogicalTaskTree.NodeCheckerBase.SubNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.InitNodes" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.TriggeredRunDelay" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.ReferencedNodeName" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsInvalid" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.CheckerLogger" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.LastReturned" />
        <element api="P:LogicalTaskTree.NodeCheckerBase.IsGlobal" />
        <element api="E:LogicalTaskTree.NodeCheckerBase.NodeProgressChanged" />
        <element api="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDllPath" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDll" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.#ctor(LogicalTaskTree.NodeCheckerBase)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="nodeChecker">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="checkerReference">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,LogicalTaskTree.NodeCheckerBase)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="formatStringOrValueModifierPath">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="nodeCheckerBase">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.#ctor(System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="formatStringOrValueModifierPath">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checkerReference">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.CheckerBaseReferenceName">
      <apidata name="CheckerBaseReferenceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckerBaseReferenceName" />
      <setter name="set_CheckerBaseReferenceName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.CheckerTrigger">
      <apidata name="CheckerTrigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeCheckerBase.CheckerTrigger">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_CheckerTrigger" />
      <setter name="set_CheckerTrigger" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.TriggerShell" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.FormatString">
      <apidata name="FormatString" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FormatString" />
      <setter name="set_FormatString" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.GetCheckerReference">
      <apidata name="GetCheckerReference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeCheckerBase.GetCheckerReference">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.ModifyValue(System.Object)">
      <apidata name="ModifyValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeCheckerBase.ModifyValue(System.Object)">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="toConvert">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IValueModifier.ModifyValue(System.Object)">
          <type api="T:Vishnu.Interchange.IValueModifier" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.NodeCheckerBase">
      <apidata name="NodeCheckerBase" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeCheckerBase" />
      <setter name="set_NodeCheckerBase" />
      <returns>
        <type nullable="true" api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.ReturnObject">
      <apidata name="ReturnObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeCheckerBase.ReturnObject">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_ReturnObject" />
      <setter name="set_ReturnObject" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.INodeChecker.ReturnObject">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.ValueModifier`1.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.NodeCheckerBase.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeChecker.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
          <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.SlavePathName">
      <apidata name="SlavePathName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SlavePathName" />
      <setter name="set_SlavePathName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.ValueModifier`1.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:LogicalTaskTree.NodeCheckerBase.UserControlPath">
          <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_UserControlPath" />
      <setter name="set_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.ValueModifier`1" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.Workers">
      <apidata name="Workers" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.Workers.ContainsCombinedKey(System.String)" />
        <element api="M:LogicalTaskTree.Workers.Add(System.String,LogicalTaskTree.WorkerShell[])" />
        <element api="P:LogicalTaskTree.Workers.Keys" />
        <element api="P:LogicalTaskTree.Workers.Values" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Workers.Add(System.String,LogicalTaskTree.WorkerShell[])">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="node_event">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="workerArray">
          <arrayOf rank="1">
            <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Workers" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Workers.ContainsCombinedKey(System.String)">
      <apidata name="ContainsCombinedKey" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="node_id">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Workers" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Workers.Keys">
      <apidata name="Keys" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Keys" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2.KeyCollection" ref="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <arrayOf rank="1">
                    <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
                  </arrayOf>
                </specialization>
              </type>
            </specialization>
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Workers" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.Workers.Values">
      <apidata name="Values" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Values" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2.ValueCollection" ref="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <arrayOf rank="1">
                    <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
                  </arrayOf>
                </specialization>
              </type>
            </specialization>
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.Workers" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.WorkerShell">
      <apidata name="WorkerShell" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeWorker" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.WorkerShell.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)" />
        <element api="M:LogicalTaskTree.WorkerShell.BreakExec" />
        <element api="M:LogicalTaskTree.WorkerShell.Exists" />
        <element api="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement)" />
        <element api="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement,System.Boolean,Vishnu.Interchange.INodeTrigger)" />
        <element api="P:LogicalTaskTree.WorkerShell.SlavePathName" />
        <element api="P:LogicalTaskTree.WorkerShell.TransportByFile" />
        <element api="P:LogicalTaskTree.WorkerShell.WorkerState" />
        <element api="P:LogicalTaskTree.WorkerShell.Trigger" />
        <element api="M:LogicalTaskTree.NodeShellBase.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDllPath" />
        <element api="P:LogicalTaskTree.NodeShellBase.CanRunDll" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="slaveParameters">
          <type api="T:System.Xml.Linq.XElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.WorkerShell.#ctor(System.String,System.Xml.Linq.XElement,System.Boolean,Vishnu.Interchange.INodeTrigger)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="slavePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="slaveParameters">
          <type api="T:System.Xml.Linq.XElement" ref="true" />
        </parameter>
        <parameter name="transportByFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="workerTrigger">
          <type nullable="true" api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.WorkerShell.BreakExec">
      <apidata name="BreakExec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.WorkerShell.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="nodeId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="eventParameters">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
        <parameter name="isResetting">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.Interchange.INodeWorker.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)">
          <type api="T:Vishnu.Interchange.INodeWorker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.WorkerShell.Exists">
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.WorkerShell.SlavePathName">
      <apidata name="SlavePathName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SlavePathName" />
      <setter name="set_SlavePathName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.WorkerShell.TransportByFile">
      <apidata name="TransportByFile" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransportByFile" />
      <setter name="set_TransportByFile" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.WorkerShell.Trigger">
      <apidata name="Trigger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Trigger" />
      <setter name="set_Trigger" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="P:LogicalTaskTree.WorkerShell.WorkerState">
      <apidata name="WorkerState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WorkerState" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree" />
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </containers>
    </api>
    <api id="N:LogicalTaskTree.Provider">
      <apidata name="LogicalTaskTree.Provider" group="namespace" />
      <elements>
        <element api="T:LogicalTaskTree.Provider.EmptyJobProvider" />
        <element api="T:LogicalTaskTree.Provider.ProductionJobProvider" />
      </elements>
    </api>
    <api id="T:LogicalTaskTree.Provider.EmptyJobProvider">
      <apidata name="EmptyJobProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.Provider.EmptyJobProvider.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:LogicalTaskTree.Provider.EmptyJobProvider.GetJob(System.String@)" />
        <element api="M:LogicalTaskTree.Provider.EmptyJobProvider.GetLogicalJobName(System.String)" />
        <element api="M:LogicalTaskTree.Provider.EmptyJobProvider.GetPhysicalJobPath(System.String)" />
        <element api="M:LogicalTaskTree.Provider.EmptyJobProvider.#ctor" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.EmptyJobProvider.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.EmptyJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.EmptyJobProvider.GetJob(System.String@)">
      <apidata name="GetJob" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:LogicalTaskTree.Job" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetJob(System.String@)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.EmptyJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.EmptyJobProvider.GetLogicalJobName(System.String)">
      <apidata name="GetLogicalJobName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetLogicalJobName(System.String)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.EmptyJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.EmptyJobProvider.GetPhysicalJobPath(System.String)">
      <apidata name="GetPhysicalJobPath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:LogicalTaskTree.IJobProvider.GetPhysicalJobPath(System.String)">
          <type api="T:LogicalTaskTree.IJobProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.EmptyJobProvider" ref="true" />
      </containers>
    </api>
    <api id="T:LogicalTaskTree.Provider.ProductionJobProvider">
      <apidata name="ProductionJobProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:LogicalTaskTree.Provider.ProductionJobProvider.#ctor" />
      <family>
        <ancestors>
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LogicalTaskTree.Provider.ProductionJobProvider.TryLoadJobPackage(System.String@)" />
        <element api="M:LogicalTaskTree.Provider.ProductionJobProvider.#ctor" />
        <element api="F:LogicalTaskTree.JobProviderBase.LoadedJobPackages" />
        <element api="F:LogicalTaskTree.JobProviderBase._appSettings" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetJob(System.String@)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetLogicalJobName(System.String)" />
        <element api="M:LogicalTaskTree.JobProviderBase.GetPhysicalJobPath(System.String)" />
      </elements>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.ProductionJobProvider.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.ProductionJobProvider" ref="true" />
      </containers>
    </api>
    <api id="M:LogicalTaskTree.Provider.ProductionJobProvider.TryLoadJobPackage(System.String@)">
      <apidata name="TryLoadJobPackage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LogicalTaskTree.JobProviderBase.TryLoadJobPackage(System.String@)">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="logicalJobName">
          <referenceTo>
            <type api="T:System.String" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="LogicalTaskTree" module="LogicalTaskTree" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:LogicalTaskTree.Provider" />
        <type api="T:LogicalTaskTree.Provider.ProductionJobProvider" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.ApplicationControl">
      <apidata name="NetEti.ApplicationControl" group="namespace" />
      <elements>
        <element api="T:NetEti.ApplicationControl.IFlushable" />
        <element api="T:NetEti.ApplicationControl.IInfoController" />
        <element api="T:NetEti.ApplicationControl.IInfoPublisher" />
        <element api="T:NetEti.ApplicationControl.IInfoSource" />
        <element api="T:NetEti.ApplicationControl.IInfoViewer" />
        <element api="T:NetEti.ApplicationControl.InfoController" />
        <element api="T:NetEti.ApplicationControl.InfoType" />
        <element api="T:NetEti.ApplicationControl.InfoArgs" />
        <element api="T:NetEti.ApplicationControl.InfoTypes" />
        <element api="T:NetEti.ApplicationControl.IShowable" />
        <element api="T:NetEti.ApplicationControl.ViewerAsWrapper" />
        <element api="T:NetEti.ApplicationControl.Logger" />
        <element api="T:NetEti.ApplicationControl.LoggerBase" />
        <element api="T:NetEti.ApplicationControl.Statistics" />
        <element api="T:NetEti.ApplicationControl.Abortable" />
        <element api="T:NetEti.ApplicationControl.Messaging" />
        <element api="T:NetEti.ApplicationControl.ProcessWorker" />
        <element api="T:NetEti.ApplicationControl.TaskWorkerStatus" />
        <element api="T:NetEti.ApplicationControl.TaskWorker" />
      </elements>
    </api>
    <api id="T:NetEti.ApplicationControl.Abortable">
      <apidata name="Abortable" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationControl.Abortable.GetThread" />
        <element api="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ThreadStart)" />
        <element api="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ThreadStart,System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ParameterizedThreadStart)" />
        <element api="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Abort" />
        <element api="M:NetEti.ApplicationControl.Abortable.Abort(System.Object)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Start(System.Object)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Start" />
        <element api="M:NetEti.ApplicationControl.Abortable.SpinWait(System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Yield" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetApartmentState" />
        <element api="M:NetEti.ApplicationControl.Abortable.DisableComObjectEagerCleanup" />
        <element api="M:NetEti.ApplicationControl.Abortable.Interrupt" />
        <element api="M:NetEti.ApplicationControl.Abortable.Join(System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Join" />
        <element api="M:NetEti.ApplicationControl.Abortable.Join(System.TimeSpan)" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetCurrentProcessorId" />
        <element api="M:NetEti.ApplicationControl.Abortable.Sleep(System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.Sleep(System.TimeSpan)" />
        <element api="M:NetEti.ApplicationControl.Abortable.UnsafeStart" />
        <element api="M:NetEti.ApplicationControl.Abortable.UnsafeStart(System.Object)" />
        <element api="M:NetEti.ApplicationControl.Abortable.ResetAbort" />
        <element api="M:NetEti.ApplicationControl.Abortable.Suspend" />
        <element api="M:NetEti.ApplicationControl.Abortable.Resume" />
        <element api="M:NetEti.ApplicationControl.Abortable.BeginCriticalRegion" />
        <element api="M:NetEti.ApplicationControl.Abortable.EndCriticalRegion" />
        <element api="M:NetEti.ApplicationControl.Abortable.BeginThreadAffinity" />
        <element api="M:NetEti.ApplicationControl.Abortable.EndThreadAffinity" />
        <element api="M:NetEti.ApplicationControl.Abortable.AllocateDataSlot" />
        <element api="M:NetEti.ApplicationControl.Abortable.AllocateNamedDataSlot(System.String)" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetNamedDataSlot(System.String)" />
        <element api="M:NetEti.ApplicationControl.Abortable.FreeNamedDataSlot(System.String)" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetData(System.LocalDataStoreSlot)" />
        <element api="M:NetEti.ApplicationControl.Abortable.SetData(System.LocalDataStoreSlot,System.Object)" />
        <element api="M:NetEti.ApplicationControl.Abortable.SetApartmentState(System.Threading.ApartmentState)" />
        <element api="M:NetEti.ApplicationControl.Abortable.TrySetApartmentState(System.Threading.ApartmentState)" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetCompressedStack" />
        <element api="M:NetEti.ApplicationControl.Abortable.SetCompressedStack(System.Threading.CompressedStack)" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetDomain" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetDomainID" />
        <element api="M:NetEti.ApplicationControl.Abortable.GetHashCode" />
        <element api="M:NetEti.ApplicationControl.Abortable.MemoryBarrier" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Byte@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Double@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int16@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int32@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int64@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.IntPtr@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Object@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.SByte@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Single@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt16@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt32@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt64@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UIntPtr@)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Byte@,System.Byte)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Double@,System.Double)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int16@,System.Int16)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int32@,System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int64@,System.Int64)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.IntPtr@,System.IntPtr)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Object@,System.Object)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.SByte@,System.SByte)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Single@,System.Single)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt16@,System.UInt16)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt32@,System.UInt32)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt64@,System.UInt64)" />
        <element api="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
        <element api="P:NetEti.ApplicationControl.Abortable.AbortableException" />
        <element api="P:NetEti.ApplicationControl.Abortable.ManagedThreadId" />
        <element api="P:NetEti.ApplicationControl.Abortable.IsAlive" />
        <element api="P:NetEti.ApplicationControl.Abortable.IsBackground" />
        <element api="P:NetEti.ApplicationControl.Abortable.IsThreadPoolThread" />
        <element api="P:NetEti.ApplicationControl.Abortable.Priority" />
        <element api="P:NetEti.ApplicationControl.Abortable.ThreadState" />
        <element api="P:NetEti.ApplicationControl.Abortable.CurrentCulture" />
        <element api="P:NetEti.ApplicationControl.Abortable.CurrentUICulture" />
        <element api="P:NetEti.ApplicationControl.Abortable.CurrentPrincipal" />
        <element api="P:NetEti.ApplicationControl.Abortable.CurrentThread" />
        <element api="P:NetEti.ApplicationControl.Abortable.ExecutionContext" />
        <element api="P:NetEti.ApplicationControl.Abortable.Name" />
        <element api="P:NetEti.ApplicationControl.Abortable.ApartmentState" />
      </elements>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ParameterizedThreadStart)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="start">
          <type api="T:System.Threading.ParameterizedThreadStart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="start">
          <type api="T:System.Threading.ParameterizedThreadStart" ref="true" />
        </parameter>
        <parameter name="maxStackSize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ThreadStart)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="start">
          <type api="T:System.Threading.ThreadStart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.#ctor(System.Threading.ThreadStart,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="start">
          <type api="T:System.Threading.ThreadStart" ref="true" />
        </parameter>
        <parameter name="maxStackSize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Abort">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Abort(System.Object)">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stateInfo">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.AbortableException">
      <apidata name="AbortableException" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AbortableException" />
      <setter name="set_AbortableException" />
      <returns>
        <type nullable="true" api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.AllocateDataSlot">
      <apidata name="AllocateDataSlot" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.LocalDataStoreSlot" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.AllocateNamedDataSlot(System.String)">
      <apidata name="AllocateNamedDataSlot" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.LocalDataStoreSlot" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.ApartmentState">
      <apidata name="ApartmentState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ApartmentState" />
      <returns>
        <type api="T:System.Threading.ApartmentState" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>The ApartmentState property has been deprecated. Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.BeginCriticalRegion">
      <apidata name="BeginCriticalRegion" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.BeginThreadAffinity">
      <apidata name="BeginThreadAffinity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.CurrentCulture">
      <apidata name="CurrentCulture" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CurrentCulture" />
      <setter name="set_CurrentCulture" />
      <returns>
        <type api="T:System.Globalization.CultureInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.CurrentPrincipal">
      <apidata name="CurrentPrincipal" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CurrentPrincipal" />
      <setter name="set_CurrentPrincipal" />
      <returns>
        <type nullable="true" api="T:System.Security.Principal.IPrincipal" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.CurrentThread">
      <apidata name="CurrentThread" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CurrentThread" />
      <returns>
        <type api="T:System.Threading.Thread" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.CurrentUICulture">
      <apidata name="CurrentUICulture" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CurrentUICulture" />
      <setter name="set_CurrentUICulture" />
      <returns>
        <type api="T:System.Globalization.CultureInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.DisableComObjectEagerCleanup">
      <apidata name="DisableComObjectEagerCleanup" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.EndCriticalRegion">
      <apidata name="EndCriticalRegion" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.EndThreadAffinity">
      <apidata name="EndThreadAffinity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.ExecutionContext">
      <apidata name="ExecutionContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ExecutionContext" />
      <returns>
        <type nullable="true" api="T:System.Threading.ExecutionContext" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.FreeNamedDataSlot(System.String)">
      <apidata name="FreeNamedDataSlot" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetApartmentState">
      <apidata name="GetApartmentState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.ApartmentState" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetCompressedStack">
      <apidata name="GetCompressedStack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.CompressedStack" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetCurrentProcessorId">
      <apidata name="GetCurrentProcessorId" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetData(System.LocalDataStoreSlot)">
      <apidata name="GetData" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="slot">
          <type api="T:System.LocalDataStoreSlot" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetDomain">
      <apidata name="GetDomain" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.AppDomain" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetDomainID">
      <apidata name="GetDomainID" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetNamedDataSlot(System.String)">
      <apidata name="GetNamedDataSlot" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.LocalDataStoreSlot" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.GetThread">
      <apidata name="GetThread" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:System.Threading.Thread" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Interrupt">
      <apidata name="Interrupt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.IsAlive">
      <apidata name="IsAlive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsAlive" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.IsBackground">
      <apidata name="IsBackground" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsBackground" />
      <setter name="set_IsBackground" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.IsThreadPoolThread">
      <apidata name="IsThreadPoolThread" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsThreadPoolThread" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="millisecondsTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Join(System.TimeSpan)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.ManagedThreadId">
      <apidata name="ManagedThreadId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ManagedThreadId" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.MemoryBarrier">
      <apidata name="MemoryBarrier" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.Priority">
      <apidata name="Priority" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Priority" />
      <setter name="set_Priority" />
      <returns>
        <type api="T:System.Threading.ThreadPriority" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.ResetAbort">
      <apidata name="ResetAbort" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Resume">
      <apidata name="Resume" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Thread.Resume has been deprecated. Use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.SetApartmentState(System.Threading.ApartmentState)">
      <apidata name="SetApartmentState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="state">
          <type api="T:System.Threading.ApartmentState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.SetCompressedStack(System.Threading.CompressedStack)">
      <apidata name="SetCompressedStack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stack">
          <type api="T:System.Threading.CompressedStack" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.SetData(System.LocalDataStoreSlot,System.Object)">
      <apidata name="SetData" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="slot">
          <type api="T:System.LocalDataStoreSlot" ref="true" />
        </parameter>
        <parameter name="data">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Sleep(System.Int32)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="millisecondsTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Sleep(System.TimeSpan)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.SpinWait(System.Int32)">
      <apidata name="SpinWait" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="iterations">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Start(System.Object)">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Suspend">
      <apidata name="Suspend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Thread.Suspend has been deprecated. Use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:NetEti.ApplicationControl.Abortable.ThreadState">
      <apidata name="ThreadState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ThreadState" />
      <returns>
        <type api="T:System.Threading.ThreadState" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.TrySetApartmentState(System.Threading.ApartmentState)">
      <apidata name="TrySetApartmentState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="state">
          <type api="T:System.Threading.ApartmentState" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.UnsafeStart">
      <apidata name="UnsafeStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.UnsafeStart(System.Object)">
      <apidata name="UnsafeStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Byte@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Byte" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Byte" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Double@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Double" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int16@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int16" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int16" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int32@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int32" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Int64@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int64" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.IntPtr@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.IntPtr" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IntPtr" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Object@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type nullable="true" api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.SByte@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.SByte" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.SByte" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.Single@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Single" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt16@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt16" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.UInt16" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt32@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt32" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UInt64@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt64" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.UInt64" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileRead(System.UIntPtr@)">
      <apidata name="VolatileRead" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UIntPtr" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.UIntPtr" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Byte@,System.Byte)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Byte" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Byte" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Double@,System.Double)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Double" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Double" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int16@,System.Int16)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int16" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Int16" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int32@,System.Int32)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int32" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Int64@,System.Int64)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Int64" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.IntPtr" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.IntPtr" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Object@,System.Object)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type nullable="true" api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.SByte@,System.SByte)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.SByte" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.SByte" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.Single@,System.Single)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.Single" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt16@,System.UInt16)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt16" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.UInt16" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt32@,System.UInt32)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt32" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UInt64@,System.UInt64)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UInt64" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.UInt64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <apidata name="VolatileWrite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <referenceTo nullable="true">
            <type api="T:System.UIntPtr" ref="false" />
          </referenceTo>
        </parameter>
        <parameter name="value">
          <type api="T:System.UIntPtr" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Abortable.Yield">
      <apidata name="Yield" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Abortable" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IFlushable">
      <apidata name="IFlushable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IFlushable.Flush" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IFlushable.Flush">
      <apidata name="Flush" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IInfoController">
      <apidata name="IInfoController" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)" />
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object)" />
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object)" />
        <element api="M:NetEti.ApplicationControl.IFlushable.Flush" />
        <element api="M:NetEti.ApplicationControl.IShowable.Show" />
        <element api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.IInfoSource.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IInfoPublisher">
      <apidata name="IInfoPublisher" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
      </implements>
      <implementors>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)" />
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object)" />
        <element api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object)" />
        <element api="M:NetEti.ApplicationControl.IFlushable.Flush" />
        <element api="M:NetEti.ApplicationControl.IShowable.Show" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerInfoType">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IInfoSource">
      <apidata name="IInfoSource" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.IInfoSource.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])">
      <apidata name="RegisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
        <parameter name="triggerInfoTypes">
          <arrayOf rank="1">
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])">
      <apidata name="RegisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
        <parameter name="classType">
          <type nullable="true" api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="triggerInfoTypes">
          <arrayOf rank="1">
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoSource.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)">
      <apidata name="UnregisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IInfoViewer">
      <apidata name="IInfoViewer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationControl.ViewerAsWrapper" ref="true" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IInfoViewer.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IInfoViewer.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
      <apidata name="HandleInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msgArgs">
          <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.InfoArgs">
      <apidata name="InfoArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationControl.InfoArgs.#ctor(System.Object,NetEti.ApplicationControl.InfoType,System.String)" />
        <element api="M:NetEti.ApplicationControl.InfoArgs.#ctor(System.Object,NetEti.ApplicationControl.InfoType,System.String,System.String)" />
        <element api="P:NetEti.ApplicationControl.InfoArgs.MessageObject" />
        <element api="P:NetEti.ApplicationControl.InfoArgs.LogLevel" />
        <element api="P:NetEti.ApplicationControl.InfoArgs.LogLevelText" />
        <element api="P:NetEti.ApplicationControl.InfoArgs.Timestamp" />
        <element api="P:NetEti.ApplicationControl.InfoArgs.ThreadInfos" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoArgs.#ctor(System.Object,NetEti.ApplicationControl.InfoType,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="messageInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="_LogLevel">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </parameter>
        <parameter name="_Timestamp">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoArgs.#ctor(System.Object,NetEti.ApplicationControl.InfoType,System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="messageInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="_LogLevel">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </parameter>
        <parameter name="_Timestamp">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="threadInfos">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.InfoArgs.LogLevel">
      <apidata name="LogLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LogLevel" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.InfoArgs.LogLevelText">
      <apidata name="LogLevelText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LogLevelText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.InfoArgs.MessageObject">
      <apidata name="MessageObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MessageObject" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.InfoArgs.ThreadInfos">
      <apidata name="ThreadInfos" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ThreadInfos" />
      <setter name="set_ThreadInfos" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.InfoArgs.Timestamp">
      <apidata name="Timestamp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Timestamp" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.InfoController">
      <apidata name="InfoController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationControl.InfoController.Dispose" />
        <element api="M:NetEti.ApplicationControl.InfoController.Dispose(System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.InfoController.Finalize" />
        <element api="M:NetEti.ApplicationControl.InfoController.GetInfoPublisher" />
        <element api="M:NetEti.ApplicationControl.InfoController.GetInfoSource" />
        <element api="M:NetEti.ApplicationControl.InfoController.GetInfoController" />
        <element api="M:NetEti.ApplicationControl.InfoController.Say(System.Object)" />
        <element api="M:NetEti.ApplicationControl.InfoController.FlushAll" />
        <element api="M:NetEti.ApplicationControl.InfoController.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)" />
        <element api="M:NetEti.ApplicationControl.InfoController.Publish(System.Object,System.Object)" />
        <element api="M:NetEti.ApplicationControl.InfoController.Publish(System.Object)" />
        <element api="M:NetEti.ApplicationControl.InfoController.Show" />
        <element api="M:NetEti.ApplicationControl.InfoController.Flush" />
        <element api="M:NetEti.ApplicationControl.InfoController.DisposeAll" />
        <element api="M:NetEti.ApplicationControl.InfoController.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.InfoController.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])" />
        <element api="M:NetEti.ApplicationControl.InfoController.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.DisposeAll">
      <apidata name="DisposeAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Flush">
      <apidata name="Flush" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:NetEti.ApplicationControl.IFlushable.Flush">
          <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.FlushAll">
      <apidata name="FlushAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.GetInfoController">
      <apidata name="GetInfoController" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.GetInfoPublisher">
      <apidata name="GetInfoPublisher" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.GetInfoSource">
      <apidata name="GetInfoSource" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Publish(System.Object)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object)">
          <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Publish(System.Object,System.Object)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object)">
          <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)">
      <apidata name="Publish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerInfoType">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoPublisher.Publish(System.Object,System.Object,NetEti.ApplicationControl.InfoType)">
          <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])">
      <apidata name="RegisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
        <parameter name="triggerInfoTypes">
          <arrayOf rank="1">
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,NetEti.ApplicationControl.InfoType[])">
          <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])">
      <apidata name="RegisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
        <parameter name="classType">
          <type nullable="true" api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="triggerInfoTypes">
          <arrayOf rank="1">
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoSource.RegisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer,System.Type,NetEti.ApplicationControl.InfoType[])">
          <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Say(System.Object)">
      <apidata name="Say" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.Show">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:NetEti.ApplicationControl.IShowable.Show">
          <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoController.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)">
      <apidata name="UnregisterInfoReceiver" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="viewer">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoSource.UnregisterInfoReceiver(NetEti.ApplicationControl.IInfoViewer)">
          <type api="T:NetEti.ApplicationControl.IInfoSource" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.InfoType">
      <apidata name="InfoType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:NetEti.ApplicationControl.InfoType.Statistics" />
        <element api="F:NetEti.ApplicationControl.InfoType.Debug" />
        <element api="F:NetEti.ApplicationControl.InfoType.Info" />
        <element api="F:NetEti.ApplicationControl.InfoType.Warn" />
        <element api="F:NetEti.ApplicationControl.InfoType.Milestone" />
        <element api="F:NetEti.ApplicationControl.InfoType.Error" />
        <element api="F:NetEti.ApplicationControl.InfoType.Exception" />
        <element api="F:NetEti.ApplicationControl.InfoType.NoRegex" />
        <element api="F:NetEti.ApplicationControl.InfoType.Nolog" />
        <element api="F:NetEti.ApplicationControl.InfoType.unknown" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Debug">
      <apidata name="Debug" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Error">
      <apidata name="Error" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Exception">
      <apidata name="Exception" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Info">
      <apidata name="Info" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Milestone">
      <apidata name="Milestone" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Nolog">
      <apidata name="Nolog" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.NoRegex">
      <apidata name="NoRegex" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>7</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Statistics">
      <apidata name="Statistics" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.unknown">
      <apidata name="unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>9</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoType.Warn">
      <apidata name="Warn" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.InfoTypes">
      <apidata name="InfoTypes" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:NetEti.ApplicationControl.InfoTypes.None" />
        <element api="F:NetEti.ApplicationControl.InfoTypes.All" />
        <element api="F:NetEti.ApplicationControl.InfoTypes.Serious" />
        <element api="F:NetEti.ApplicationControl.InfoTypes.Average" />
        <element api="F:NetEti.ApplicationControl.InfoTypes.Expected" />
        <element api="F:NetEti.ApplicationControl.InfoTypes.Unexpected" />
        <element api="M:NetEti.ApplicationControl.InfoTypes.Collection2InfoTypeArray(System.Collections.ObjectModel.ReadOnlyCollection{NetEti.ApplicationControl.InfoType})" />
        <element api="M:NetEti.ApplicationControl.InfoTypes.String2InfoTypeArray(System.String)" />
        <element api="M:NetEti.ApplicationControl.InfoTypes.String2InfoType(System.String)" />
        <element api="M:NetEti.ApplicationControl.InfoTypes.InfoTypeArray2String(NetEti.ApplicationControl.InfoType[])" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.All">
      <apidata name="All" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.Average">
      <apidata name="Average" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoTypes.Collection2InfoTypeArray(System.Collections.ObjectModel.ReadOnlyCollection{NetEti.ApplicationControl.InfoType})">
      <apidata name="Collection2InfoTypeArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="infoTypeCollection">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.Expected">
      <apidata name="Expected" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoTypes.InfoTypeArray2String(NetEti.ApplicationControl.InfoType[])">
      <apidata name="InfoTypeArray2String" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="ita">
          <arrayOf rank="1">
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.Serious">
      <apidata name="Serious" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoTypes.String2InfoType(System.String)">
      <apidata name="String2InfoType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="infoPipeInfo">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.InfoTypes.String2InfoTypeArray(System.String)">
      <apidata name="String2InfoTypeArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="infoPipeInfo">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.InfoTypes.Unexpected">
      <apidata name="Unexpected" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.InfoTypes" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.IShowable">
      <apidata name="IShowable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationControl.IInfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.IInfoPublisher" ref="true" />
        <type api="T:NetEti.ApplicationControl.InfoController" ref="true" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.ApplicationControl.IShowable.Show" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.IShowable.Show">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.Logger">
      <apidata name="Logger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationControl.Logger.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationControl.Logger.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)" />
        <element api="M:NetEti.ApplicationControl.Logger.WriteLog(System.String)" />
        <element api="M:NetEti.ApplicationControl.Logger.OrganizeLoggings(System.TimeSpan,System.Int32)" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor(System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor(System.String)" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor(System.String,System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor(System.Boolean,System.String)" />
        <element api="M:NetEti.ApplicationControl.Logger.#ctor(System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.Logger.Show" />
        <element api="P:NetEti.ApplicationControl.Logger.StandardIndent" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Dispose" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Dispose(System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Finalize" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Flush" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Log(System.String)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Stop" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.LogTargetInfo" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.IsTimerTriggered" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.LoggingTriggerCounter" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.MaxBufferLineCount" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.DebugArchiveMaxCount" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.DebugArchivingInterval" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.PlainMessage" />
      </elements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="plainMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor(System.Boolean,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="plainMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="regexFilter">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logFilePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor(System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logFilePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="plainMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.#ctor(System.String,System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logFilePathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="regexFilter">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="plainMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
      <apidata name="HandleInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationControl.LoggerBase.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
          <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msgArgs">
          <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoViewer.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.OrganizeLoggings(System.TimeSpan,System.Int32)">
      <apidata name="OrganizeLoggings" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationControl.LoggerBase.OrganizeLoggings(System.TimeSpan,System.Int32)">
          <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="debugArchivingInterval">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="debugArchiveMaxCount">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.Show">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationControl.LoggerBase.Show">
          <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:NetEti.ApplicationControl.IShowable.Show">
          <type api="T:NetEti.ApplicationControl.IShowable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Logger.StandardIndent">
      <apidata name="StandardIndent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StandardIndent" />
      <setter name="set_StandardIndent" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Logger.WriteLog(System.String)">
      <apidata name="WriteLog" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationControl.LoggerBase.WriteLog(System.String)">
          <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.LoggerBase">
      <apidata name="LoggerBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:NetEti.ApplicationControl.Logger" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationControl.LoggerBase.Dispose" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Dispose(System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Finalize" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Flush" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Log(System.String)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Show" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.Stop" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.#ctor(System.String)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.CutLog(System.String,System.Int64,System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.CutLog(System.String,System.Int64,System.Int64,System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.WriteLog(System.String)" />
        <element api="M:NetEti.ApplicationControl.LoggerBase.OrganizeLoggings(System.TimeSpan,System.Int32)" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.LogTargetInfo" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.IsTimerTriggered" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.LoggingTriggerCounter" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.MaxBufferLineCount" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.DebugArchiveMaxCount" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.DebugArchivingInterval" />
        <element api="P:NetEti.ApplicationControl.LoggerBase.PlainMessage" />
      </elements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logTargetInfo">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.CutLog(System.String,System.Int64,System.Boolean)">
      <apidata name="CutLog" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="logPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="countItemsToEnd">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countLines">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.CutLog(System.String,System.Int64,System.Int64,System.Boolean)">
      <apidata name="CutLog" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="logPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="countItemsFromStart">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countItemsToEnd">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="countLines">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.DebugArchiveMaxCount">
      <apidata name="DebugArchiveMaxCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugArchiveMaxCount" />
      <setter name="set_DebugArchiveMaxCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.DebugArchivingInterval">
      <apidata name="DebugArchivingInterval" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugArchivingInterval" />
      <setter name="set_DebugArchivingInterval" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Flush">
      <apidata name="Flush" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:NetEti.ApplicationControl.IFlushable.Flush">
          <type api="T:NetEti.ApplicationControl.IFlushable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
      <apidata name="HandleInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msgArgs">
          <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoViewer.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.IsTimerTriggered">
      <apidata name="IsTimerTriggered" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsTimerTriggered" />
      <setter name="set_IsTimerTriggered" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Log(System.String)">
      <apidata name="Log" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.LoggingTriggerCounter">
      <apidata name="LoggingTriggerCounter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LoggingTriggerCounter" />
      <setter name="set_LoggingTriggerCounter" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.LogTargetInfo">
      <apidata name="LogTargetInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogTargetInfo" />
      <setter name="set_LogTargetInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.MaxBufferLineCount">
      <apidata name="MaxBufferLineCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferLineCount" />
      <setter name="set_MaxBufferLineCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.OrganizeLoggings(System.TimeSpan,System.Int32)">
      <apidata name="OrganizeLoggings" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="debugArchivingInterval">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="debugArchiveMaxCount">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.LoggerBase.PlainMessage">
      <apidata name="PlainMessage" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PlainMessage" />
      <setter name="set_PlainMessage" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Show">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.LoggerBase.WriteLog(System.String)">
      <apidata name="WriteLog" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.LoggerBase" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.Messaging">
      <apidata name="Messaging" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:NetEti.ApplicationControl.Messaging.HWND_BROADCAST" />
        <element api="F:NetEti.ApplicationControl.Messaging.WM_SHOWME" />
        <element api="M:NetEti.ApplicationControl.Messaging.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
        <element api="M:NetEti.ApplicationControl.Messaging.RegisterWindowMessage(System.String)" />
      </elements>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.Messaging.HWND_BROADCAST">
      <apidata name="HWND_BROADCAST" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>65535</value>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Messaging" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Messaging.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <apidata name="PostMessage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="hwnd">
          <type api="T:System.IntPtr" ref="false" />
        </parameter>
        <parameter name="msg">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="wparam">
          <type api="T:System.IntPtr" ref="false" />
        </parameter>
        <parameter name="lparam">
          <type api="T:System.IntPtr" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Messaging" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Messaging.RegisterWindowMessage(System.String)">
      <apidata name="RegisterWindowMessage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Messaging" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.Messaging.WM_SHOWME">
      <apidata name="WM_SHOWME" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Messaging" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.ProcessWorker">
      <apidata name="ProcessWorker" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationControl.ProcessWorker.FinishChildProcesses(System.Diagnostics.Process,System.Int32)" />
        <element api="M:NetEti.ApplicationControl.ProcessWorker.ShowChildProcesses(System.Diagnostics.Process)" />
      </elements>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.ProcessWorker.FinishChildProcesses(System.Diagnostics.Process,System.Int32)">
      <apidata name="FinishChildProcesses" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="process">
          <type api="T:System.Diagnostics.Process" ref="true" />
        </parameter>
        <parameter name="countdown" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>3</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.ProcessWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.ProcessWorker.ShowChildProcesses(System.Diagnostics.Process)">
      <apidata name="ShowChildProcesses" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="process">
          <type api="T:System.Diagnostics.Process" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ProcessTools" module="NetEti.ProcessTools" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.ProcessWorker" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.Statistics">
      <apidata name="Statistics" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationControl.Statistics.Stop" />
        <element api="M:NetEti.ApplicationControl.Statistics.Inc(System.String)" />
        <element api="M:NetEti.ApplicationControl.Statistics.Reset(System.String)" />
        <element api="P:NetEti.ApplicationControl.Statistics.IsTimerTriggered" />
        <element api="P:NetEti.ApplicationControl.Statistics.LoggingTriggerCounter" />
        <element api="P:NetEti.ApplicationControl.Statistics.RegexFilter" />
      </elements>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Statistics.Inc(System.String)">
      <apidata name="Inc" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Statistics.IsTimerTriggered">
      <apidata name="IsTimerTriggered" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsTimerTriggered" />
      <setter name="set_IsTimerTriggered" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Statistics.LoggingTriggerCounter">
      <apidata name="LoggingTriggerCounter" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LoggingTriggerCounter" />
      <setter name="set_LoggingTriggerCounter" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.Statistics.RegexFilter">
      <apidata name="RegexFilter" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RegexFilter" />
      <setter name="set_RegexFilter" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Statistics.Reset(System.String)">
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.Statistics.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.Logging" module="NetEti.Logging" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.Statistics" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.TaskWorker">
      <apidata name="TaskWorker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationControl.TaskWorker.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationControl.TaskWorker.Dispose" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.Dispose(System.Boolean)" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.Finalize" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.HaltTask" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.ContinueTask" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.RunTask(System.Action{NetEti.ApplicationControl.TaskWorker})" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.RunTask(System.Action{NetEti.ApplicationControl.TaskWorker,System.Object},System.Object)" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.BreakTask" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.WaitForTask" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.OnTaskProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.OnTaskProgressFinished(System.Exception)" />
        <element api="M:NetEti.ApplicationControl.TaskWorker.#ctor" />
        <element api="P:NetEti.ApplicationControl.TaskWorker.WorkerStatus" />
        <element api="E:NetEti.ApplicationControl.TaskWorker.TaskProgressChanged" />
        <element api="E:NetEti.ApplicationControl.TaskWorker.TaskProgressFinished" />
      </elements>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.BreakTask">
      <apidata name="BreakTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.ContinueTask">
      <apidata name="ContinueTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.HaltTask">
      <apidata name="HaltTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.OnTaskProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="OnTaskProgressChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.OnTaskProgressFinished(System.Exception)">
      <apidata name="OnTaskProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="threadException">
          <type nullable="true" api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.RunTask(System.Action{NetEti.ApplicationControl.TaskWorker})">
      <apidata name="RunTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="worker">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.RunTask(System.Action{NetEti.ApplicationControl.TaskWorker,System.Object},System.Object)">
      <apidata name="RunTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="worker">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.ApplicationControl.TaskWorker.TaskProgressChanged">
      <apidata name="TaskProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_TaskProgressChanged" />
      <remover name="remove_TaskProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.ApplicationControl.TaskWorker.TaskProgressFinished">
      <apidata name="TaskProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_TaskProgressFinished" />
      <remover name="remove_TaskProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.RunWorkerCompletedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.RunWorkerCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.TaskWorker.WaitForTask">
      <apidata name="WaitForTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationControl.TaskWorker.WorkerStatus">
      <apidata name="WorkerStatus" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WorkerStatus" />
      <returns>
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorker" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.TaskWorkerStatus">
      <apidata name="TaskWorkerStatus" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:NetEti.ApplicationControl.TaskWorkerStatus.Ready" />
        <element api="F:NetEti.ApplicationControl.TaskWorkerStatus.Running" />
        <element api="F:NetEti.ApplicationControl.TaskWorkerStatus.Halted" />
      </elements>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.TaskWorkerStatus.Halted">
      <apidata name="Halted" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.TaskWorkerStatus.Ready">
      <apidata name="Ready" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationControl.TaskWorkerStatus.Running">
      <apidata name="Running" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="NetEti.TaskWorker" module="NetEti.TaskWorker" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.TaskWorkerStatus" ref="false" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationControl.ViewerAsWrapper">
      <apidata name="ViewerAsWrapper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationControl.ViewerAsWrapper.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)" />
        <element api="M:NetEti.ApplicationControl.ViewerAsWrapper.#ctor(System.EventHandler{NetEti.ApplicationControl.InfoArgs})" />
      </elements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.ViewerAsWrapper.#ctor(System.EventHandler{NetEti.ApplicationControl.InfoArgs})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="msgHandler">
          <type api="T:System.EventHandler`1" ref="true">
            <specialization>
              <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.ViewerAsWrapper" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationControl.ViewerAsWrapper.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
      <apidata name="HandleInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="msgArgs">
          <type api="T:NetEti.ApplicationControl.InfoArgs" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.ApplicationControl.IInfoViewer.HandleInfo(System.Object,NetEti.ApplicationControl.InfoArgs)">
          <type api="T:NetEti.ApplicationControl.IInfoViewer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.InfoController" module="NetEti.InfoController" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationControl" />
        <type api="T:NetEti.ApplicationControl.ViewerAsWrapper" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.ApplicationEnvironment">
      <apidata name="NetEti.ApplicationEnvironment" group="namespace" />
      <elements>
        <element api="T:NetEti.ApplicationEnvironment.AppEnvReader" />
        <element api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" />
        <element api="T:NetEti.ApplicationEnvironment.BasicAppSettings" />
        <element api="T:NetEti.ApplicationEnvironment.CommandLineAccess" />
        <element api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" />
        <element api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" />
        <element api="T:NetEti.ApplicationEnvironment.ClickOnceDeploymentException" />
        <element api="T:NetEti.ApplicationEnvironment.EnvAccess" />
        <element api="T:NetEti.ApplicationEnvironment.PropertyAccess" />
        <element api="T:NetEti.ApplicationEnvironment.RegistryRoot" />
        <element api="T:NetEti.ApplicationEnvironment.RegAccess" />
        <element api="T:NetEti.ApplicationEnvironment.SettingsAccess" />
      </elements>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.AppEnvReader">
      <apidata name="AppEnvReader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.AppEnvReader.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        <type api="T:NetEti.Globals.IGetValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetParametersSources" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.IsDefault(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetter(NetEti.Globals.IGetStringValue)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetterBefore(NetEti.Globals.IGetStringValue,NetEti.Globals.IGetStringValue)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetterAt(NetEti.Globals.IGetStringValue,System.Int32)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.UnregisterStringValueGetter(NetEti.Globals.IGetStringValue)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterKeyValue(System.String,System.Object)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.UnregisterKey(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValue``1(System.String,``0)" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValues``1(System.String,``0[])" />
        <element api="M:NetEti.ApplicationEnvironment.AppEnvReader.#ctor" />
        <element api="P:NetEti.ApplicationEnvironment.AppEnvReader.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.AppEnvReader.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.GetParametersSources">
      <apidata name="GetParametersSources" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.SortedDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValue``1(System.String,``0)">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValue``1(System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValue``1(System.String,``0)" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)">
          <type api="T:NetEti.Globals.IGetValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValues``1(System.String,``0[])">
      <apidata name="GetValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValues``1(System.String,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.AppEnvReader.GetValues``1(System.String,``0[])" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])">
          <type api="T:NetEti.Globals.IGetValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.IsDefault(System.String)">
      <apidata name="IsDefault" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterKeyValue(System.String,System.Object)">
      <apidata name="RegisterKeyValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetter(NetEti.Globals.IGetStringValue)">
      <apidata name="RegisterStringValueGetter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stringValueGetter">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetterAt(NetEti.Globals.IGetStringValue,System.Int32)">
      <apidata name="RegisterStringValueGetterAt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stringValueGetter">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.RegisterStringValueGetterBefore(NetEti.Globals.IGetStringValue,NetEti.Globals.IGetStringValue)">
      <apidata name="RegisterStringValueGetterBefore" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stringValueGetter">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
        <parameter name="anchor">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.UnregisterKey(System.String)">
      <apidata name="UnregisterKey" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppEnvReader.UnregisterStringValueGetter(NetEti.Globals.IGetStringValue)">
      <apidata name="UnregisterStringValueGetter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stringValueGetter">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.AppSettingsRegistry">
      <apidata name="AppSettingsRegistry" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.RegisterKeyValue(System.String,System.Object)" />
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.UnregisterKey(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.ContainsKey(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.GetValue(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.RememberParameterSource(System.String,System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.GetParametersSources" />
      </elements>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.ContainsKey(System.String)">
      <apidata name="ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.GetParametersSources">
      <apidata name="GetParametersSources" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.SortedDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.GetValue(System.String)">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.RegisterKeyValue(System.String,System.Object)">
      <apidata name="RegisterKeyValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.RememberParameterSource(System.String,System.String,System.String)">
      <apidata name="RememberParameterSource" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameterSource">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.AppSettingsRegistry.UnregisterKey(System.String)">
      <apidata name="UnregisterKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.AppEnvReader" module="NetEti.AppEnvReader" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.AppSettingsRegistry" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.BasicAppSettings">
      <apidata name="BasicAppSettings" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        <type api="T:NetEti.Globals.IGetValue" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValue``1(System.String,``0)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValues``1(System.String,``0[])" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.Dispose" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.Dispose(System.Boolean)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.Finalize" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetParametersSources" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetLoadedAssemblies" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.SetRegistryBasePath(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.LoadSettings" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.ReplaceWildcards(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.#ctor" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.DirectoryCreate(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.SetDefaultSQLDirectories" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUser" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserInfo" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserLoaded" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationRootPath" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.BreakAlwaysAllowed" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CheckVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ClickOnceDataDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ConnectionString" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CreateWorkingDirectoryIfNotExists" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DataSource" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchiveMaxCount" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchivingInterval" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFile" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFileRegexFilter" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugInfo" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugMode" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultDatabase" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlDataDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlLogDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpAppSettings" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpLoadedAssemblies" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.FrameworkVersionMajor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsClickOnce" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFrameworkAssembly" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFullFramework" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetCore" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetNative" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillChildProcessesOnApplicationExit" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillWorkingDirectoryAtShutdown" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Language" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.LogSql" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.MachineName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.MinProgrammVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersionMajor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessId" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Processor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessorCount" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProgrammVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.RegistryBasePath" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.SearchDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.SingleInstance" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFile" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFileRegexFilter" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.TempDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserDomainName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectoryCreated" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Description" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppEnvAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CommandLineAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.SettingsAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserSettingsAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.EnvAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IniAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.RegAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.PropertyAccessor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CreatedDirectoryRoot" />
      </elements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUser">
      <apidata name="AppConfigUser" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AppConfigUser" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserInfo">
      <apidata name="AppConfigUserInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AppConfigUserInfo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserLoaded">
      <apidata name="AppConfigUserLoaded" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AppConfigUserLoaded" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppEnvAccessor">
      <apidata name="AppEnvAccessor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AppEnvAccessor" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationName">
      <apidata name="ApplicationName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ApplicationName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationRootPath">
      <apidata name="ApplicationRootPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ApplicationRootPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.BreakAlwaysAllowed">
      <apidata name="BreakAlwaysAllowed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BreakAlwaysAllowed" />
      <setter name="set_BreakAlwaysAllowed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.CheckVersion">
      <apidata name="CheckVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckVersion" />
      <setter name="set_CheckVersion" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ClickOnceDataDirectory">
      <apidata name="ClickOnceDataDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClickOnceDataDirectory" />
      <setter name="set_ClickOnceDataDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.CommandLineAccessor">
      <apidata name="CommandLineAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CommandLineAccessor" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ConnectionString">
      <apidata name="ConnectionString" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConnectionString" />
      <setter name="set_ConnectionString" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.CreatedDirectoryRoot">
      <apidata name="CreatedDirectoryRoot" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CreatedDirectoryRoot" />
      <setter name="set_CreatedDirectoryRoot" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.CreateWorkingDirectoryIfNotExists">
      <apidata name="CreateWorkingDirectoryIfNotExists" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CreateWorkingDirectoryIfNotExists" />
      <setter name="set_CreateWorkingDirectoryIfNotExists" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DataSource">
      <apidata name="DataSource" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DataSource" />
      <setter name="set_DataSource" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchiveMaxCount">
      <apidata name="DebugArchiveMaxCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugArchiveMaxCount" />
      <setter name="set_DebugArchiveMaxCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchivingInterval">
      <apidata name="DebugArchivingInterval" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugArchivingInterval" />
      <setter name="set_DebugArchivingInterval" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFile">
      <apidata name="DebugFile" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugFile" />
      <setter name="set_DebugFile" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFileRegexFilter">
      <apidata name="DebugFileRegexFilter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugFileRegexFilter" />
      <setter name="set_DebugFileRegexFilter" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugInfo">
      <apidata name="DebugInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugInfo" />
      <setter name="set_DebugInfo" />
      <returns>
        <arrayOf nullable="true" rank="1">
          <type api="T:NetEti.ApplicationControl.InfoType" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugMode">
      <apidata name="DebugMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DebugMode" />
      <setter name="set_DebugMode" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultDatabase">
      <apidata name="DefaultDatabase" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DefaultDatabase" />
      <setter name="set_DefaultDatabase" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlDataDirectory">
      <apidata name="DefaultSqlDataDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultSqlDataDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlLogDirectory">
      <apidata name="DefaultSqlLogDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultSqlLogDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.DirectoryCreate(System.String)">
      <apidata name="DirectoryCreate" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="directoryToCreate">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpAppSettings">
      <apidata name="DumpAppSettings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DumpAppSettings" />
      <setter name="set_DumpAppSettings" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpLoadedAssemblies">
      <apidata name="DumpLoadedAssemblies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DumpLoadedAssemblies" />
      <setter name="set_DumpLoadedAssemblies" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.EnvAccessor">
      <apidata name="EnvAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvAccessor" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.FrameworkVersionMajor">
      <apidata name="FrameworkVersionMajor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FrameworkVersionMajor" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetLoadedAssemblies">
      <apidata name="GetLoadedAssemblies" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.SortedDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Reflection.Assembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetParametersSources">
      <apidata name="GetParametersSources" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.SortedDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValue``1(System.String,``0)">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValue``1(System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValue``1(System.String,``0)" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)">
          <type api="T:NetEti.Globals.IGetValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValues``1(System.String,``0[])">
      <apidata name="GetValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValues``1(System.String,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValues``1(System.String,``0[])" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])">
          <type api="T:NetEti.Globals.IGetValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IniAccessor">
      <apidata name="IniAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IniAccessor" />
      <returns>
        <type nullable="true" api="T:NetEti.FileTools.IniAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsClickOnce">
      <apidata name="IsClickOnce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsClickOnce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFrameworkAssembly">
      <apidata name="IsFrameworkAssembly" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsFrameworkAssembly" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFullFramework">
      <apidata name="IsFullFramework" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsFullFramework" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetCore">
      <apidata name="IsNetCore" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsNetCore" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetNative">
      <apidata name="IsNetNative" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsNetNative" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillChildProcessesOnApplicationExit">
      <apidata name="KillChildProcessesOnApplicationExit" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_KillChildProcessesOnApplicationExit" />
      <setter name="set_KillChildProcessesOnApplicationExit" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillWorkingDirectoryAtShutdown">
      <apidata name="KillWorkingDirectoryAtShutdown" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_KillWorkingDirectoryAtShutdown" />
      <setter name="set_KillWorkingDirectoryAtShutdown" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.Language">
      <apidata name="Language" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Language" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.LoadSettings">
      <apidata name="LoadSettings" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.LogSql">
      <apidata name="LogSql" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogSql" />
      <setter name="set_LogSql" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.MachineName">
      <apidata name="MachineName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MachineName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.MinProgrammVersion">
      <apidata name="MinProgrammVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_MinProgrammVersion" />
      <setter name="set_MinProgrammVersion" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersion">
      <apidata name="OSVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OSVersion" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersionMajor">
      <apidata name="OSVersionMajor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OSVersionMajor" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessId">
      <apidata name="ProcessId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProcessId" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.Processor">
      <apidata name="Processor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Processor" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessorCount">
      <apidata name="ProcessorCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProcessorCount" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProgrammVersion">
      <apidata name="ProgrammVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProgrammVersion" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.PropertyAccessor">
      <apidata name="PropertyAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PropertyAccessor" />
      <returns>
        <type nullable="true" api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.RegAccessor">
      <apidata name="RegAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RegAccessor" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.RegistryBasePath">
      <apidata name="RegistryBasePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RegistryBasePath" />
      <setter name="set_RegistryBasePath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.ReplaceWildcards(System.String)">
      <apidata name="ReplaceWildcards" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="inString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.SearchDirectory">
      <apidata name="SearchDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SearchDirectory" />
      <setter name="set_SearchDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.SetDefaultSQLDirectories">
      <apidata name="SetDefaultSQLDirectories" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.BasicAppSettings.SetRegistryBasePath(System.String)">
      <apidata name="SetRegistryBasePath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="registryBasePath">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.SettingsAccessor">
      <apidata name="SettingsAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SettingsAccessor" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.SingleInstance">
      <apidata name="SingleInstance" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SingleInstance" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFile">
      <apidata name="StatisticsFile" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StatisticsFile" />
      <setter name="set_StatisticsFile" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFileRegexFilter">
      <apidata name="StatisticsFileRegexFilter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StatisticsFileRegexFilter" />
      <setter name="set_StatisticsFileRegexFilter" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.TempDirectory">
      <apidata name="TempDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TempDirectory" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserDomainName">
      <apidata name="UserDomainName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_UserDomainName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserName">
      <apidata name="UserName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_UserName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserSettingsAccessor">
      <apidata name="UserSettingsAccessor" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_UserSettingsAccessor" />
      <returns>
        <type nullable="true" api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectory">
      <apidata name="WorkingDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WorkingDirectory" />
      <setter name="set_WorkingDirectory" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectoryCreated">
      <apidata name="WorkingDirectoryCreated" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WorkingDirectoryCreated" />
      <setter name="set_WorkingDirectoryCreated" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.BasicAppSettings" module="NetEti.BasicAppSettings" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.ClickOnceDeploymentException">
      <apidata name="ClickOnceDeploymentException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.ClickOnceDeploymentException.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.ClickOnceDeploymentException.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceDeploymentException" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.ClickOnceInfo">
      <apidata name="ClickOnceInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.ClickOnceInfo.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.ClickOnceInfo.#ctor" />
        <element api="M:NetEti.ApplicationEnvironment.ClickOnceInfo.GetLatestVersionInfo" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.BaseDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.TargetFrameworkName" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.IsNetworkDeployed" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.CurrentVersion" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdatedVersion" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdateLocation" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdatedApplicationFullName" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.TimeOfLastUpdateCheck" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ActivationUri" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.DataDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ActivationData" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ApplicationName" />
      </elements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.ClickOnceInfo.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ActivationData">
      <apidata name="ActivationData" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_ActivationData" />
      <setter name="set_ActivationData" />
      <returns>
        <arrayOf nullable="true" rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ActivationUri">
      <apidata name="ActivationUri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_ActivationUri" />
      <setter name="set_ActivationUri" />
      <returns>
        <type nullable="true" api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.ApplicationName">
      <apidata name="ApplicationName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_ApplicationName" />
      <setter name="set_ApplicationName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.BaseDirectory">
      <apidata name="BaseDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_BaseDirectory" />
      <setter name="set_BaseDirectory" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.CurrentVersion">
      <apidata name="CurrentVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_CurrentVersion" />
      <setter name="set_CurrentVersion" />
      <returns>
        <type api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.DataDirectory">
      <apidata name="DataDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_DataDirectory" />
      <setter name="set_DataDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.ClickOnceInfo.GetLatestVersionInfo">
      <apidata name="GetLatestVersionInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type nullable="true" api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.IsNetworkDeployed">
      <apidata name="IsNetworkDeployed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_IsNetworkDeployed" />
      <setter name="set_IsNetworkDeployed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.TargetFrameworkName">
      <apidata name="TargetFrameworkName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_TargetFrameworkName" />
      <setter name="set_TargetFrameworkName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.TimeOfLastUpdateCheck">
      <apidata name="TimeOfLastUpdateCheck" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_TimeOfLastUpdateCheck" />
      <setter name="set_TimeOfLastUpdateCheck" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdatedApplicationFullName">
      <apidata name="UpdatedApplicationFullName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_UpdatedApplicationFullName" />
      <setter name="set_UpdatedApplicationFullName" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdatedVersion">
      <apidata name="UpdatedVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_UpdatedVersion" />
      <setter name="set_UpdatedVersion" />
      <returns>
        <type nullable="true" api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceInfo.UpdateLocation">
      <apidata name="UpdateLocation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_UpdateLocation" />
      <setter name="set_UpdateLocation" />
      <returns>
        <type nullable="true" api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceInfo" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo">
      <apidata name="ClickOnceUpdateInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.#ctor" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.CurrentVersion" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.LatestVersion" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.MinimumVersion" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.IsUpdateAvailable" />
        <element api="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.IsMandatoryUpdate" />
      </elements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.CurrentVersion">
      <apidata name="CurrentVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_CurrentVersion" />
      <setter name="set_CurrentVersion" />
      <returns>
        <type nullable="true" api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.IsMandatoryUpdate">
      <apidata name="IsMandatoryUpdate" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsMandatoryUpdate" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.IsUpdateAvailable">
      <apidata name="IsUpdateAvailable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsUpdateAvailable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.LatestVersion">
      <apidata name="LatestVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_LatestVersion" />
      <setter name="set_LatestVersion" />
      <returns>
        <type nullable="true" api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo.MinimumVersion">
      <apidata name="MinimumVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" initOnly="true" />
      <getter name="get_MinimumVersion" />
      <setter name="set_MinimumVersion" />
      <returns>
        <type nullable="true" api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.ClickOnceUpdateInfo" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.CommandLineAccess">
      <apidata name="CommandLineAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.CommandLineAccess.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.CommandLineAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.CommandLineAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.CommandLineAccess.#ctor" />
        <element api="P:NetEti.ApplicationEnvironment.CommandLineAccess.Description" />
        <element api="P:NetEti.ApplicationEnvironment.CommandLineAccess.CommandLine" />
      </elements>
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.CommandLineAccess.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.CommandLineAccess.CommandLine">
      <apidata name="CommandLine" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CommandLine" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.CommandLineAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.CommandLineAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.CommandLineAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.CommandLineAccess" module="NetEti.CommandLineAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.EnvAccess">
      <apidata name="EnvAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.EnvAccess.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.EnvAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.EnvAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.EnvAccess.#ctor" />
        <element api="P:NetEti.ApplicationEnvironment.EnvAccess.ActivationData" />
        <element api="P:NetEti.ApplicationEnvironment.EnvAccess.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.EnvAccess.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.EnvAccess.ActivationData">
      <apidata name="ActivationData" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ActivationData" />
      <returns>
        <arrayOf nullable="true" rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.EnvAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.EnvAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.EnvAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.EnvAccess" module="NetEti.EnvAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.PropertyAccess">
      <apidata name="PropertyAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.PropertyAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.PropertyAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.PropertyAccess.GetValue``1(System.String,``0)" />
        <element api="M:NetEti.ApplicationEnvironment.PropertyAccess.#ctor(System.Object)" />
        <element api="P:NetEti.ApplicationEnvironment.PropertyAccess.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.PropertyAccess.#ctor(System.Object)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.PropertyAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.PropertyAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.PropertyAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.PropertyAccess.GetValue``1(System.String,``0)">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.PropertyAccess.GetValue``1(System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.ApplicationEnvironment.PropertyAccess.GetValue``1(System.String,``0)" />
      </returns>
      <containers>
        <library assembly="NetEti.PropertyAccess" module="NetEti.PropertyAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.RegAccess">
      <apidata name="RegAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.RegAccess.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.#ctor(NetEti.ApplicationEnvironment.RegistryRoot)" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.#ctor" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.SetRegistryBasePath(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.GetSubKeyNames(System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.RegAccess.GetSubValueNames(System.String)" />
        <element api="P:NetEti.ApplicationEnvironment.RegAccess.Description" />
        <element api="P:NetEti.ApplicationEnvironment.RegAccess.CurrentRegistryRoot" />
        <element api="P:NetEti.ApplicationEnvironment.RegAccess.RegistryBasePath" />
      </elements>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.#ctor(NetEti.ApplicationEnvironment.RegistryRoot)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initRegRoot">
          <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.RegAccess.CurrentRegistryRoot">
      <apidata name="CurrentRegistryRoot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CurrentRegistryRoot" />
      <setter name="set_CurrentRegistryRoot" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.RegAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.GetSubKeyNames(System.String)">
      <apidata name="GetSubKeyNames" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="keyString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.GetSubValueNames(System.String)">
      <apidata name="GetSubValueNames" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="keyString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.RegAccess.RegistryBasePath">
      <apidata name="RegistryBasePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RegistryBasePath" />
      <setter name="set_RegistryBasePath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.RegAccess.SetRegistryBasePath(System.String)">
      <apidata name="SetRegistryBasePath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="registryBasePath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.RegistryRoot">
      <apidata name="RegistryRoot" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyClassesRoot" />
        <element api="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyCurrentUser" />
        <element api="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyLocalMachine" />
        <element api="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyUsers" />
        <element api="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyCurrentConfig" />
      </elements>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyClassesRoot">
      <apidata name="HkeyClassesRoot" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyCurrentConfig">
      <apidata name="HkeyCurrentConfig" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyCurrentUser">
      <apidata name="HkeyCurrentUser" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyLocalMachine">
      <apidata name="HkeyLocalMachine" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ApplicationEnvironment.RegistryRoot.HkeyUsers">
      <apidata name="HkeyUsers" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="NetEti.RegAccess" module="NetEti.RegAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.RegistryRoot" ref="false" />
      </containers>
    </api>
    <api id="T:NetEti.ApplicationEnvironment.SettingsAccess">
      <apidata name="SettingsAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ApplicationEnvironment.SettingsAccess.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.ApplicationEnvironment.SettingsAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.SettingsAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.SettingsAccess.#ctor" />
        <element api="P:NetEti.ApplicationEnvironment.SettingsAccess.Settings" />
        <element api="P:NetEti.ApplicationEnvironment.SettingsAccess.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.SettingsAccess.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.SettingsAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.SettingsAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ApplicationEnvironment.SettingsAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ApplicationEnvironment.SettingsAccess.Settings">
      <apidata name="Settings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Settings" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type nullable="true" api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.SettingsAccess" module="NetEti.SettingsAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ApplicationEnvironment" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.CustomControls">
      <apidata name="NetEti.CustomControls" group="namespace" />
      <elements>
        <element api="T:NetEti.CustomControls.CustomProgressBar" />
        <element api="T:NetEti.CustomControls.VishnuHelpBrowser" />
        <element api="T:NetEti.CustomControls.SplashScreenMessage" />
        <element api="T:NetEti.CustomControls.SplashWindow" />
        <element api="T:NetEti.CustomControls.ZoomBox" />
      </elements>
    </api>
    <api id="T:NetEti.CustomControls.CustomProgressBar">
      <apidata name="CustomProgressBar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.CustomControls.CustomProgressBar.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="F:NetEti.CustomControls.CustomProgressBar.ValueProperty" />
        <element api="F:NetEti.CustomControls.CustomProgressBar.IsIndeterminateProperty" />
        <element api="F:NetEti.CustomControls.CustomProgressBar.IsGlowingProperty" />
        <element api="F:NetEti.CustomControls.CustomProgressBar.TextProperty" />
        <element api="M:NetEti.CustomControls.CustomProgressBar.#ctor" />
        <element api="M:NetEti.CustomControls.CustomProgressBar.InitializeComponent" />
        <element api="P:NetEti.CustomControls.CustomProgressBar.Value" />
        <element api="P:NetEti.CustomControls.CustomProgressBar.IsIndeterminate" />
        <element api="P:NetEti.CustomControls.CustomProgressBar.IsGlowing" />
        <element api="P:NetEti.CustomControls.CustomProgressBar.Text" />
      </elements>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.CustomProgressBar.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.CustomProgressBar.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.CustomProgressBar.IsGlowing">
      <apidata name="IsGlowing" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsGlowing" />
      <setter name="set_IsGlowing" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.CustomProgressBar.IsGlowingProperty">
      <apidata name="IsGlowingProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.CustomProgressBar.IsIndeterminate">
      <apidata name="IsIndeterminate" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsIndeterminate" />
      <setter name="set_IsIndeterminate" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.CustomProgressBar.IsIndeterminateProperty">
      <apidata name="IsIndeterminateProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.CustomProgressBar.Text">
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Text" />
      <setter name="set_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.CustomProgressBar.TextProperty">
      <apidata name="TextProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.CustomProgressBar.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.CustomProgressBar.ValueProperty">
      <apidata name="ValueProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.CustomProgressBar" module="NetEti.CustomProgressBar" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.CustomProgressBar" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.CustomControls.SplashScreenMessage">
      <apidata name="SplashScreenMessage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.CustomControls.SplashScreenMessage.#ctor(System.String)" />
        <element api="P:NetEti.CustomControls.SplashScreenMessage.Message" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashScreenMessage.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashScreenMessage" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.SplashScreenMessage.Message">
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashScreenMessage" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.CustomControls.SplashWindow">
      <apidata name="SplashWindow" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Window" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.CustomControls.SplashWindow.StartSplashWindow" />
        <element api="M:NetEti.CustomControls.SplashWindow.ShowMessage(System.String)" />
        <element api="M:NetEti.CustomControls.SplashWindow.ShowVersion(System.String)" />
        <element api="M:NetEti.CustomControls.SplashWindow.FinishAndClose" />
        <element api="M:NetEti.CustomControls.SplashWindow.InitializeComponent" />
        <element api="P:NetEti.CustomControls.SplashWindow.Version" />
        <element api="E:NetEti.CustomControls.SplashWindow.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashWindow.FinishAndClose">
      <apidata name="FinishAndClose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashWindow.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.CustomControls.SplashWindow.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
          <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashWindow.ShowMessage(System.String)">
      <apidata name="ShowMessage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashWindow.ShowVersion(System.String)">
      <apidata name="ShowVersion" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="version">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.SplashWindow.StartSplashWindow">
      <apidata name="StartSplashWindow" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.SplashWindow.Version">
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.SplashWindow" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.CustomControls.VishnuHelpBrowser">
      <apidata name="VishnuHelpBrowser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.CustomControls.VishnuHelpBrowser.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Forms.Form" ref="true" />
          <type api="T:System.Windows.Forms.ContainerControl" ref="true" />
          <type api="T:System.Windows.Forms.ScrollableControl" ref="true" />
          <type api="T:System.Windows.Forms.Control" ref="true" />
          <type api="T:System.ComponentModel.Component" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.CustomControls.VishnuHelpBrowser.#ctor" />
        <element api="M:NetEti.CustomControls.VishnuHelpBrowser.#ctor(System.String)" />
        <element api="M:NetEti.CustomControls.VishnuHelpBrowser.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="VishnuHelpBrowser" module="VishnuHelpBrowser" kind="WindowsApplication" />
        <namespace api="N:NetEti.CustomControls" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.VishnuHelpBrowser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="VishnuHelpBrowser" module="VishnuHelpBrowser" kind="WindowsApplication" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.VishnuHelpBrowser" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.VishnuHelpBrowser.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="webUrlString">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="VishnuHelpBrowser" module="VishnuHelpBrowser" kind="WindowsApplication" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.VishnuHelpBrowser" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.VishnuHelpBrowser.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Windows.Forms.Form.Dispose(System.Boolean)">
          <type api="T:System.Windows.Forms.Form" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="VishnuHelpBrowser" module="VishnuHelpBrowser" kind="WindowsApplication" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.VishnuHelpBrowser" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.CustomControls.ZoomBox">
      <apidata name="ZoomBox" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.CustomControls.ZoomBox.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="F:NetEti.CustomControls.ZoomBox.HorizontalScrollBarVisibilityProperty" />
        <element api="F:NetEti.CustomControls.ZoomBox.VerticalScrollBarVisibilityProperty" />
        <element api="M:NetEti.CustomControls.ZoomBox.GetScale" />
        <element api="M:NetEti.CustomControls.ZoomBox.PresetScale(System.Windows.Media.ScaleTransform)" />
        <element api="M:NetEti.CustomControls.ZoomBox.SetScale(System.Double,System.Double)" />
        <element api="M:NetEti.CustomControls.ZoomBox.#ctor" />
        <element api="M:NetEti.CustomControls.ZoomBox.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)" />
        <element api="M:NetEti.CustomControls.ZoomBox.Dispose(System.Boolean)" />
        <element api="M:NetEti.CustomControls.ZoomBox.Dispose" />
        <element api="P:NetEti.CustomControls.ZoomBox.HorizontalScrollBarVisibility" />
        <element api="P:NetEti.CustomControls.ZoomBox.VerticalScrollBarVisibility" />
        <element api="P:NetEti.CustomControls.ZoomBox.MinimalScaleFactor" />
        <element api="P:NetEti.CustomControls.ZoomBox.HorizontalScroll" />
        <element api="P:NetEti.CustomControls.ZoomBox.VerticalScroll" />
        <element api="P:NetEti.CustomControls.ZoomBox.IsHorizontalScrollbarVisible" />
        <element api="P:NetEti.CustomControls.ZoomBox.IsVerticalScrollbarVisible" />
      </elements>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)">
      <apidata name="FindFirstVisualParentOfType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.CustomControls.ZoomBox.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.GetScale">
      <apidata name="GetScale" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Windows.Media.ScaleTransform" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.HorizontalScroll">
      <apidata name="HorizontalScroll" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HorizontalScroll" />
      <setter name="set_HorizontalScroll" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.HorizontalScrollBarVisibility">
      <apidata name="HorizontalScrollBarVisibility" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HorizontalScrollBarVisibility" />
      <setter name="set_HorizontalScrollBarVisibility" />
      <returns>
        <type api="T:System.Windows.Controls.ScrollBarVisibility" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.ZoomBox.HorizontalScrollBarVisibilityProperty">
      <apidata name="HorizontalScrollBarVisibilityProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.IsHorizontalScrollbarVisible">
      <apidata name="IsHorizontalScrollbarVisible" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsHorizontalScrollbarVisible" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.IsVerticalScrollbarVisible">
      <apidata name="IsVerticalScrollbarVisible" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsVerticalScrollbarVisible" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.MinimalScaleFactor">
      <apidata name="MinimalScaleFactor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MinimalScaleFactor" />
      <setter name="set_MinimalScaleFactor" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.PresetScale(System.Windows.Media.ScaleTransform)">
      <apidata name="PresetScale" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="presetScaleTransform">
          <type api="T:System.Windows.Media.ScaleTransform" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.CustomControls.ZoomBox.SetScale(System.Double,System.Double)">
      <apidata name="SetScale" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newScaleX">
          <type api="T:System.Double" ref="false" />
        </parameter>
        <parameter name="newScaleY">
          <type api="T:System.Double" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.VerticalScroll">
      <apidata name="VerticalScroll" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_VerticalScroll" />
      <setter name="set_VerticalScroll" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.CustomControls.ZoomBox.VerticalScrollBarVisibility">
      <apidata name="VerticalScrollBarVisibility" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_VerticalScrollBarVisibility" />
      <setter name="set_VerticalScrollBarVisibility" />
      <returns>
        <type api="T:System.Windows.Controls.ScrollBarVisibility" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.CustomControls.ZoomBox.VerticalScrollBarVisibilityProperty">
      <apidata name="VerticalScrollBarVisibilityProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZoomBox" module="NetEti.ZoomBox" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.CustomControls" />
        <type api="T:NetEti.CustomControls.ZoomBox" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.ExpressionParser">
      <apidata name="NetEti.ExpressionParser" group="namespace" />
      <elements>
        <element api="T:NetEti.ExpressionParser.ArithmeticParser" />
        <element api="T:NetEti.ExpressionParser.BooleanParser" />
        <element api="T:NetEti.ExpressionParser.SyntaxElement" />
        <element api="T:NetEti.ExpressionParser.ExpressionParser" />
        <element api="T:NetEti.ExpressionParser.LogicalParser" />
        <element api="T:NetEti.ExpressionParser.SyntaxTree" />
        <element api="T:NetEti.ExpressionParser.TresholdParser" />
      </elements>
    </api>
    <api id="T:NetEti.ExpressionParser.ArithmeticParser">
      <apidata name="ArithmeticParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ExpressionParser.ArithmeticParser.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.ArithmeticParser.#ctor" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Token" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Operators" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.MetaRules" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.ArithmeticParser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ArithmeticParser" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.BooleanParser">
      <apidata name="BooleanParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ExpressionParser.BooleanParser.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:NetEti.ExpressionParser.LogicalParser" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.BooleanParser.#ctor" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Token" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Operators" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.MetaRules" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.BooleanParser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.BooleanParser" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.ExpressionParser">
      <apidata name="ExpressionParser" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:NetEti.ExpressionParser.ArithmeticParser" ref="true" />
          <type api="T:NetEti.ExpressionParser.BooleanParser" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.#ctor" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Token" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Operators" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.MetaRules" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.ExpressionParser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString">
      <apidata name="ExpressionString" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ExpressionString" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)">
      <apidata name="GetOperands" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.ExpressionParser.MetaRules">
      <apidata name="MetaRules" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MetaRules" />
      <setter name="set_MetaRules" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority">
      <apidata name="OperatorPriority" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OperatorPriority" />
      <setter name="set_OperatorPriority" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.ExpressionParser.Operators">
      <apidata name="Operators" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Operators" />
      <setter name="set_Operators" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)">
      <apidata name="Parse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expr">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.ExpressionParser.Token">
      <apidata name="Token" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Token" />
      <setter name="set_Token" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.LogicalParser">
      <apidata name="LogicalParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ExpressionParser.LogicalParser.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.ExpressionParser.BooleanParser" ref="true" />
          <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:NetEti.ExpressionParser.TresholdParser" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.LogicalParser.#ctor" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Token" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Operators" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.MetaRules" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.LogicalParser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.LogicalParser" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.SyntaxElement">
      <apidata name="SyntaxElement" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:NetEti.ExpressionParser.SyntaxElement.NONE" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.GROUP" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.UNGROUP" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.OPERATOR" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.LEFT" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.RIGHT" />
        <element api="F:NetEti.ExpressionParser.SyntaxElement.STRUCT" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.GROUP">
      <apidata name="GROUP" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.LEFT">
      <apidata name="LEFT" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.NONE">
      <apidata name="NONE" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.OPERATOR">
      <apidata name="OPERATOR" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.RIGHT">
      <apidata name="RIGHT" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.STRUCT">
      <apidata name="STRUCT" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="F:NetEti.ExpressionParser.SyntaxElement.UNGROUP">
      <apidata name="UNGROUP" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.SyntaxTree">
      <apidata name="SyntaxTree" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.SyntaxTree.Parse" />
        <element api="M:NetEti.ExpressionParser.SyntaxTree.Show(System.String)" />
        <element api="M:NetEti.ExpressionParser.SyntaxTree.ShowFlat" />
        <element api="P:NetEti.ExpressionParser.SyntaxTree.NodeName" />
        <element api="P:NetEti.ExpressionParser.SyntaxTree.NodeType" />
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.SyntaxTree.NodeName">
      <apidata name="NodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeName" />
      <setter name="set_NodeName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.ExpressionParser.SyntaxTree.NodeType">
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:NetEti.ExpressionParser.SyntaxElement" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.SyntaxTree.Parse">
      <apidata name="Parse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.SyntaxTree.Show(System.String)">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="indent">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.SyntaxTree.ShowFlat">
      <apidata name="ShowFlat" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ExpressionParser.TresholdParser">
      <apidata name="TresholdParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ExpressionParser.TresholdParser.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.ExpressionParser.LogicalParser" ref="true" />
          <type api="T:NetEti.ExpressionParser.BooleanParser" ref="true" />
          <type api="T:NetEti.ExpressionParser.ExpressionParser" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ExpressionParser.TresholdParser.#ctor" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.Parse(System.String)" />
        <element api="M:NetEti.ExpressionParser.ExpressionParser.GetOperands(System.String)" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Token" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.Operators" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.OperatorPriority" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.MetaRules" />
        <element api="P:NetEti.ExpressionParser.ExpressionParser.ExpressionString" />
      </elements>
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
      </containers>
    </api>
    <api id="M:NetEti.ExpressionParser.TresholdParser.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ExpressionParser" module="NetEti.ExpressionParser" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ExpressionParser" />
        <type api="T:NetEti.ExpressionParser.TresholdParser" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.FileTools">
      <apidata name="NetEti.FileTools" group="namespace" />
      <elements>
        <element api="T:NetEti.FileTools.IniAccess" />
        <element api="T:NetEti.FileTools.EditorCaller" />
        <element api="T:NetEti.FileTools.XmlAccess" />
      </elements>
    </api>
    <api id="T:NetEti.FileTools.EditorCaller">
      <apidata name="EditorCaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.EditorCaller.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.EditorCaller.Edit(System.String,System.Collections.Generic.List{System.String})" />
        <element api="M:NetEti.FileTools.EditorCaller.GetTempLogPath" />
        <element api="M:NetEti.FileTools.EditorCaller.#ctor" />
      </elements>
      <containers>
        <library assembly="NetEti.QuickEdit" module="NetEti.QuickEdit" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.EditorCaller.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.QuickEdit" module="NetEti.QuickEdit" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.EditorCaller" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.EditorCaller.Edit(System.String,System.Collections.Generic.List{System.String})">
      <apidata name="Edit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="lines">
          <type nullable="true" api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.QuickEdit" module="NetEti.QuickEdit" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.EditorCaller" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.EditorCaller.GetTempLogPath">
      <apidata name="GetTempLogPath" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.QuickEdit" module="NetEti.QuickEdit" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.EditorCaller" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.IniAccess">
      <apidata name="IniAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.FileTools.IniAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.FileTools.IniAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.FileTools.IniAccess.#ctor(System.String)" />
        <element api="M:NetEti.FileTools.IniAccess.ReadSetting(System.String,System.String,System.String)" />
        <element api="P:NetEti.FileTools.IniAccess.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.IniAccess.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="filePath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.IniAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.IniAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.IniAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.IniAccess.ReadSetting(System.String,System.String,System.String)">
      <apidata name="ReadSetting" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="section">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="entry">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.IniAccess" module="NetEti.IniAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.XmlAccess">
      <apidata name="XmlAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.FileTools.XmlAccess.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.FileTools.XmlAccess.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.FileTools.XmlAccess.#ctor(System.String)" />
        <element api="P:NetEti.FileTools.XmlAccess.Settings" />
        <element api="P:NetEti.FileTools.XmlAccess.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.XmlAccess.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="xmlDocumentPathName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.XmlAccess.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:NetEti.Globals.IGetStringValue.Description">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.XmlAccess.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.XmlAccess.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.XmlAccess.Settings">
      <apidata name="Settings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Settings" />
      <returns>
        <type nullable="true" api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type nullable="true" api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.XMLAccess" module="NetEti.XMLAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.FileTools.Zip">
      <apidata name="NetEti.FileTools.Zip" group="namespace" />
      <elements>
        <element api="T:NetEti.FileTools.Zip.ICSharpWorker" />
        <element api="T:NetEti.FileTools.Zip.MSCompressionWorker" />
        <element api="T:NetEti.FileTools.Zip.SevenZipWorker" />
        <element api="T:NetEti.FileTools.Zip.StaticZipHelpers" />
        <element api="T:NetEti.FileTools.Zip.ZipAccess" />
        <element api="T:NetEti.FileTools.Zip.ZippedFileInfo" />
      </elements>
    </api>
    <api id="T:NetEti.FileTools.Zip.ICSharpWorker">
      <apidata name="ICSharpWorker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.ICSharpWorker.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.IsZip(System.String)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.GetZipEntryList(System.String,System.String)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.Abort" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.IcsUnzipFirstDumpToFile(System.String,System.String,System.Int32)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.IcsUnzipFirstDumpToFile(System.String)" />
        <element api="M:NetEti.FileTools.Zip.ICSharpWorker.#ctor" />
        <element api="E:NetEti.FileTools.Zip.ICSharpWorker.ZipProgressChanged" />
        <element api="E:NetEti.FileTools.Zip.ICSharpWorker.ZipProgressFinished" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.Abort">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.GetZipEntryList(System.String,System.String)">
      <apidata name="GetZipEntryList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.IcsUnzipFirstDumpToFile(System.String)">
      <apidata name="IcsUnzipFirstDumpToFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.IcsUnzipFirstDumpToFile(System.String,System.String,System.Int32)">
      <apidata name="IcsUnzipFirstDumpToFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="newFilePath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="maxBytes">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.IsZip(System.String)">
      <apidata name="IsZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)">
      <apidata name="UnzipAllArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipsFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="moveZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="moveDir">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)">
      <apidata name="UnZipArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="UnZipArchiveFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)">
      <apidata name="ZipDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="inputFolderPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ICSharpWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="ZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="commonRootPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.ICSharpWorker.ZipProgressChanged">
      <apidata name="ZipProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressChanged" />
      <remover name="remove_ZipProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.ICSharpWorker.ZipProgressFinished">
      <apidata name="ZipProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressFinished" />
      <remover name="remove_ZipProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ICSharpWorker" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.Zip.MSCompressionWorker">
      <apidata name="MSCompressionWorker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.MSCompressionWorker.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.IsZip(System.String)" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.GetZipEntryList(System.String,System.String)" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.Abort" />
        <element api="M:NetEti.FileTools.Zip.MSCompressionWorker.#ctor" />
        <element api="E:NetEti.FileTools.Zip.MSCompressionWorker.ZipProgressChanged" />
        <element api="E:NetEti.FileTools.Zip.MSCompressionWorker.ZipProgressFinished" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.Abort">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.GetZipEntryList(System.String,System.String)">
      <apidata name="GetZipEntryList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.IsZip(System.String)">
      <apidata name="IsZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)">
      <apidata name="UnzipAllArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipsFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="moveZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="moveDir">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)">
      <apidata name="UnZipArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="UnZipArchiveFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes" optional="true">
          <arrayOf nullable="true" rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)">
      <apidata name="ZipDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="inputFolderPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.MSCompressionWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="ZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="commonRootPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.MSCompressionWorker.ZipProgressChanged">
      <apidata name="ZipProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressChanged" />
      <remover name="remove_ZipProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.MSCompressionWorker.ZipProgressFinished">
      <apidata name="ZipProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressFinished" />
      <remover name="remove_ZipProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.MSCompressionWorker" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.Zip.SevenZipWorker">
      <apidata name="SevenZipWorker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.SevenZipWorker.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.#ctor" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.IsZip(System.String)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.IsZip(System.String,System.String)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.GetZipEntryList(System.String,System.String)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.Abort" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.SevenZipDirectoryAtOnce(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.SevenZipWorker.SevenUnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)" />
        <element api="E:NetEti.FileTools.Zip.SevenZipWorker.ZipProgressChanged" />
        <element api="E:NetEti.FileTools.Zip.SevenZipWorker.ZipProgressFinished" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.Abort">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.GetZipEntryList(System.String,System.String)">
      <apidata name="GetZipEntryList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password" optional="true">
          <type nullable="true" api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.IsZip(System.String)">
      <apidata name="IsZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.IsZip(System.String,System.String)">
      <apidata name="IsZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password" optional="true">
          <type nullable="true" api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.SevenUnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)">
      <apidata name="SevenUnzipAllArchives" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="zipsFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="moveZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="moveDir">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.SevenZipDirectoryAtOnce(System.String,System.String,System.String,System.Boolean)">
      <apidata name="SevenZipDirectoryAtOnce" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputFolderPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)">
      <apidata name="UnzipAllArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipsFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="moveZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="moveDir">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.UnZipArchive(System.String,System.String,System.String,System.Boolean)">
      <apidata name="UnZipArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="UnZipArchiveFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes" optional="true">
          <arrayOf nullable="true" rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.ZipDirectory(System.String,System.String,System.String,System.Boolean)">
      <apidata name="ZipDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="inputFolderPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="zipPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.SevenZipWorker.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="ZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="commonRootPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.SevenZipWorker.ZipProgressChanged">
      <apidata name="ZipProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressChanged" />
      <remover name="remove_ZipProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.SevenZipWorker.ZipProgressFinished">
      <apidata name="ZipProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressFinished" />
      <remover name="remove_ZipProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.SevenZipWorker" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.Zip.StaticZipHelpers">
      <apidata name="StaticZipHelpers" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.StaticZipHelpers.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.Zip.StaticZipHelpers.GetZipEntryFilePathes(System.Collections.Generic.List{NetEti.FileTools.Zip.ZippedFileInfo})" />
        <element api="M:NetEti.FileTools.Zip.StaticZipHelpers.ConvertFromDateTimeOffset(System.DateTimeOffset)" />
        <element api="M:NetEti.FileTools.Zip.StaticZipHelpers.GenerateFileList(System.String,System.Int64@)" />
        <element api="M:NetEti.FileTools.Zip.StaticZipHelpers.GenerateFileListIntern(System.String,System.Int64@)" />
        <element api="M:NetEti.FileTools.Zip.StaticZipHelpers.#ctor" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.StaticZipHelpers.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.StaticZipHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.StaticZipHelpers.ConvertFromDateTimeOffset(System.DateTimeOffset)">
      <apidata name="ConvertFromDateTimeOffset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dateTime">
          <type api="T:System.DateTimeOffset" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.StaticZipHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.StaticZipHelpers.GenerateFileList(System.String,System.Int64@)">
      <apidata name="GenerateFileList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="rootDir">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="allBytes" out="true">
          <referenceTo>
            <type api="T:System.Int64" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.StaticZipHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.StaticZipHelpers.GenerateFileListIntern(System.String,System.Int64@)">
      <apidata name="GenerateFileListIntern" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="rootDir">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="allBytes">
          <referenceTo>
            <type api="T:System.Int64" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.StaticZipHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.StaticZipHelpers.GetZipEntryFilePathes(System.Collections.Generic.List{NetEti.FileTools.Zip.ZippedFileInfo})">
      <apidata name="GetZipEntryFilePathes" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="infos">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.StaticZipHelpers" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.Zip.ZipAccess">
      <apidata name="ZipAccess" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.ZipAccess.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.FileTools.Zip.ZipAccess.Dispose" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.dispose(System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.Finalize" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.IsZip(System.String)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.GetZipEntryList(System.String,System.String)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.UnZipArchive(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.ZipDirectory(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.Abort" />
        <element api="M:NetEti.FileTools.Zip.ZipAccess.#ctor" />
        <element api="E:NetEti.FileTools.Zip.ZipAccess.ZipProgressChanged" />
        <element api="E:NetEti.FileTools.Zip.ZipAccess.ZipProgressFinished" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.Abort">
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.dispose(System.Boolean)">
      <apidata name="dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.GetZipEntryList(System.String,System.String)">
      <apidata name="GetZipEntryList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.IsZip(System.String)">
      <apidata name="IsZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.UnzipAllArchives(System.String,System.String,System.String,System.Boolean,System.String)">
      <apidata name="UnzipAllArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipsFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="moveZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="moveDir">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.UnZipArchive(System.String,System.String,System.String,System.Boolean)">
      <apidata name="UnZipArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.UnZipArchiveFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="UnZipArchiveFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="outputFolder">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="deleteZipFile">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.ZipDirectory(System.String,System.String,System.String,System.Boolean)">
      <apidata name="ZipDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="inputFolderPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZipAccess.ZipFiles(System.String,System.String,System.String,System.Boolean,System.String[])">
      <apidata name="ZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="zipPathAndFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="commonRootPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="packRootAsDir">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="filePathes">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.ZipAccess.ZipProgressChanged">
      <apidata name="ZipProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressChanged" />
      <remover name="remove_ZipProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.FileTools.Zip.ZipAccess.ZipProgressFinished">
      <apidata name="ZipProgressFinished" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ZipProgressFinished" />
      <remover name="remove_ZipProgressFinished" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZipAccess" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.FileTools.Zip.ZippedFileInfo">
      <apidata name="ZippedFileInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.FileTools.Zip.ZippedFileInfo.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.FileTools.Zip.ZippedFileInfo.ToString" />
        <element api="M:NetEti.FileTools.Zip.ZippedFileInfo.#ctor" />
        <element api="P:NetEti.FileTools.Zip.ZippedFileInfo.FilePath" />
        <element api="P:NetEti.FileTools.Zip.ZippedFileInfo.Size" />
        <element api="P:NetEti.FileTools.Zip.ZippedFileInfo.LastWriteTime" />
        <element api="P:NetEti.FileTools.Zip.ZippedFileInfo.IsDirectory" />
      </elements>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZippedFileInfo.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.Zip.ZippedFileInfo.FilePath">
      <apidata name="FilePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FilePath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.Zip.ZippedFileInfo.IsDirectory">
      <apidata name="IsDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDirectory" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.Zip.ZippedFileInfo.LastWriteTime">
      <apidata name="LastWriteTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastWriteTime" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.FileTools.Zip.ZippedFileInfo.Size">
      <apidata name="Size" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Size" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.FileTools.Zip.ZippedFileInfo.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ZipAccess" module="NetEti.ZipAccess" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.FileTools.Zip" />
        <type api="T:NetEti.FileTools.Zip.ZippedFileInfo" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.Globals">
      <apidata name="NetEti.Globals" group="namespace" />
      <elements>
        <element api="T:NetEti.Globals.AssemblyLoader" />
        <element api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
        <element api="T:NetEti.Globals.EnumerableThreadSafeCopy`1" />
        <element api="T:NetEti.Globals.GenericNonSingletonProvider" />
        <element api="T:NetEti.Globals.GenericSingletonProvider" />
        <element api="T:NetEti.Globals.GenericTree`1" />
        <element api="T:NetEti.Globals.Global" />
        <element api="T:NetEti.Globals.IGetStringValue" />
        <element api="T:NetEti.Globals.IGetValue" />
        <element api="T:NetEti.Globals.IUndefinedElement" />
        <element api="T:NetEti.Globals.ThreadInfos" />
        <element api="T:NetEti.Globals.ThreadLocker" />
      </elements>
    </api>
    <api id="T:NetEti.Globals.AssemblyLoader">
      <apidata name="AssemblyLoader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.Globals.AssemblyLoader.GetAssemblyLoader" />
        <element api="M:NetEti.Globals.AssemblyLoader.GetLoadedAssemblies" />
        <element api="M:NetEti.Globals.AssemblyLoader.DynamicLoadObjectOfTypeFromAssembly(System.String,System.Type)" />
        <element api="M:NetEti.Globals.AssemblyLoader.DynamicLoadAssembly(System.String)" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.AssemblyLoader.DynamicLoadAssembly(System.String)">
      <apidata name="DynamicLoadAssembly" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyPath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Reflection.Assembly" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.AssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.AssemblyLoader.DynamicLoadObjectOfTypeFromAssembly(System.String,System.Type)">
      <apidata name="DynamicLoadObjectOfTypeFromAssembly" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyPathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="objectType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.AssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.AssemblyLoader.GetAssemblyLoader">
      <apidata name="GetAssemblyLoader" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.Globals.AssemblyLoader" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.AssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.AssemblyLoader.GetLoadedAssemblies">
      <apidata name="GetLoadedAssemblies" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.Reflection.Assembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.AssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.DictionaryThreadSafeCopy`2">
      <apidata name="DictionaryThreadSafeCopy" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
        <template name="U" />
      </templates>
      <elements>
        <element api="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})" />
        <element api="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryKeysThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})" />
        <element api="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryValuesThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryKeysThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
      <apidata name="GetDictionaryKeysThreadSafeCopy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
              <template name="U" index="1" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
      <apidata name="GetDictionaryThreadSafeCopy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
              <template name="U" index="1" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <template name="T" index="0" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
            <template name="U" index="1" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryValuesThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
      <apidata name="GetDictionaryValuesThreadSafeCopy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
              <template name="U" index="1" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="U" index="1" api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.DictionaryThreadSafeCopy`2" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.EnumerableThreadSafeCopy`1">
      <apidata name="EnumerableThreadSafeCopy" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:NetEti.Globals.EnumerableThreadSafeCopy`1.GetEnumerableThreadSafeCopy(System.Collections.Generic.IEnumerable{`0})" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.EnumerableThreadSafeCopy`1.GetEnumerableThreadSafeCopy(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="GetEnumerableThreadSafeCopy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.EnumerableThreadSafeCopy`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:NetEti.Globals.EnumerableThreadSafeCopy`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.EnumerableThreadSafeCopy`1" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.GenericNonSingletonProvider">
      <apidata name="GenericNonSingletonProvider" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1(System.Boolean@)" />
        <element api="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <template name="T" index="0" api="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericNonSingletonProvider" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1(System.Boolean@)">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="newInstance" out="true">
          <referenceTo>
            <type api="T:System.Boolean" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1(System.Boolean@)" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericNonSingletonProvider" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.GenericSingletonProvider">
      <apidata name="GenericSingletonProvider" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1(System.Boolean@)" />
        <element api="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <template name="T" index="0" api="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericSingletonProvider" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1(System.Boolean@)">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="newInstance" out="true">
          <referenceTo>
            <type api="T:System.Boolean" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1(System.Boolean@)" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericSingletonProvider" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.GenericTree`1">
      <apidata name="GenericTree" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:NetEti.ExpressionParser.SyntaxTree" ref="true" />
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="T">
          <constrained>
            <type api="T:NetEti.Globals.GenericTree`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
              </specialization>
            </type>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="F:NetEti.Globals.GenericTree`1.Mother" />
        <element api="M:NetEti.Globals.GenericTree`1.#ctor(NetEti.Globals.GenericTree{`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})" />
        <element api="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})" />
        <element api="P:NetEti.Globals.GenericTree`1.Children" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.#ctor(NetEti.Globals.GenericTree{`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="mother">
          <type nullable="true" api="T:NetEti.Globals.GenericTree`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.Globals.GenericTree`1.Children">
      <apidata name="Children" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Children" />
      <setter name="set_Children" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})">
      <apidata name="Climb2Top" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.Globals.GenericTree`1.Mother">
      <apidata name="Mother" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:NetEti.Globals.GenericTree`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="depth">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="depth">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="T:NetEti.Globals.GenericTree`1" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="userParent">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.GenericTree`1" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.Global">
      <apidata name="Global" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:NetEti.Globals.Global.SaveColumnDelimiter" />
        <element api="F:NetEti.Globals.Global.StandardCsvColumnDelimiter" />
        <element api="M:NetEti.Globals.Global.StringToSecureString(System.String)" />
        <element api="M:NetEti.Globals.Global.GetUniversalName(System.String)" />
        <element api="M:NetEti.Globals.Global.CompareVersion(System.String,System.String)" />
        <element api="M:NetEti.Globals.Global.UnicodeHexcodeToChar(System.String,System.String)" />
        <element api="M:NetEti.Globals.Global.IsDate(System.String)" />
        <element api="M:NetEti.Globals.Global.DirectoryCopy(System.String,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.CompareVersion(System.String,System.String)">
      <apidata name="CompareVersion" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="version1">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="version2">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.DirectoryCopy(System.String,System.String,System.Boolean)">
      <apidata name="DirectoryCopy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sourceDir">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="destDir">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="copySubDirs">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.GetUniversalName(System.String)">
      <apidata name="GetUniversalName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sFilePath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.IsDate(System.String)">
      <apidata name="IsDate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputDate">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.Globals.Global.SaveColumnDelimiter">
      <apidata name="SaveColumnDelimiter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Char" ref="false" />
      </returns>
      <value> </value>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.Globals.Global.StandardCsvColumnDelimiter">
      <apidata name="StandardCsvColumnDelimiter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Char" ref="false" />
      </returns>
      <value>;</value>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.StringToSecureString(System.String)">
      <apidata name="StringToSecureString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="current">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Security.SecureString" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.Global.UnicodeHexcodeToChar(System.String,System.String)">
      <apidata name="UnicodeHexcodeToChar" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="unicodeHexcode">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.Global" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.IGetStringValue">
      <apidata name="IGetStringValue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.CommandLineAccess" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.EnvAccess" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.PropertyAccess" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.RegAccess" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.SettingsAccess" ref="true" />
        <type api="T:NetEti.FileTools.IniAccess" ref="true" />
        <type api="T:NetEti.FileTools.XmlAccess" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])" />
        <element api="P:NetEti.Globals.IGetStringValue.Description" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="P:NetEti.Globals.IGetStringValue.Description">
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Description" />
      <setter name="set_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
      <apidata name="GetStringValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
      <apidata name="GetStringValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <type nullable="true" api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <type nullable="true" api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.IGetValue">
      <apidata name="IGetValue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:NetEti.ApplicationEnvironment.AppEnvReader" ref="true" />
        <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)" />
        <element api="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <template name="T" index="0" api="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.IGetValue" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])">
      <apidata name="GetValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultValues">
          <arrayOf nullable="true" rank="1">
            <template name="T" index="0" api="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf nullable="true" rank="1">
          <template name="T" index="0" api="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.IGetValue" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.IUndefinedElement">
      <apidata name="IUndefinedElement" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.UndefinedJob" ref="true" />
        <type api="T:LogicalTaskTree.UndefinedJobListClass" ref="true" />
        <type api="T:LogicalTaskTree.JobProviderBase.UndefinedJobProvider" ref="true">
          <type api="T:LogicalTaskTree.JobProviderBase" ref="true" />
        </type>
        <type api="T:LogicalTaskTree.UndefinedLogicalNodeClass" ref="true" />
        <type api="T:Vishnu.Interchange.UndefinedTreeEventClass" ref="true" />
      </implementors>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.ThreadInfos">
      <apidata name="ThreadInfos" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.Globals.ThreadInfos.GetThreadInfos" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.ThreadInfos.GetThreadInfos">
      <apidata name="GetThreadInfos" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.ThreadInfos" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.Globals.ThreadLocker">
      <apidata name="ThreadLocker" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.Globals.ThreadLocker.LockNameGlobal(System.String)" />
        <element api="M:NetEti.Globals.ThreadLocker.TryLockNameGlobal(System.String,System.Int32)" />
        <element api="M:NetEti.Globals.ThreadLocker.UnlockNameGlobal(System.String)" />
      </elements>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.ThreadLocker.LockNameGlobal(System.String)">
      <apidata name="LockNameGlobal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.ThreadLocker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.ThreadLocker.TryLockNameGlobal(System.String,System.Int32)">
      <apidata name="TryLockNameGlobal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="waitMilliseconds">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.ThreadLocker" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.Globals.ThreadLocker.UnlockNameGlobal(System.String)">
      <apidata name="UnlockNameGlobal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.Global" module="NetEti.Global" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.Globals" />
        <type api="T:NetEti.Globals.ThreadLocker" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.MultiScreen">
      <apidata name="NetEti.MultiScreen" group="namespace" />
      <elements>
        <element api="T:NetEti.MultiScreen.ScreenInfo" />
      </elements>
    </api>
    <api id="T:NetEti.MultiScreen.ScreenInfo">
      <apidata name="ScreenInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.MultiScreen.ScreenInfo.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.MultiScreen.ScreenInfo.IsWithinActualScreenCoordinates(System.Windows.Point)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.IsWithinActualScreenCoordinates(System.Windows.Point,System.Double,System.Double)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetNextPointWithinActualScreenCoordinates(System.Windows.Point)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetNextPointWithinActualScreenCoordinates(System.Windows.Point,System.Double,System.Double)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.ClipToAllScreens(System.Windows.Point,System.Double,System.Double)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetLastActualScreenInfo" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetActualScreenInfoIndex(System.Windows.Window)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetActualScreenInfo(System.Windows.Window)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetFirstScreenInfo" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetMainWindowScreenInfo" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.GetAllScreenInfos(System.Windows.Window)" />
        <element api="M:NetEti.MultiScreen.ScreenInfo.#ctor" />
        <element api="P:NetEti.MultiScreen.ScreenInfo.Name" />
        <element api="P:NetEti.MultiScreen.ScreenInfo.Bounds" />
        <element api="P:NetEti.MultiScreen.ScreenInfo.WorkingArea" />
        <element api="P:NetEti.MultiScreen.ScreenInfo.IsPrimary" />
      </elements>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.MultiScreen.ScreenInfo.Bounds">
      <apidata name="Bounds" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Bounds" />
      <setter name="set_Bounds" />
      <returns>
        <type api="T:System.Windows.Rect" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.ClipToAllScreens(System.Windows.Point,System.Double,System.Double)">
      <apidata name="ClipToAllScreens" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:System.Windows.Point" ref="false" />
        </parameter>
        <parameter name="horizontalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
        <parameter name="verticalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetActualScreenInfo(System.Windows.Window)">
      <apidata name="GetActualScreenInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="window">
          <type api="T:System.Windows.Window" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetActualScreenInfoIndex(System.Windows.Window)">
      <apidata name="GetActualScreenInfoIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="window">
          <type api="T:System.Windows.Window" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetAllScreenInfos(System.Windows.Window)">
      <apidata name="GetAllScreenInfos" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="window">
          <type api="T:System.Windows.Window" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetFirstScreenInfo">
      <apidata name="GetFirstScreenInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetLastActualScreenInfo">
      <apidata name="GetLastActualScreenInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetMainWindowScreenInfo">
      <apidata name="GetMainWindowScreenInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetNextPointWithinActualScreenCoordinates(System.Windows.Point)">
      <apidata name="GetNextPointWithinActualScreenCoordinates" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:System.Windows.Point" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.GetNextPointWithinActualScreenCoordinates(System.Windows.Point,System.Double,System.Double)">
      <apidata name="GetNextPointWithinActualScreenCoordinates" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:System.Windows.Point" ref="false" />
        </parameter>
        <parameter name="horizontalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
        <parameter name="verticalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.MultiScreen.ScreenInfo.IsPrimary">
      <apidata name="IsPrimary" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsPrimary" />
      <setter name="set_IsPrimary" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.IsWithinActualScreenCoordinates(System.Windows.Point)">
      <apidata name="IsWithinActualScreenCoordinates" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:System.Windows.Point" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MultiScreen.ScreenInfo.IsWithinActualScreenCoordinates(System.Windows.Point,System.Double,System.Double)">
      <apidata name="IsWithinActualScreenCoordinates" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:System.Windows.Point" ref="false" />
        </parameter>
        <parameter name="horizontalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
        <parameter name="verticalMargin">
          <type api="T:System.Double" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.MultiScreen.ScreenInfo.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.MultiScreen.ScreenInfo.WorkingArea">
      <apidata name="WorkingArea" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WorkingArea" />
      <setter name="set_WorkingArea" />
      <returns>
        <type api="T:System.Windows.Rect" ref="false" />
      </returns>
      <containers>
        <library assembly="NetEti.MultiScreen" module="NetEti.MultiScreen" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MultiScreen" />
        <type api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.MVVMini">
      <apidata name="NetEti.MVVMini" group="namespace" />
      <elements>
        <element api="T:NetEti.MVVMini.PropertiesChangedEventHandler" />
        <element api="T:NetEti.MVVMini.INotifyPropertiesChanged" />
        <element api="T:NetEti.MVVMini.IRelayCommand" />
        <element api="T:NetEti.MVVMini.ObservableObject" />
        <element api="T:NetEti.MVVMini.PropertiesChangedEventArgs" />
        <element api="T:NetEti.MVVMini.PropertySupport" />
        <element api="T:NetEti.MVVMini.RelayCommand" />
      </elements>
    </api>
    <api id="T:NetEti.MVVMini.INotifyPropertiesChanged">
      <apidata name="INotifyPropertiesChanged" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </implementors>
      <elements>
        <element api="E:NetEti.MVVMini.INotifyPropertiesChanged.PropertiesChanged" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="E:NetEti.MVVMini.INotifyPropertiesChanged.PropertiesChanged">
      <apidata name="PropertiesChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertiesChanged" />
      <remover name="remove_PropertiesChanged" />
      <eventhandler>
        <type api="T:NetEti.MVVMini.PropertiesChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.INotifyPropertiesChanged" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.IRelayCommand">
      <apidata name="IRelayCommand" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </implements>
      <implementors>
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </implementors>
      <elements>
        <element api="M:NetEti.MVVMini.IRelayCommand.UpdateCanExecuteState(System.Windows.Threading.Dispatcher)" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.IRelayCommand.UpdateCanExecuteState(System.Windows.Threading.Dispatcher)">
      <apidata name="UpdateCanExecuteState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="dispatcher">
          <type api="T:System.Windows.Threading.Dispatcher" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.IRelayCommand" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.ObservableObject">
      <apidata name="ObservableObject" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="true" defaultConstructor="M:NetEti.MVVMini.ObservableObject.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
          <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
      </implements>
      <elements>
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.#ctor" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.ObservableObject.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="F:NetEti.MVVMini.ObservableObject.Dispatcher">
      <apidata name="Dispatcher" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.Threading.Dispatcher" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.MVVMini.ObservableObject.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
          <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <apidata name="RaisePropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="propertyExpression">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)">
      <apidata name="RaisePropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread">
      <apidata name="VerifyCalledOnUIThread" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.PropertiesChangedEventArgs">
      <apidata name="PropertiesChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.MVVMini.PropertiesChangedEventArgs.#ctor(System.Collections.Generic.List{System.String})" />
        <element api="P:NetEti.MVVMini.PropertiesChangedEventArgs.Properties" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.PropertiesChangedEventArgs.#ctor(System.Collections.Generic.List{System.String})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="properties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:NetEti.MVVMini.PropertiesChangedEventArgs.Properties">
      <apidata name="Properties" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Properties" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.PropertiesChangedEventHandler">
      <apidata name="PropertiesChangedEventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.PropertySupport">
      <apidata name="PropertySupport" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.MVVMini.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.PropertySupport.VerifyPropertyName(System.Object,System.String)" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <apidata name="ExtractPropertyName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="propertyExpression">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:NetEti.MVVMini.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.PropertySupport" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.PropertySupport.VerifyPropertyName(System.Object,System.String)">
      <apidata name="VerifyPropertyName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyOwner">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.PropertySupport" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.MVVMini.RelayCommand">
      <apidata name="RelayCommand" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.MVVMini.IRelayCommand" ref="true" />
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </implements>
      <elements>
        <element api="M:NetEti.MVVMini.RelayCommand.#ctor(System.Action{System.Object})" />
        <element api="M:NetEti.MVVMini.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean})" />
        <element api="M:NetEti.MVVMini.RelayCommand.UpdateCanExecuteState(System.Windows.Threading.Dispatcher)" />
        <element api="M:NetEti.MVVMini.RelayCommand.CanExecute(System.Object)" />
        <element api="M:NetEti.MVVMini.RelayCommand.Execute(System.Object)" />
        <element api="E:NetEti.MVVMini.RelayCommand.CanExecuteChanged" />
      </elements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.RelayCommand.#ctor(System.Action{System.Object})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="execute">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="execute">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="canExecute">
          <type nullable="true" api="T:System.Func`1" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.RelayCommand.CanExecute(System.Object)">
      <apidata name="CanExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="E:NetEti.MVVMini.RelayCommand.CanExecuteChanged">
      <apidata name="CanExecuteChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_CanExecuteChanged" />
      <remover name="remove_CanExecuteChanged" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.Windows.Input.ICommand.CanExecuteChanged">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.RelayCommand.Execute(System.Object)">
      <apidata name="Execute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Windows.Input.ICommand.Execute(System.Object)">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.MVVMini.RelayCommand.UpdateCanExecuteState(System.Windows.Threading.Dispatcher)">
      <apidata name="UpdateCanExecuteState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="dispatcher">
          <type api="T:System.Windows.Threading.Dispatcher" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:NetEti.MVVMini.IRelayCommand.UpdateCanExecuteState(System.Windows.Threading.Dispatcher)">
          <type api="T:NetEti.MVVMini.IRelayCommand" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NetEti.MVVMini" module="NetEti.MVVMini" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.MVVMini" />
        <type api="T:NetEti.MVVMini.RelayCommand" ref="true" />
      </containers>
    </api>
    <api id="N:NetEti.ObjectSerializer">
      <apidata name="NetEti.ObjectSerializer" group="namespace" />
      <elements>
        <element api="T:NetEti.ObjectSerializer.AnonymousDataMemberAttribute" />
        <element api="T:NetEti.ObjectSerializer.SerializationUtility" />
      </elements>
    </api>
    <api id="T:NetEti.ObjectSerializer.AnonymousDataMemberAttribute">
      <apidata name="AnonymousDataMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ObjectSerializer.AnonymousDataMemberAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ObjectSerializer.AnonymousDataMemberAttribute.#ctor" />
      </elements>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.AnonymousDataMemberAttribute.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.AnonymousDataMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:NetEti.ObjectSerializer.SerializationUtility">
      <apidata name="SerializationUtility" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:NetEti.ObjectSerializer.SerializationUtility.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToBase64String(System.Object,System.Boolean)" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromBase64String(System.String)" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToCodedString(System.Text.Encoding,System.Object,System.Boolean)" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromCodedString(System.Text.Encoding,System.String)" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToByteList(System.Object,System.Boolean,System.Int32)" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromByteList(System.Collections.Generic.List{System.Byte})" />
        <element api="M:NetEti.ObjectSerializer.SerializationUtility.#ctor" />
      </elements>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromBase64String(System.String)">
      <apidata name="DeserializeObjectFromBase64String" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="encoded">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromByteList(System.Collections.Generic.List{System.Byte})">
      <apidata name="DeserializeObjectFromByteList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serialized">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.Byte" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.DeserializeObjectFromCodedString(System.Text.Encoding,System.String)">
      <apidata name="DeserializeObjectFromCodedString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="encoding">
          <type api="T:System.Text.Encoding" ref="true" />
        </parameter>
        <parameter name="encoded">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToBase64String(System.Object,System.Boolean)">
      <apidata name="SerializeObjectToBase64String" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="anonymousToString" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToByteList(System.Object,System.Boolean,System.Int32)">
      <apidata name="SerializeObjectToByteList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="anonymousToString" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
        <parameter name="reku" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.Byte" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="M:NetEti.ObjectSerializer.SerializationUtility.SerializeObjectToCodedString(System.Text.Encoding,System.Object,System.Boolean)">
      <apidata name="SerializeObjectToCodedString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="encoding">
          <type api="T:System.Text.Encoding" ref="true" />
        </parameter>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="anonymousToString" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="NetEti.ObjectSerializer" module="NetEti.ObjectSerializer" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:NetEti.ObjectSerializer" />
        <type api="T:NetEti.ObjectSerializer.SerializationUtility" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.Interchange">
      <apidata name="Vishnu.Interchange" group="namespace" />
      <elements>
        <element api="T:Vishnu.Interchange.AppSettings" />
        <element api="T:Vishnu.Interchange.NodeState" />
        <element api="T:Vishnu.Interchange.NodeLogicalState" />
        <element api="T:Vishnu.Interchange.NodeWorkerState" />
        <element api="T:Vishnu.Interchange.TreeOrientation" />
        <element api="T:Vishnu.Interchange.OrientationSwitch" />
        <element api="T:Vishnu.Interchange.NodeTypes" />
        <element api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" />
        <element api="T:Vishnu.Interchange.DialogSettings" />
        <element api="T:Vishnu.Interchange.GenericPropertyGetter" />
        <element api="T:Vishnu.Interchange.IBusinessLogicRoot" />
        <element api="T:Vishnu.Interchange.ICanRun" />
        <element api="T:Vishnu.Interchange.IExpandableNode" />
        <element api="T:Vishnu.Interchange.INodeChecker" />
        <element api="T:Vishnu.Interchange.INodeLogger" />
        <element api="T:Vishnu.Interchange.INodeTrigger" />
        <element api="T:Vishnu.Interchange.INodeWorker" />
        <element api="T:Vishnu.Interchange.IParameterReader" />
        <element api="T:Vishnu.Interchange.IValueModifier" />
        <element api="T:Vishnu.Interchange.IViewModelRoot" />
        <element api="T:Vishnu.Interchange.IVishnuJobProvider" />
        <element api="T:Vishnu.Interchange.IVishnuNode" />
        <element api="T:Vishnu.Interchange.IVishnuViewModel" />
        <element api="T:Vishnu.Interchange.Result" />
        <element api="T:Vishnu.Interchange.ResultDictionary" />
        <element api="T:Vishnu.Interchange.UndefinedTreeEventClass" />
        <element api="T:Vishnu.Interchange.TreeEvent" />
        <element api="T:Vishnu.Interchange.TreeParameters" />
        <element api="T:Vishnu.Interchange.TriggerBase" />
        <element api="T:Vishnu.Interchange.TriggerInfo" />
        <element api="T:Vishnu.Interchange.VishnuAssemblyLoader" />
        <element api="T:Vishnu.Interchange.WindowAspects" />
      </elements>
    </api>
    <api id="T:Vishnu.Interchange.AppSettings">
      <apidata name="AppSettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.AppSettings.InitUserParameterReader" />
        <element api="M:Vishnu.Interchange.AppSettings.LoadSettings" />
        <element api="M:Vishnu.Interchange.AppSettings.ReplaceWildcards(System.String)" />
        <element api="M:Vishnu.Interchange.AppSettings.GetResolvedPath(System.String)" />
        <element api="M:Vishnu.Interchange.AppSettings.RegisterUserStringValueGetter(NetEti.Globals.IGetStringValue)" />
        <element api="P:Vishnu.Interchange.AppSettings.AbortingAllowed" />
        <element api="P:Vishnu.Interchange.AppSettings.AssemblyDirectories" />
        <element api="P:Vishnu.Interchange.AppSettings.Autostart" />
        <element api="P:Vishnu.Interchange.AppSettings.ControlledNodeUserRunDialog" />
        <element api="P:Vishnu.Interchange.AppSettings.DemoModus" />
        <element api="P:Vishnu.Interchange.AppSettings.FatalInitializationException" />
        <element api="P:Vishnu.Interchange.AppSettings.FlatNodeListFilter" />
        <element api="P:Vishnu.Interchange.AppSettings.HelpPreference" />
        <element api="P:Vishnu.Interchange.AppSettings.IsInSleepTime" />
        <element api="P:Vishnu.Interchange.AppSettings.LocalConfigurationDirectory" />
        <element api="P:Vishnu.Interchange.AppSettings.ActScreenBounds" />
        <element api="P:Vishnu.Interchange.AppSettings.NoWorkers" />
        <element api="P:Vishnu.Interchange.AppSettings.RootJobXmlName" />
        <element api="P:Vishnu.Interchange.AppSettings.SleepTimeFrom" />
        <element api="P:Vishnu.Interchange.AppSettings.SleepTimeTo" />
        <element api="P:Vishnu.Interchange.AppSettings.SnapshotSustain" />
        <element api="P:Vishnu.Interchange.AppSettings.SnapshotDirectory" />
        <element api="P:Vishnu.Interchange.AppSettings.StartTreeOrientation" />
        <element api="P:Vishnu.Interchange.AppSettings.StartWithJobs" />
        <element api="P:Vishnu.Interchange.AppSettings.StartTriggeredNodesOnUserRun" />
        <element api="P:Vishnu.Interchange.AppSettings.UncachedCheckers" />
        <element api="P:Vishnu.Interchange.AppSettings.UserAssemblyDirectory" />
        <element api="P:Vishnu.Interchange.AppSettings.UserParameterReaderPath" />
        <element api="P:Vishnu.Interchange.AppSettings.VishnuRoot" />
        <element api="P:Vishnu.Interchange.AppSettings.VishnuSourceRoot" />
        <element api="P:Vishnu.Interchange.AppSettings.VishnuWindowAspects" />
        <element api="P:Vishnu.Interchange.AppSettings.VishnuProvider" />
        <element api="E:Vishnu.Interchange.AppSettings.UserParametersReloaded" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValue(System.String,System.String)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetStringValues(System.String,System.String[])" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValue``1(System.String,``0)" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetValues``1(System.String,``0[])" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.Dispose" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetParametersSources" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.GetLoadedAssemblies" />
        <element api="M:NetEti.ApplicationEnvironment.BasicAppSettings.SetRegistryBasePath(System.String)" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUser" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserInfo" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppConfigUserLoaded" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ApplicationRootPath" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.BreakAlwaysAllowed" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CheckVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ClickOnceDataDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ConnectionString" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.CreateWorkingDirectoryIfNotExists" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DataSource" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchiveMaxCount" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugArchivingInterval" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFile" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugFileRegexFilter" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugInfo" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DebugMode" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultDatabase" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlDataDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DefaultSqlLogDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpAppSettings" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.DumpLoadedAssemblies" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.FrameworkVersionMajor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsClickOnce" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFrameworkAssembly" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsFullFramework" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetCore" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.IsNetNative" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillChildProcessesOnApplicationExit" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.KillWorkingDirectoryAtShutdown" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Language" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.LogSql" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.MachineName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.MinProgrammVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.OSVersionMajor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessId" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Processor" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProcessorCount" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.ProgrammVersion" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.RegistryBasePath" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.SearchDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.SingleInstance" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFile" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.StatisticsFileRegexFilter" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.TempDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserDomainName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.UserName" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectory" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.WorkingDirectoryCreated" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.Description" />
        <element api="P:NetEti.ApplicationEnvironment.BasicAppSettings.AppEnvAccessor" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.AbortingAllowed">
      <apidata name="AbortingAllowed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AbortingAllowed" />
      <setter name="set_AbortingAllowed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.ActScreenBounds">
      <apidata name="ActScreenBounds" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ActScreenBounds" />
      <setter name="set_ActScreenBounds" />
      <returns>
        <type api="T:System.Windows.Rect" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.AssemblyDirectories">
      <apidata name="AssemblyDirectories" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AssemblyDirectories" />
      <setter name="set_AssemblyDirectories" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.Autostart">
      <apidata name="Autostart" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Autostart" />
      <setter name="set_Autostart" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.ControlledNodeUserRunDialog">
      <apidata name="ControlledNodeUserRunDialog" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ControlledNodeUserRunDialog" />
      <setter name="set_ControlledNodeUserRunDialog" />
      <returns>
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.DemoModus">
      <apidata name="DemoModus" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DemoModus" />
      <setter name="set_DemoModus" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.FatalInitializationException">
      <apidata name="FatalInitializationException" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FatalInitializationException" />
      <setter name="set_FatalInitializationException" />
      <returns>
        <type nullable="true" api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.FlatNodeListFilter">
      <apidata name="FlatNodeListFilter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FlatNodeListFilter" />
      <setter name="set_FlatNodeListFilter" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.AppSettings.GetResolvedPath(System.String)">
      <apidata name="GetResolvedPath" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.HelpPreference">
      <apidata name="HelpPreference" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HelpPreference" />
      <setter name="set_HelpPreference" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.AppSettings.InitUserParameterReader">
      <apidata name="InitUserParameterReader" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.IsInSleepTime">
      <apidata name="IsInSleepTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsInSleepTime" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.AppSettings.LoadSettings">
      <apidata name="LoadSettings" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationEnvironment.BasicAppSettings.LoadSettings">
          <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.LocalConfigurationDirectory">
      <apidata name="LocalConfigurationDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LocalConfigurationDirectory" />
      <setter name="set_LocalConfigurationDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.NoWorkers">
      <apidata name="NoWorkers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NoWorkers" />
      <setter name="set_NoWorkers" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.AppSettings.RegisterUserStringValueGetter(NetEti.Globals.IGetStringValue)">
      <apidata name="RegisterUserStringValueGetter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stringValueGetter">
          <type api="T:NetEti.Globals.IGetStringValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.AppSettings.ReplaceWildcards(System.String)">
      <apidata name="ReplaceWildcards" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:NetEti.ApplicationEnvironment.BasicAppSettings.ReplaceWildcards(System.String)">
          <type api="T:NetEti.ApplicationEnvironment.BasicAppSettings" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="inString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.RootJobXmlName">
      <apidata name="RootJobXmlName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RootJobXmlName" />
      <setter name="set_RootJobXmlName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.SleepTimeFrom">
      <apidata name="SleepTimeFrom" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeFrom" />
      <setter name="set_SleepTimeFrom" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.SleepTimeTo">
      <apidata name="SleepTimeTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeTo" />
      <setter name="set_SleepTimeTo" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.SnapshotDirectory">
      <apidata name="SnapshotDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotDirectory" />
      <setter name="set_SnapshotDirectory" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.SnapshotSustain">
      <apidata name="SnapshotSustain" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotSustain" />
      <setter name="set_SnapshotSustain" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.StartTreeOrientation">
      <apidata name="StartTreeOrientation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartTreeOrientation" />
      <setter name="set_StartTreeOrientation" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.StartTriggeredNodesOnUserRun">
      <apidata name="StartTriggeredNodesOnUserRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartTriggeredNodesOnUserRun" />
      <setter name="set_StartTriggeredNodesOnUserRun" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.StartWithJobs">
      <apidata name="StartWithJobs" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartWithJobs" />
      <setter name="set_StartWithJobs" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.UncachedCheckers">
      <apidata name="UncachedCheckers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UncachedCheckers" />
      <setter name="set_UncachedCheckers" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.UserAssemblyDirectory">
      <apidata name="UserAssemblyDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UserAssemblyDirectory" />
      <setter name="set_UserAssemblyDirectory" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.UserParameterReaderPath">
      <apidata name="UserParameterReaderPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UserParameterReaderPath" />
      <setter name="set_UserParameterReaderPath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="E:Vishnu.Interchange.AppSettings.UserParametersReloaded">
      <apidata name="UserParametersReloaded" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_UserParametersReloaded" />
      <remover name="remove_UserParametersReloaded" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.VishnuProvider">
      <apidata name="VishnuProvider" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_VishnuProvider" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.VishnuRoot">
      <apidata name="VishnuRoot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_VishnuRoot" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.VishnuSourceRoot">
      <apidata name="VishnuSourceRoot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_VishnuSourceRoot" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.AppSettings.VishnuWindowAspects">
      <apidata name="VishnuWindowAspects" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_VishnuWindowAspects" />
      <setter name="set_VishnuWindowAspects" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.AppSettings" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.DialogSettings">
      <apidata name="DialogSettings" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.DialogSettings.None" />
        <element api="F:Vishnu.Interchange.DialogSettings.Info" />
        <element api="F:Vishnu.Interchange.DialogSettings.Question" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.DialogSettings.Info">
      <apidata name="Info" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.DialogSettings.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.DialogSettings.Question">
      <apidata name="Question" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.DialogSettings" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.GenericPropertyGetter">
      <apidata name="GenericPropertyGetter" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.GenericPropertyGetter.GetProperty``1(System.Object,System.String)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.GenericPropertyGetter.GetProperty``1(System.Object,System.String)">
      <apidata name="GetProperty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="instance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.Interchange.GenericPropertyGetter.GetProperty``1(System.Object,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.GenericPropertyGetter" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IBusinessLogicRoot">
      <apidata name="IBusinessLogicRoot" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.IBusinessLogicRoot.GetTopJobList" />
        <element api="M:Vishnu.Interchange.IBusinessLogicRoot.SetTopJobList(Vishnu.Interchange.IVishnuNode)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IBusinessLogicRoot.GetTopJobList">
      <apidata name="GetTopJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IBusinessLogicRoot.SetTopJobList(Vishnu.Interchange.IVishnuNode)">
      <apidata name="SetTopJobList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="topJobList">
          <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.ICanRun">
      <apidata name="ICanRun" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.NodeShellBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.ICanRun.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.ICanRun.CanRun(System.Object@,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="CanRun" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="parameters">
          <referenceTo nullable="true">
            <type nullable="true" api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.ICanRun" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IExpandableNode">
      <apidata name="IExpandableNode" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.IExpandableNode.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="P:Vishnu.Interchange.IExpandableNode.Id" />
        <element api="P:Vishnu.Interchange.IExpandableNode.Name" />
        <element api="P:Vishnu.Interchange.IExpandableNode.Path" />
        <element api="P:Vishnu.Interchange.IExpandableNode.IsExpanded" />
        <element api="P:Vishnu.Interchange.IExpandableNode.ChildOrientation" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IExpandableNode.ChildOrientation">
      <apidata name="ChildOrientation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_ChildOrientation" />
      <returns>
        <type api="T:System.Windows.Controls.Orientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IExpandableNode.Id">
      <apidata name="Id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Id" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IExpandableNode.IsExpanded">
      <apidata name="IsExpanded" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsExpanded" />
      <setter name="set_IsExpanded" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IExpandableNode.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IExpandableNode.Path">
      <apidata name="Path" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Path" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IExpandableNode.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.INodeChecker">
      <apidata name="INodeChecker" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.INodeChecker.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)" />
        <element api="P:Vishnu.Interchange.INodeChecker.ReturnObject" />
        <element api="E:Vishnu.Interchange.INodeChecker.NodeProgressChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="E:Vishnu.Interchange.INodeChecker.NodeProgressChanged">
      <apidata name="NodeProgressChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_NodeProgressChanged" />
      <remover name="remove_NodeProgressChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.ProgressChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.INodeChecker.ReturnObject">
      <apidata name="ReturnObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ReturnObject" />
      <setter name="set_ReturnObject" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.INodeChecker.Run(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="checkerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeChecker" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.INodeLogger">
      <apidata name="INodeLogger" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.LoggerShell" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.INodeLogger.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.INodeLogger.Log(System.Object,Vishnu.Interchange.TreeParameters,Vishnu.Interchange.TreeEvent,System.Object)">
      <apidata name="Log" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="loggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="treeParameters">
          <type nullable="true" api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="treeEvent">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
        <parameter name="additionalEventArgs">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeLogger" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.INodeTrigger">
      <apidata name="INodeTrigger" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.TreeEventTrigger" ref="true" />
        <type api="T:LogicalTaskTree.TriggerShell" ref="true" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.INodeTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:Vishnu.Interchange.INodeTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="P:Vishnu.Interchange.INodeTrigger.Info" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.INodeTrigger.Info">
      <apidata name="Info" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Info" />
      <setter name="set_Info" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.INodeTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.INodeTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.INodeWorker">
      <apidata name="INodeWorker" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.WorkerShell" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.INodeWorker.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.INodeWorker.Exec(Vishnu.Interchange.TreeParameters,System.String,Vishnu.Interchange.TreeEvent,System.Boolean)">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="treeParameters">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
        <parameter name="nodeId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="eventParameters">
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
        </parameter>
        <parameter name="isResetting">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.INodeWorker" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IParameterReader">
      <apidata name="IParameterReader" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Vishnu.Interchange.IParameterReader.Init(System.Object)" />
        <element api="M:Vishnu.Interchange.IParameterReader.ReadParameter(System.String)" />
        <element api="E:Vishnu.Interchange.IParameterReader.ParametersReloaded" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IParameterReader.Init(System.Object)">
      <apidata name="Init" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="parameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IParameterReader" ref="true" />
      </containers>
    </api>
    <api id="E:Vishnu.Interchange.IParameterReader.ParametersReloaded">
      <apidata name="ParametersReloaded" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_ParametersReloaded" />
      <remover name="remove_ParametersReloaded" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IParameterReader" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IParameterReader.ReadParameter(System.String)">
      <apidata name="ReadParameter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="parameterName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IParameterReader" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IValueModifier">
      <apidata name="IValueModifier" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:LogicalTaskTree.NodeCheckerBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.IValueModifier.ModifyValue(System.Object)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IValueModifier.ModifyValue(System.Object)">
      <apidata name="ModifyValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="toConvert">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IValueModifier" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IViewModelRoot">
      <apidata name="IViewModelRoot" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.Interchange.IViewModelRoot.GetTopJobListViewModel" />
        <element api="M:Vishnu.Interchange.IViewModelRoot.SetTopJobListViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.Interchange.IViewModelRoot.RefreshDependentAlternativeViewModels" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IViewModelRoot.GetTopJobListViewModel">
      <apidata name="GetTopJobListViewModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IViewModelRoot.RefreshDependentAlternativeViewModels">
      <apidata name="RefreshDependentAlternativeViewModels" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IViewModelRoot.SetTopJobListViewModel(Vishnu.Interchange.IVishnuViewModel)">
      <apidata name="SetTopJobListViewModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="topJobListViewModel">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IVishnuJobProvider">
      <apidata name="IVishnuJobProvider" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Vishnu.Interchange.IVishnuJobProvider.GetVishnuJobXml(System.String)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.IVishnuJobProvider.GetVishnuJobXml(System.String)">
      <apidata name="GetVishnuJobXml" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="jobDirectory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Xml.Linq.XDocument" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuJobProvider" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IVishnuNode">
      <apidata name="IVishnuNode" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:NetEti.MVVMini.INotifyPropertiesChanged" ref="true" />
      </implements>
      <implementors>
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </implementors>
      <elements>
        <element api="P:Vishnu.Interchange.IVishnuNode.IdInfo" />
        <element api="P:Vishnu.Interchange.IVishnuNode.NameInfo" />
        <element api="P:Vishnu.Interchange.IVishnuNode.PathInfo" />
        <element api="P:Vishnu.Interchange.IVishnuNode.TypeInfo" />
        <element api="P:Vishnu.Interchange.IVishnuNode.LevelInfo" />
        <element api="E:NetEti.MVVMini.INotifyPropertiesChanged.PropertiesChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuNode.IdInfo">
      <apidata name="IdInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IdInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuNode.LevelInfo">
      <apidata name="LevelInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_LevelInfo" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuNode.NameInfo">
      <apidata name="NameInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_NameInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuNode.PathInfo">
      <apidata name="PathInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_PathInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuNode.TypeInfo">
      <apidata name="TypeInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_TypeInfo" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuNode" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.IVishnuViewModel">
      <apidata name="IVishnuViewModel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </implementors>
      <elements>
        <element api="P:Vishnu.Interchange.IVishnuViewModel.Result" />
        <element api="P:Vishnu.Interchange.IVishnuViewModel.ParentView" />
        <element api="P:Vishnu.Interchange.IVishnuViewModel.UserDataContext" />
        <element api="E:Vishnu.Interchange.IVishnuViewModel.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuViewModel.ParentView">
      <apidata name="ParentView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ParentView" />
      <setter name="set_ParentView" />
      <returns>
        <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </containers>
    </api>
    <api id="E:Vishnu.Interchange.IVishnuViewModel.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuViewModel.Result">
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Result" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.IVishnuViewModel.UserDataContext">
      <apidata name="UserDataContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_UserDataContext" />
      <setter name="set_UserDataContext" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.NodeLogicalState">
      <apidata name="NodeLogicalState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.NodeLogicalState.Undefined" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.None" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.Start" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.Done" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.Fault" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.Timeout" />
        <element api="F:Vishnu.Interchange.NodeLogicalState.UserAbort" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.Done">
      <apidata name="Done" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.Fault">
      <apidata name="Fault" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>16</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.Start">
      <apidata name="Start" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.Timeout">
      <apidata name="Timeout" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>32</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.Undefined">
      <apidata name="Undefined" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeLogicalState.UserAbort">
      <apidata name="UserAbort" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </returns>
      <value>64</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.NodeState">
      <apidata name="NodeState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.NodeState.Null" />
        <element api="F:Vishnu.Interchange.NodeState.None" />
        <element api="F:Vishnu.Interchange.NodeState.Waiting" />
        <element api="F:Vishnu.Interchange.NodeState.Working" />
        <element api="F:Vishnu.Interchange.NodeState.Finished" />
        <element api="F:Vishnu.Interchange.NodeState.Triggered" />
        <element api="F:Vishnu.Interchange.NodeState.InternalError" />
        <element api="F:Vishnu.Interchange.NodeState.Ready" />
        <element api="F:Vishnu.Interchange.NodeState.CanStart" />
        <element api="F:Vishnu.Interchange.NodeState.Busy" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Busy">
      <apidata name="Busy" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.CanStart">
      <apidata name="CanStart" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>25</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Finished">
      <apidata name="Finished" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.InternalError">
      <apidata name="InternalError" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>128</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Null">
      <apidata name="Null" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Ready">
      <apidata name="Ready" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>24</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Triggered">
      <apidata name="Triggered" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>16</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Waiting">
      <apidata name="Waiting" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeState.Working">
      <apidata name="Working" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeState" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.NodeTypes">
      <apidata name="NodeTypes" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.NodeTypes.None" />
        <element api="F:Vishnu.Interchange.NodeTypes.NodeConnector" />
        <element api="F:Vishnu.Interchange.NodeTypes.ValueModifier" />
        <element api="F:Vishnu.Interchange.NodeTypes.JobConnector" />
        <element api="F:Vishnu.Interchange.NodeTypes.Constant" />
        <element api="F:Vishnu.Interchange.NodeTypes.Checker" />
        <element api="F:Vishnu.Interchange.NodeTypes.NodeList" />
        <element api="F:Vishnu.Interchange.NodeTypes.JobList" />
        <element api="F:Vishnu.Interchange.NodeTypes.Snapshot" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.Checker">
      <apidata name="Checker" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>32</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.Constant">
      <apidata name="Constant" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>16</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.JobConnector">
      <apidata name="JobConnector" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.JobList">
      <apidata name="JobList" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>128</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.NodeConnector">
      <apidata name="NodeConnector" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.NodeList">
      <apidata name="NodeList" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>64</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.Snapshot">
      <apidata name="Snapshot" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>256</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeTypes.ValueModifier">
      <apidata name="ValueModifier" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.NodeWorkerState">
      <apidata name="NodeWorkerState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.NodeWorkerState.None" />
        <element api="F:Vishnu.Interchange.NodeWorkerState.Valid" />
        <element api="F:Vishnu.Interchange.NodeWorkerState.Invalid" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeWorkerState.Invalid">
      <apidata name="Invalid" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeWorkerState.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.NodeWorkerState.Valid">
      <apidata name="Valid" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.NodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.OrientationSwitch">
      <apidata name="OrientationSwitch" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.OrientationSwitch.Unchanged" />
        <element api="F:Vishnu.Interchange.OrientationSwitch.Switched" />
        <element api="F:Vishnu.Interchange.OrientationSwitch.Horizontal" />
        <element api="F:Vishnu.Interchange.OrientationSwitch.Vertical" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.OrientationSwitch.Horizontal">
      <apidata name="Horizontal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.OrientationSwitch.Switched">
      <apidata name="Switched" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.OrientationSwitch.Unchanged">
      <apidata name="Unchanged" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.OrientationSwitch.Vertical">
      <apidata name="Vertical" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.Result">
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.Interchange.Result.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.Result.#ctor" />
        <element api="M:Vishnu.Interchange.Result.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{Vishnu.Interchange.NodeState},System.Nullable{Vishnu.Interchange.NodeLogicalState},System.Object)" />
        <element api="M:Vishnu.Interchange.Result.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:Vishnu.Interchange.Result.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:Vishnu.Interchange.Result.ToString" />
        <element api="M:Vishnu.Interchange.Result.Equals(System.Object)" />
        <element api="M:Vishnu.Interchange.Result.GetHashCode" />
        <element api="P:Vishnu.Interchange.Result.Id" />
        <element api="P:Vishnu.Interchange.Result.Logical" />
        <element api="P:Vishnu.Interchange.Result.State" />
        <element api="P:Vishnu.Interchange.Result.LogicalState" />
        <element api="P:Vishnu.Interchange.Result.Timestamp" />
        <element api="P:Vishnu.Interchange.Result.ReturnObject" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{Vishnu.Interchange.NodeState},System.Nullable{Vishnu.Interchange.NodeLogicalState},System.Object)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="id">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:Vishnu.Interchange.NodeState" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="logicalState">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="returnObject">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <apidata name="GetObjectData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.Id">
      <apidata name="Id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Id" />
      <setter name="set_Id" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Logical" />
      <setter name="set_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.LogicalState">
      <apidata name="LogicalState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogicalState" />
      <setter name="set_LogicalState" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.ReturnObject">
      <apidata name="ReturnObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReturnObject" />
      <setter name="set_ReturnObject" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:Vishnu.Interchange.NodeState" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.Result.Timestamp">
      <apidata name="Timestamp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Timestamp" />
      <setter name="set_Timestamp" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.Result.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.Result" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.ResultDictionary">
      <apidata name="ResultDictionary" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.Interchange.ResultDictionary.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Vishnu.Interchange.Result" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.ResultDictionary.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.ResultDictionary.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TreeEvent">
      <apidata name="TreeEvent" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.Interchange.UndefinedTreeEventClass" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:Vishnu.Interchange.TreeEvent.UndefinedTreeEvent" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetUserEventNamesForInternalEventNames(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetUserEventNameForInternalEventName(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetInternalEventNamesForUserEventNames(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetInternalEventNameForUserEventName(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},Vishnu.Interchange.NodeLogicalState,Vishnu.Interchange.ResultDictionary,Vishnu.Interchange.ResultDictionary)" />
        <element api="M:Vishnu.Interchange.TreeEvent.ReplaceWildcards(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetResolvedPath(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.ToString" />
        <element api="M:Vishnu.Interchange.TreeEvent.Equals(System.Object)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetHashCode" />
        <element api="P:Vishnu.Interchange.TreeEvent.Name" />
        <element api="P:Vishnu.Interchange.TreeEvent.Timestamp" />
        <element api="P:Vishnu.Interchange.TreeEvent.ThreadId" />
        <element api="P:Vishnu.Interchange.TreeEvent.SourceId" />
        <element api="P:Vishnu.Interchange.TreeEvent.SenderId" />
        <element api="P:Vishnu.Interchange.TreeEvent.NodeName" />
        <element api="P:Vishnu.Interchange.TreeEvent.NodePath" />
        <element api="P:Vishnu.Interchange.TreeEvent.Logical" />
        <element api="P:Vishnu.Interchange.TreeEvent.State" />
        <element api="P:Vishnu.Interchange.TreeEvent.Results" />
        <element api="P:Vishnu.Interchange.TreeEvent.Environment" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},Vishnu.Interchange.NodeLogicalState,Vishnu.Interchange.ResultDictionary,Vishnu.Interchange.ResultDictionary)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="senderId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="nodeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="nodePath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="lastLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="logicalState">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
        <parameter name="results">
          <type nullable="true" api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
        </parameter>
        <parameter name="environment">
          <type nullable="true" api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.Environment">
      <apidata name="Environment" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Environment" />
      <setter name="set_Environment" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetInternalEventNameForUserEventName(System.String)">
      <apidata name="GetInternalEventNameForUserEventName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userEventName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetInternalEventNamesForUserEventNames(System.String)">
      <apidata name="GetInternalEventNamesForUserEventNames" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userEventNames">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetResolvedPath(System.String)">
      <apidata name="GetResolvedPath" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetUserEventNameForInternalEventName(System.String)">
      <apidata name="GetUserEventNameForInternalEventName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="internalEventName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.GetUserEventNamesForInternalEventNames(System.String)">
      <apidata name="GetUserEventNamesForInternalEventNames" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="internalEventNames">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.NodeName">
      <apidata name="NodeName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NodeName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.NodePath">
      <apidata name="NodePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NodePath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.ReplaceWildcards(System.String)">
      <apidata name="ReplaceWildcards" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.Results">
      <apidata name="Results" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Results" />
      <setter name="set_Results" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.ResultDictionary" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.SenderId">
      <apidata name="SenderId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SenderId" />
      <setter name="set_SenderId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.SourceId">
      <apidata name="SourceId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceId" />
      <setter name="set_SourceId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.State">
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_State" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.ThreadId">
      <apidata name="ThreadId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ThreadId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeEvent.Timestamp">
      <apidata name="Timestamp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Timestamp" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeEvent.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TreeEvent.UndefinedTreeEvent">
      <apidata name="UndefinedTreeEvent" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.UndefinedTreeEventClass" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TreeOrientation">
      <apidata name="TreeOrientation" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.TreeOrientation.AlternatingHorizontal" />
        <element api="F:Vishnu.Interchange.TreeOrientation.Vertical" />
        <element api="F:Vishnu.Interchange.TreeOrientation.Horizontal" />
        <element api="F:Vishnu.Interchange.TreeOrientation.AlternatingVertical" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TreeOrientation.AlternatingHorizontal">
      <apidata name="AlternatingHorizontal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TreeOrientation.AlternatingVertical">
      <apidata name="AlternatingVertical" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TreeOrientation.Horizontal">
      <apidata name="Horizontal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TreeOrientation.Vertical">
      <apidata name="Vertical" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TreeParameters">
      <apidata name="TreeParameters" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.TreeParameters.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.Interchange.TreeParameters.#ctor(System.String,System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.Interchange.TreeParameters.#ctor(System.String)" />
        <element api="M:Vishnu.Interchange.TreeParameters.ToString" />
        <element api="M:Vishnu.Interchange.TreeParameters.Equals(System.Object)" />
        <element api="M:Vishnu.Interchange.TreeParameters.GetHashCode" />
        <element api="M:Vishnu.Interchange.TreeParameters.ThreadAccessMainWindowScreenInfo" />
        <element api="P:Vishnu.Interchange.TreeParameters.LastParentViewAbsoluteScreenPosition" />
        <element api="P:Vishnu.Interchange.TreeParameters.Name" />
        <element api="P:Vishnu.Interchange.TreeParameters.CheckerDllDirectory" />
        <element api="P:Vishnu.Interchange.TreeParameters.ParentView" />
        <element api="P:Vishnu.Interchange.TreeParameters.BusinessLogicRoot" />
        <element api="P:Vishnu.Interchange.TreeParameters.ViewModelRoot" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.#ctor(System.String,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parentView">
          <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.BusinessLogicRoot">
      <apidata name="BusinessLogicRoot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BusinessLogicRoot" />
      <setter name="set_BusinessLogicRoot" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.IBusinessLogicRoot" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.CheckerDllDirectory">
      <apidata name="CheckerDllDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CheckerDllDirectory" />
      <setter name="set_CheckerDllDirectory" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.GetParentViewAbsoluteScreenPosition">
      <apidata name="GetParentViewAbsoluteScreenPosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.LastParentViewAbsoluteScreenPosition">
      <apidata name="LastParentViewAbsoluteScreenPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastParentViewAbsoluteScreenPosition" />
      <setter name="set_LastParentViewAbsoluteScreenPosition" />
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.ParentView">
      <apidata name="ParentView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ParentView" />
      <setter name="set_ParentView" />
      <returns>
        <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.ThreadAccessMainWindowScreenInfo">
      <apidata name="ThreadAccessMainWindowScreenInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:NetEti.MultiScreen.ScreenInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TreeParameters.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TreeParameters.ViewModelRoot">
      <apidata name="ViewModelRoot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ViewModelRoot" />
      <setter name="set_ViewModelRoot" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TriggerBase">
      <apidata name="TriggerBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" defaultConstructor="M:Vishnu.Interchange.TriggerBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.Interchange.TriggerBase._info" />
        <element api="F:Vishnu.Interchange.TriggerBase._lastStart" />
        <element api="F:Vishnu.Interchange.TriggerBase._nextStart" />
        <element api="F:Vishnu.Interchange.TriggerBase._syntaxInformation" />
        <element api="F:Vishnu.Interchange.TriggerBase._isUserRun" />
        <element api="M:Vishnu.Interchange.TriggerBase.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:Vishnu.Interchange.TriggerBase.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})" />
        <element api="M:Vishnu.Interchange.TriggerBase.#ctor" />
        <element api="M:Vishnu.Interchange.TriggerBase.OnTriggerFired(System.Int64)" />
        <element api="M:Vishnu.Interchange.TriggerBase.EvaluateParametersOrFail(System.Object@,System.Object)" />
        <element api="M:Vishnu.Interchange.TriggerBase.ThrowSyntaxException(System.String)" />
        <element api="P:Vishnu.Interchange.TriggerBase.Info" />
        <element api="P:Vishnu.Interchange.TriggerBase.TriggerName" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggerBase._info">
      <apidata name="_info" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggerBase._isUserRun">
      <apidata name="_isUserRun" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggerBase._lastStart">
      <apidata name="_lastStart" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggerBase._nextStart">
      <apidata name="_nextStart" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggerBase._syntaxInformation">
      <apidata name="_syntaxInformation" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.EvaluateParametersOrFail(System.Object@,System.Object)">
      <apidata name="EvaluateParametersOrFail" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="triggerParameters">
          <referenceTo nullable="true">
            <type nullable="true" api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TriggerBase.Info">
      <apidata name="Info" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Info" />
      <setter name="set_Info" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.INodeTrigger.Info">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.OnTriggerFired(System.Int64)">
      <apidata name="OnTriggerFired" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="dummy">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerParameters">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="triggerController">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="triggerIt">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.Interchange.INodeTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
          <type api="T:Vishnu.Interchange.INodeTrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerBase.ThrowSyntaxException(System.String)">
      <apidata name="ThrowSyntaxException" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="errorMessage">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TriggerBase.TriggerName">
      <apidata name="TriggerName" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TriggerName" />
      <setter name="set_TriggerName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TriggeredNodeStartConstraint">
      <apidata name="TriggeredNodeStartConstraint" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.None" />
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.NoTreeEvents" />
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.Direct" />
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.All" />
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.AllNoTreeEvents" />
        <element api="F:Vishnu.Interchange.TriggeredNodeStartConstraint.DirectNoTreeEvents" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.All">
      <apidata name="All" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.AllNoTreeEvents">
      <apidata name="AllNoTreeEvents" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.Direct">
      <apidata name="Direct" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.DirectNoTreeEvents">
      <apidata name="DirectNoTreeEvents" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.Interchange.TriggeredNodeStartConstraint.NoTreeEvents">
      <apidata name="NoTreeEvents" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggeredNodeStartConstraint" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.TriggerInfo">
      <apidata name="TriggerInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.Interchange.TriggerInfo.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.TriggerInfo.#ctor" />
        <element api="P:Vishnu.Interchange.TriggerInfo.NextRun" />
        <element api="P:Vishnu.Interchange.TriggerInfo.NextRunInfo" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.TriggerInfo.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TriggerInfo.NextRun">
      <apidata name="NextRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NextRun" />
      <setter name="set_NextRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.TriggerInfo.NextRunInfo">
      <apidata name="NextRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NextRunInfo" />
      <setter name="set_NextRunInfo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.TriggerInfo" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.UndefinedTreeEventClass">
      <apidata name="UndefinedTreeEventClass" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.Interchange.UndefinedTreeEventClass.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.Interchange.TreeEvent" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:NetEti.Globals.IUndefinedElement" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.Interchange.UndefinedTreeEventClass.#ctor" />
        <element api="M:Vishnu.Interchange.TreeEvent.ReplaceWildcards(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetResolvedPath(System.String)" />
        <element api="M:Vishnu.Interchange.TreeEvent.ToString" />
        <element api="M:Vishnu.Interchange.TreeEvent.Equals(System.Object)" />
        <element api="M:Vishnu.Interchange.TreeEvent.GetHashCode" />
        <element api="P:Vishnu.Interchange.TreeEvent.Name" />
        <element api="P:Vishnu.Interchange.TreeEvent.Timestamp" />
        <element api="P:Vishnu.Interchange.TreeEvent.ThreadId" />
        <element api="P:Vishnu.Interchange.TreeEvent.SourceId" />
        <element api="P:Vishnu.Interchange.TreeEvent.SenderId" />
        <element api="P:Vishnu.Interchange.TreeEvent.NodeName" />
        <element api="P:Vishnu.Interchange.TreeEvent.NodePath" />
        <element api="P:Vishnu.Interchange.TreeEvent.Logical" />
        <element api="P:Vishnu.Interchange.TreeEvent.State" />
        <element api="P:Vishnu.Interchange.TreeEvent.Results" />
        <element api="P:Vishnu.Interchange.TreeEvent.Environment" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.UndefinedTreeEventClass.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.UndefinedTreeEventClass" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.VishnuAssemblyLoader">
      <apidata name="VishnuAssemblyLoader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.VishnuAssemblyLoader.GetAssemblyLoader(System.Collections.Generic.List{System.String})" />
        <element api="M:Vishnu.Interchange.VishnuAssemblyLoader.GetAssemblyLoader" />
        <element api="M:Vishnu.Interchange.VishnuAssemblyLoader.ClearCache" />
        <element api="M:Vishnu.Interchange.VishnuAssemblyLoader.RegisterAssemblyPathForForcedNextReloading(System.String)" />
        <element api="M:Vishnu.Interchange.VishnuAssemblyLoader.DynamicLoadObjectOfTypeFromAssembly(System.String,System.Type,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.VishnuAssemblyLoader.ClearCache">
      <apidata name="ClearCache" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.VishnuAssemblyLoader.DynamicLoadObjectOfTypeFromAssembly(System.String,System.Type,System.Boolean)">
      <apidata name="DynamicLoadObjectOfTypeFromAssembly" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyPathName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="objectType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="force" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.VishnuAssemblyLoader.GetAssemblyLoader">
      <apidata name="GetAssemblyLoader" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.VishnuAssemblyLoader.GetAssemblyLoader(System.Collections.Generic.List{System.String})">
      <apidata name="GetAssemblyLoader" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyDirectories">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.VishnuAssemblyLoader.RegisterAssemblyPathForForcedNextReloading(System.String)">
      <apidata name="RegisterAssemblyPathForForcedNextReloading" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyPathName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.VishnuAssemblyLoader" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.Interchange.WindowAspects">
      <apidata name="WindowAspects" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.Interchange.WindowAspects.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.Interchange.WindowAspects.GetMainWindowMeasures" />
        <element api="M:Vishnu.Interchange.WindowAspects.GetFrameworkElementAbsoluteScreenPosition(System.Windows.FrameworkElement,System.Boolean)" />
        <element api="M:Vishnu.Interchange.WindowAspects.#ctor" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowCenterX" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowCenterY" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowWidth" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowHeight" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowScrollLeft" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowScrollTop" />
        <element api="P:Vishnu.Interchange.WindowAspects.WindowZoom" />
        <element api="P:Vishnu.Interchange.WindowAspects.IsScrollbarVisible" />
        <element api="P:Vishnu.Interchange.WindowAspects.ActScreenIndex" />
        <element api="P:Vishnu.Interchange.WindowAspects.ActTabControlTab" />
      </elements>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.WindowAspects.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.ActScreenIndex">
      <apidata name="ActScreenIndex" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ActScreenIndex" />
      <setter name="set_ActScreenIndex" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.ActTabControlTab">
      <apidata name="ActTabControlTab" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ActTabControlTab" />
      <setter name="set_ActTabControlTab" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.WindowAspects.GetFrameworkElementAbsoluteScreenPosition(System.Windows.FrameworkElement,System.Boolean)">
      <apidata name="GetFrameworkElementAbsoluteScreenPosition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="frameworkElement">
          <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="failOnErrors" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.Interchange.WindowAspects.GetMainWindowMeasures">
      <apidata name="GetMainWindowMeasures" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Windows.Rect" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.IsScrollbarVisible">
      <apidata name="IsScrollbarVisible" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsScrollbarVisible" />
      <setter name="set_IsScrollbarVisible" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowCenterX">
      <apidata name="WindowCenterX" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowCenterX" />
      <setter name="set_WindowCenterX" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowCenterY">
      <apidata name="WindowCenterY" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowCenterY" />
      <setter name="set_WindowCenterY" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowHeight">
      <apidata name="WindowHeight" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowHeight" />
      <setter name="set_WindowHeight" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowScrollLeft">
      <apidata name="WindowScrollLeft" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowScrollLeft" />
      <setter name="set_WindowScrollLeft" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowScrollTop">
      <apidata name="WindowScrollTop" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowScrollTop" />
      <setter name="set_WindowScrollTop" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowWidth">
      <apidata name="WindowWidth" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowWidth" />
      <setter name="set_WindowWidth" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.Interchange.WindowAspects.WindowZoom">
      <apidata name="WindowZoom" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowZoom" />
      <setter name="set_WindowZoom" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.Interchange" module="Vishnu.Interchange" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.Interchange" />
        <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.UserControls">
      <apidata name="Vishnu.UserControls" group="namespace" />
      <elements>
        <element api="T:Vishnu.UserControls.ConstantNodeUserControl" />
        <element api="T:Vishnu.UserControls.JobConnectorUserControl" />
        <element api="T:Vishnu.UserControls.JobListUserControl" />
        <element api="T:Vishnu.UserControls.NodeListUserControl" />
        <element api="T:Vishnu.UserControls.SingleNodeUserControl" />
        <element api="T:Vishnu.UserControls.SnapshotUserControl" />
      </elements>
    </api>
    <api id="T:Vishnu.UserControls.ConstantNodeUserControl">
      <apidata name="ConstantNodeUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.ConstantNodeUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.ConstantNodeUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.ConstantNodeUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="ConstantNodeUserControl" module="ConstantNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.ConstantNodeUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="ConstantNodeUserControl" module="ConstantNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.ConstantNodeUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.ConstantNodeUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="ConstantNodeUserControl" module="ConstantNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.ConstantNodeUserControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.UserControls.JobConnectorUserControl">
      <apidata name="JobConnectorUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.JobConnectorUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        <type api="T:System.Windows.Markup.IStyleConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.JobConnectorUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.JobConnectorUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="JobConnectorUserControl" module="JobConnectorUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.JobConnectorUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="JobConnectorUserControl" module="JobConnectorUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.JobConnectorUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.JobConnectorUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="JobConnectorUserControl" module="JobConnectorUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.JobConnectorUserControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.UserControls.JobListUserControl">
      <apidata name="JobListUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.JobListUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        <type api="T:System.Windows.Markup.IStyleConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.JobListUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.JobListUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="JobListUserControl" module="JobListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.JobListUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="JobListUserControl" module="JobListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.JobListUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.JobListUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="JobListUserControl" module="JobListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.JobListUserControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.UserControls.NodeListUserControl">
      <apidata name="NodeListUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.NodeListUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        <type api="T:System.Windows.Markup.IStyleConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.NodeListUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.NodeListUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="NodeListUserControl" module="NodeListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.NodeListUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="NodeListUserControl" module="NodeListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.NodeListUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.NodeListUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="NodeListUserControl" module="NodeListUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.NodeListUserControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.UserControls.SingleNodeUserControl">
      <apidata name="SingleNodeUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.SingleNodeUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        <type api="T:System.Windows.Markup.IStyleConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.SingleNodeUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.SingleNodeUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="SingleNodeUserControl" module="SingleNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.SingleNodeUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="SingleNodeUserControl" module="SingleNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.SingleNodeUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.SingleNodeUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="SingleNodeUserControl" module="SingleNodeUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.SingleNodeUserControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.UserControls.SnapshotUserControl">
      <apidata name="SnapshotUserControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.UserControls.SnapshotUserControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        <type api="T:System.Windows.Markup.IStyleConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.UserControls.SnapshotUserControl.#ctor" />
        <element api="M:Vishnu.UserControls.SnapshotUserControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="SnapshotUserControl" module="SnapshotUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.SnapshotUserControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="SnapshotUserControl" module="SnapshotUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.SnapshotUserControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.UserControls.SnapshotUserControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="SnapshotUserControl" module="SnapshotUserControl" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.UserControls" />
        <type api="T:Vishnu.UserControls.SnapshotUserControl" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.ViewModel">
      <apidata name="Vishnu.ViewModel" group="namespace" />
      <elements>
        <element api="T:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel" />
        <element api="T:Vishnu.ViewModel.DynamicUserControlBase" />
        <element api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" />
        <element api="T:Vishnu.ViewModel.IVishnuRenderWatcher" />
        <element api="T:Vishnu.ViewModel.JobConnectorViewModel" />
        <element api="T:Vishnu.ViewModel.JobGroupViewModel" />
        <element api="T:Vishnu.ViewModel.JobListViewModel" />
        <element api="T:Vishnu.ViewModel.VisualNodeState" />
        <element api="T:Vishnu.ViewModel.VisualNodeWorkerState" />
        <element api="T:Vishnu.ViewModel.LogicalNodeViewModel" />
        <element api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" />
        <element api="T:Vishnu.ViewModel.MainWindowViewModel" />
        <element api="T:Vishnu.ViewModel.NodeErrorViewModel" />
        <element api="T:Vishnu.ViewModel.NodeListViewModel" />
        <element api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" />
        <element api="T:Vishnu.ViewModel.SingleNodeViewModel" />
        <element api="T:Vishnu.ViewModel.SnapshotViewModel" />
        <element api="T:Vishnu.ViewModel.UIHelper" />
        <element api="T:Vishnu.ViewModel.VishnuViewModelBase" />
      </elements>
    </api>
    <api id="T:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel">
      <apidata name="DummyLogicalTaskTreeViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel.#ctor(Vishnu.Interchange.TreeParameters)" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeVM" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeParams" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeOrientationState" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.MainLogicalNodeView" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel.#ctor(Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.DynamicUserControlBase">
      <apidata name="DynamicUserControlBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.ViewModel.DynamicUserControlBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.UserControls.ConstantNodeUserControl" ref="true" />
          <type api="T:Vishnu.UserControls.JobConnectorUserControl" ref="true" />
          <type api="T:Vishnu.UserControls.JobListUserControl" ref="true" />
          <type api="T:Vishnu.UserControls.NodeListUserControl" ref="true" />
          <type api="T:Vishnu.UserControls.SingleNodeUserControl" ref="true" />
          <type api="T:Vishnu.UserControls.SnapshotUserControl" ref="true" />
          <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
          <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRenderedEvent" />
        <element api="F:Vishnu.ViewModel.DynamicUserControlBase.AttachedNameProperty" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetAttachedName(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetAttachedName(System.Windows.DependencyObject,System.String)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.#ctor" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.AttachedName" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.DynamicUserControlBase.AttachedName">
      <apidata name="AttachedName" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AttachedName" />
      <setter name="set_AttachedName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.ViewModel.DynamicUserControlBase.AttachedNameProperty">
            <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.ViewModel.DynamicUserControlBase.GetAttachedName(System.Windows.DependencyObject)">
            <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.ViewModel.DynamicUserControlBase.SetAttachedName(System.Windows.DependencyObject,System.String)">
            <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.ViewModel.DynamicUserControlBase.AttachedNameProperty">
      <apidata name="AttachedNameProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose">
      <apidata name="DoDispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered">
      <apidata name="DynamicUserControl_ContentRendered" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_DynamicUserControl_ContentRendered" />
      <remover name="remove_DynamicUserControl_ContentRendered" />
      <eventhandler>
        <type api="T:System.Windows.RoutedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.Windows.RoutedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRenderedEvent">
      <apidata name="DynamicUserControl_ContentRenderedEvent" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.RoutedEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.GetAttachedName(System.Windows.DependencyObject)">
      <apidata name="GetAttachedName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition">
      <apidata name="GetParentViewAbsoluteScreenPosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Windows.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)">
      <apidata name="GetUserResultViewModel" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="vishnuViewModel">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered">
      <apidata name="OnDynamicUserControl_ContentRendered" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.SetAttachedName(System.Windows.DependencyObject,System.String)">
      <apidata name="SetAttachedName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext">
      <apidata name="SetContextMenuDataContext" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel">
      <apidata name="UserResultViewModel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UserResultViewModel" />
      <setter name="set_UserResultViewModel" />
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.DynamicUserControlViewModelBase">
      <apidata name="DynamicUserControlViewModelBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.NodeErrorViewModel" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:Vishnu.ViewModel.DynamicUserControlViewModelBase.ParentViewModel" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.GetResultProperty``1(System.Type,System.String)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.#ctor" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.GetResultProperty``1(System.Type,System.String)">
      <apidata name="GetResultProperty" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="requiredReturnObjectType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.GetResultProperty``1(System.Type,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.DynamicUserControlViewModelBase.ParentViewModel">
      <apidata name="ParentViewModel" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.IVishnuRenderWatcher">
      <apidata name="IVishnuRenderWatcher" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </implementors>
      <elements>
        <element api="M:Vishnu.ViewModel.IVishnuRenderWatcher.UserControlContentRendered(System.Object)" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.IVishnuRenderWatcher.UserControlContentRendered(System.Object)">
      <apidata name="UserControlContentRendered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="dynamicUserControl">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.IVishnuRenderWatcher" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.JobConnectorViewModel">
      <apidata name="JobConnectorViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.JobConnectorViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.JobConnectorViewModel.TreeElementLogicalStateChanged(System.Object,Vishnu.Interchange.NodeLogicalState)" />
        <element api="P:Vishnu.ViewModel.JobConnectorViewModel.ReferencedNodePath" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.GetHashCode" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunBreakText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonBreakText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.RunLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.RunOrBreakLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.BreakLogicalTaskTree" />
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobConnectorViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="singleNode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobConnectorViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobConnectorViewModel.ReferencedNodePath">
      <apidata name="ReferencedNodePath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReferencedNodePath" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobConnectorViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobConnectorViewModel.TreeElementLogicalStateChanged(System.Object,Vishnu.Interchange.NodeLogicalState)">
      <apidata name="TreeElementLogicalStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.SingleNodeViewModel.TreeElementLogicalStateChanged(System.Object,Vishnu.Interchange.NodeLogicalState)">
          <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobConnectorViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.JobGroupViewModel">
      <apidata name="JobGroupViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.ViewModel.JobGroupViewModel.RowCount" />
        <element api="F:Vishnu.ViewModel.JobGroupViewModel.ColumnCount" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.#ctor(Vishnu.ViewModel.JobListViewModel,Vishnu.Interchange.NodeTypes)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.canSwitchTaskTreeViewExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobGroupViewModel.ShowSettingsTaskTree" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.GroupJobList" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.FlatNodeViewModelList" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.GridRowCount" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.GridColumnCount" />
        <element api="P:Vishnu.ViewModel.JobGroupViewModel.LastExceptions" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.GetHashCode" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.Result" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.#ctor(Vishnu.ViewModel.JobListViewModel,Vishnu.Interchange.NodeTypes)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="rootJobListViewModel">
          <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
        </parameter>
        <parameter name="flatNodeListFilter">
          <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanClearInfosExecute">
      <apidata name="CanClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanClearInfosExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanLogTaskTreeExecute">
      <apidata name="CanLogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanLogTaskTreeExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanReloadTaskTreeExecute">
      <apidata name="CanReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanReloadTaskTreeExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanShowInfosExecute">
      <apidata name="CanShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowInfosExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanShowLogExecute">
      <apidata name="CanShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowLogExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.CanShowSettingsExecute">
      <apidata name="CanShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowSettingsExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.canSwitchTaskTreeViewExecute">
      <apidata name="canSwitchTaskTreeViewExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ClearInfosExecute(System.Object)">
      <apidata name="ClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ClearInfosExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.JobGroupViewModel.ColumnCount">
      <apidata name="ColumnCount" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.DebugMode">
      <apidata name="DebugMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DebugMode" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.DebugNodeInfos">
      <apidata name="DebugNodeInfos" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DebugNodeInfos" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.DoClearInfos">
      <apidata name="DoClearInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.DoShowInfos">
      <apidata name="DoShowInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.FlatNodeViewModelList">
      <apidata name="FlatNodeViewModelList" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FlatNodeViewModelList" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.GetDebugNodeInfos">
      <apidata name="GetDebugNodeInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.GetDebugNodeInfos">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.GetToolTipInfo">
      <apidata name="GetToolTipInfo" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.GetToolTipInfo">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.GridColumnCount">
      <apidata name="GridColumnCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GridColumnCount" />
      <setter name="set_GridColumnCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.GridRowCount">
      <apidata name="GridRowCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GridRowCount" />
      <setter name="set_GridRowCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.GroupJobList">
      <apidata name="GroupJobList" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GroupJobList" />
      <setter name="set_GroupJobList" />
      <returns>
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.IsTreePaused">
      <apidata name="IsTreePaused" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsTreePaused" />
      <setter name="set_IsTreePaused" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobGroupViewModel.LastExceptions">
      <apidata name="LastExceptions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastExceptions" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.LogTaskTreeExecute(System.Object)">
      <apidata name="LogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.LogTaskTreeExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ReloadTaskTreeExecute(System.Object)">
      <apidata name="ReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ReloadTaskTreeExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.JobGroupViewModel.RowCount">
      <apidata name="RowCount" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ShowInfosExecute(System.Object)">
      <apidata name="ShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowInfosExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ShowLogExecute(System.Object)">
      <apidata name="ShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowLogExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ShowLogTaskTree">
      <apidata name="ShowLogTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ShowSettingsExecute(System.Object)">
      <apidata name="ShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.ShowSettingsTaskTree">
      <apidata name="ShowSettingsTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobGroupViewModel.UserControlContentRendered(System.Object)">
      <apidata name="UserControlContentRendered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="dynamicUserControl">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.ViewModel.IVishnuRenderWatcher.UserControlContentRendered(System.Object)">
          <type api="T:Vishnu.ViewModel.IVishnuRenderWatcher" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.JobListViewModel">
      <apidata name="JobListViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.NodeListViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.JobListViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.JobList,System.Boolean,System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.JobListViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.JobListViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.JobListViewModel.GetHashCode" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.IsActive" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.ButtonRunText" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.ButtonRunBreakText" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.ButtonBreakText" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.RunLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.RunOrBreakLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.JobListViewModel.BreakLogicalTaskTree" />
        <element api="M:Vishnu.ViewModel.NodeListViewModel.GetToolTipInfo" />
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobListViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.JobList,System.Boolean,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="jobList">
          <type api="T:LogicalTaskTree.JobList" ref="true" />
        </parameter>
        <parameter name="lazyLoadChildren">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.BreakLogicalTaskTree">
      <apidata name="BreakLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BreakLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.ButtonBreakText">
      <apidata name="ButtonBreakText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ButtonBreakText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.ButtonRunBreakText">
      <apidata name="ButtonRunBreakText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ButtonRunBreakText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.ButtonRunText">
      <apidata name="ButtonRunText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ButtonRunText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobListViewModel.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobListViewModel.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.IsActive">
      <apidata name="IsActive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsActive" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.RunLogicalTaskTree">
      <apidata name="RunLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.JobListViewModel.RunOrBreakLogicalTaskTree">
      <apidata name="RunOrBreakLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunOrBreakLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.JobListViewModel.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.LogicalNodeViewModel">
      <apidata name="LogicalNodeViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.NodeListViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Boolean,System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Boolean,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="myLogicalNode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lazyLoadChildren">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode">
      <apidata name="_myLogicalNode" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute">
      <apidata name="CanClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanClearInfosExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent">
      <apidata name="CanHandleExpanderExpandedEvent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute">
      <apidata name="CanLogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanLogTaskTreeExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute">
      <apidata name="CanReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanReloadTaskTreeExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute">
      <apidata name="CanShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowInfosExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute">
      <apidata name="CanShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowLogExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute">
      <apidata name="CanShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowSettingsExecute">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation">
      <apidata name="ChildOrientation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ChildOrientation" />
      <setter name="set_ChildOrientation" />
      <returns>
        <type api="T:System.Windows.Controls.Orientation" ref="false" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IExpandableNode.ChildOrientation">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Children">
      <apidata name="Children" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Children" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)">
      <apidata name="ClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ClearInfosExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand">
      <apidata name="CollapsedEventCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CollapsedEventCommand" />
      <setter name="set_CollapsedEventCommand" />
      <returns>
        <type nullable="true" api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)">
      <apidata name="CollapseTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="climbToTop">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode">
      <apidata name="DebugMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DebugMode" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos">
      <apidata name="DebugNodeInfos" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DebugNodeInfos" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos">
      <apidata name="DoClearInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos">
      <apidata name="DoShowInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.Equals(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand">
      <apidata name="ExpandedEventCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ExpandedEventCommand" />
      <setter name="set_ExpandedEventCommand" />
      <returns>
        <type nullable="true" api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)">
      <apidata name="ExpandTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="root">
          <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="climbToTop">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment">
      <apidata name="FreeComment" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FreeComment" />
      <setter name="set_FreeComment" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos">
      <apidata name="GetDebugNodeInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.GetDebugNodeInfos">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.GetHashCode">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode">
      <apidata name="GetLogicalNode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo">
      <apidata name="GetToolTipInfo" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.GetToolTipInfo">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel">
      <apidata name="GetTopRootJobListViewModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)">
      <apidata name="HandleExpanderCollapsedEvent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)">
      <apidata name="HandleExpanderExpandedEvent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)">
      <apidata name="HandleExpanderSizeChangedEvent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent">
      <apidata name="HasParent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasParent" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo">
      <apidata name="HookedTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HookedTo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Id">
      <apidata name="Id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Id" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IExpandableNode.Id">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded">
      <apidata name="IsExpanded" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsExpanded" />
      <setter name="set_IsExpanded" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IExpandableNode.IsExpanded">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime">
      <apidata name="IsInSleepTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInSleepTime" />
      <setter name="set_IsInSleepTime" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected">
      <apidata name="IsSelected" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsSelected" />
      <setter name="set_IsSelected" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy">
      <apidata name="IsSnapshotDummy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsSnapshotDummy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused">
      <apidata name="IsTreePaused" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsTreePaused" />
      <setter name="set_IsTreePaused" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions">
      <apidata name="LastExceptions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastExceptions" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent">
      <apidata name="LastExecutingTreeEvent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastExecutingTreeEvent" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.TreeEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical">
      <apidata name="LastNotNullLogical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastNotNullLogical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun">
      <apidata name="LastRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo">
      <apidata name="LastRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LastRunInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren">
      <apidata name="LoadChildren" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical">
      <apidata name="Logical" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Logical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree">
      <apidata name="LogTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)">
      <apidata name="LogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.LogTaskTreeExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IExpandableNode.Name">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun">
      <apidata name="NextRun" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NextRun" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo">
      <apidata name="NextRunInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NextRunInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult">
      <apidata name="NextRunInfoAndResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NextRunInfoAndResult" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment">
      <apidata name="NodeEnvironment" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NodeEnvironment" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId">
      <apidata name="OriginalNodeId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OriginalNodeId" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent">
      <apidata name="Parent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Parent" />
      <setter name="set_Parent" />
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)">
      <apidata name="ParentViewToBL" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ParentViewToBL(System.Windows.FrameworkElement)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parentView">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Path">
      <apidata name="Path" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Path" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IExpandableNode.Path">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress">
      <apidata name="Progress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Progress" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText">
      <apidata name="ProgressText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProgressText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)">
      <apidata name="RefreshTreeView" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="nodeViewModel">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="node">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree">
      <apidata name="ReloadTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)">
      <apidata name="ReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ReloadTaskTreeExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Result">
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Vishnu.ViewModel.VishnuViewModelBase.Result">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" set="true" />
      <getter name="get_Result" />
      <setter name="set_Result" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuViewModel.Result">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Results">
      <apidata name="Results" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Results" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel">
      <apidata name="RootJobListViewModel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RootJobListViewModel" />
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})">
      <apidata name="SearchSibling" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sourceTree">
          <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
            <specialization>
              <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="indices">
          <type api="T:System.Collections.Generic.Stack`1" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)">
      <apidata name="SetChildOrientation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="mainTreeOrientation">
          <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult">
      <apidata name="ShortResult" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShortResult" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)">
      <apidata name="ShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowInfosExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)">
      <apidata name="ShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowLogExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree">
      <apidata name="ShowLogTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)">
      <apidata name="ShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsExecute(System.Object)">
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree">
      <apidata name="ShowSettingsTaskTree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes">
      <apidata name="SingleNodes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SingleNodes" />
      <setter name="set_SingleNodes" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished">
      <apidata name="SingleNodesFinished" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SingleNodesFinished" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand">
      <apidata name="SizeChangedEventCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SizeChangedEventCommand" />
      <setter name="set_SizeChangedEventCommand" />
      <returns>
        <type nullable="true" api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo">
      <apidata name="SleepTimeTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeTo" />
      <setter name="set_SleepTimeTo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation">
      <apidata name="StartTreeOrientation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StartTreeOrientation" />
      <setter name="set_StartTreeOrientation" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)">
      <apidata name="subLastNotNullLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="lastNotNullLogical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eventId">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})">
      <apidata name="subLogicalChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="logical">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="subNodeProgressChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="subNodeProgressFinished" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
      <apidata name="SubNodeProgressStarted" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:System.ComponentModel.ProgressChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)">
      <apidata name="SubNodePropertiesChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)">
      <apidata name="SubNodeWorkersStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)">
      <apidata name="subPropertiesChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="args">
          <type api="T:NetEti.MVVMini.PropertiesChangedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)">
      <apidata name="subStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:Vishnu.Interchange.NodeState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})">
      <apidata name="TransferShadowTreeProperties" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sourceTree">
          <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
            <specialization>
              <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="destinationTree">
          <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
            <specialization>
              <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="indices">
          <type api="T:System.Collections.Generic.Stack`1" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)">
      <apidata name="TransferSiblingProperties" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sibling">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="node">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IExpandableNode.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})">
          <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)">
      <apidata name="Traverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="userObject">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)">
      <apidata name="traverse" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="depth">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Vishnu.Interchange.IExpandableNode" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="userObject">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams">
      <apidata name="TreeParams" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeParams" />
      <setter name="set_TreeParams" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher">
      <apidata name="UIDispatcher" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UIDispatcher" />
      <setter name="set_UIDispatcher" />
      <returns>
        <type api="T:System.Windows.Threading.Dispatcher" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain">
      <apidata name="UIMain" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UIMain" />
      <setter name="set_UIMain" />
      <returns>
        <type api="T:System.Windows.FrameworkElement" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath">
      <apidata name="UserControlPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_UserControlPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility">
      <apidata name="Visibility" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Visibility" />
      <setter name="set_Visibility" />
      <returns>
        <type api="T:System.Windows.Visibility" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState">
      <apidata name="VisualState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_VisualState" />
      <setter name="set_VisualState" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState">
      <apidata name="WorkersState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WorkersState" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.LogicalTaskTreeViewModel">
      <apidata name="LogicalTaskTreeViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.#ctor(LogicalTaskTree.LogicalTaskTree,System.Windows.FrameworkElement,Vishnu.Interchange.TreeOrientation,Vishnu.Interchange.NodeTypes,Vishnu.Interchange.TreeParameters)" />
        <element api="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.FlattenTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},Vishnu.Interchange.NodeTypes,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.SaveTreeState(Vishnu.Interchange.WindowAspects)" />
        <element api="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.InfoSource" />
        <element api="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.RunLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.BreakLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeVM" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeParams" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeOrientationState" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.MainLogicalNodeView" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.#ctor(LogicalTaskTree.LogicalTaskTree,System.Windows.FrameworkElement,Vishnu.Interchange.TreeOrientation,Vishnu.Interchange.NodeTypes,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="businessLogic">
          <type api="T:LogicalTaskTree.LogicalTaskTree" ref="true" />
        </parameter>
        <parameter name="uiMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="startTreeOrientation">
          <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
        </parameter>
        <parameter name="flatNodeListFilter">
          <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.BreakLogicalTaskTree">
      <apidata name="BreakLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BreakLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.FlattenTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},Vishnu.Interchange.NodeTypes,System.Boolean)">
      <apidata name="FlattenTree" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="root">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="flatNodeList">
          <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
            <specialization>
              <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="flatNodeListFilter">
          <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
        </parameter>
        <parameter name="withRoot" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.InfoSource">
      <apidata name="InfoSource" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InfoSource" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.IsInSleepTime">
      <apidata name="IsInSleepTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInSleepTime" />
      <setter name="set_IsInSleepTime" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.RunLogicalTaskTree">
      <apidata name="RunLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.LogicalTaskTreeViewModel.SaveTreeState(Vishnu.Interchange.WindowAspects)">
      <apidata name="SaveTreeState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="windowAspects">
          <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.LogicalTaskTreeViewModel.SleepTimeTo">
      <apidata name="SleepTimeTo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SleepTimeTo" />
      <setter name="set_SleepTimeTo" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.MainWindowViewModel">
      <apidata name="MainWindowViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.GetTopJobListViewModel" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.SetTopJobListViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.RefreshDependentAlternativeViewModels" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.#ctor(Vishnu.ViewModel.LogicalTaskTreeViewModel,System.Action{System.Object},Vishnu.Interchange.NodeTypes,System.String,Vishnu.Interchange.TreeParameters)" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.SaveTreeState(Vishnu.Interchange.WindowAspects)" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.SwitchTakTreeViewRouted(System.Object)" />
        <element api="M:Vishnu.ViewModel.MainWindowViewModel.ShowVishnuHelpTask" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.WindowTitle" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.TreeVM" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.JobGroupsVM" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.RunJobGroups" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.BreakJobGroups" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.InitSizeCommand" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.ShowVishnuHelpCommand" />
        <element api="P:Vishnu.ViewModel.MainWindowViewModel.SwitchTaskTreeViewRoutedCommand" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.#ctor(Vishnu.ViewModel.LogicalTaskTreeViewModel,System.Action{System.Object},Vishnu.Interchange.NodeTypes,System.String,Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
        </parameter>
        <parameter name="initWindowSize">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type nullable="true" api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="flatNodeListFilter">
          <type api="T:Vishnu.Interchange.NodeTypes" ref="false" />
        </parameter>
        <parameter name="additionalWindowHeaderInfo">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.BreakJobGroups">
      <apidata name="BreakJobGroups" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BreakJobGroups" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.GetTopJobListViewModel">
      <apidata name="GetTopJobListViewModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IViewModelRoot.GetTopJobListViewModel">
          <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.InitSizeCommand">
      <apidata name="InitSizeCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InitSizeCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.JobGroupsVM">
      <apidata name="JobGroupsVM" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_JobGroupsVM" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.RefreshDependentAlternativeViewModels">
      <apidata name="RefreshDependentAlternativeViewModels" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:Vishnu.Interchange.IViewModelRoot.RefreshDependentAlternativeViewModels">
          <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.RunJobGroups">
      <apidata name="RunJobGroups" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunJobGroups" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.SaveTreeState(Vishnu.Interchange.WindowAspects)">
      <apidata name="SaveTreeState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="windowAspects">
          <type api="T:Vishnu.Interchange.WindowAspects" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.SetTopJobListViewModel(Vishnu.Interchange.IVishnuViewModel)">
      <apidata name="SetTopJobListViewModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="topJobListViewModel">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
      </returns>
      <implements>
        <member api="M:Vishnu.Interchange.IViewModelRoot.SetTopJobListViewModel(Vishnu.Interchange.IVishnuViewModel)">
          <type api="T:Vishnu.Interchange.IViewModelRoot" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.ShowVishnuHelpCommand">
      <apidata name="ShowVishnuHelpCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShowVishnuHelpCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.ShowVishnuHelpTask">
      <apidata name="ShowVishnuHelpTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.MainWindowViewModel.SwitchTakTreeViewRouted(System.Object)">
      <apidata name="SwitchTakTreeViewRouted" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.SwitchTaskTreeViewRoutedCommand">
      <apidata name="SwitchTaskTreeViewRoutedCommand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SwitchTaskTreeViewRoutedCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.TreeParams">
      <apidata name="TreeParams" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TreeParams" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.TreeVM">
      <apidata name="TreeVM" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeVM" />
      <setter name="set_TreeVM" />
      <returns>
        <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.MainWindowViewModel.WindowTitle">
      <apidata name="WindowTitle" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WindowTitle" />
      <setter name="set_WindowTitle" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.MainWindowViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.NodeErrorViewModel">
      <apidata name="NodeErrorViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.NodeErrorViewModel.#ctor(Vishnu.Interchange.IVishnuViewModel,System.String)" />
        <element api="P:Vishnu.ViewModel.NodeErrorViewModel.DllPath" />
        <element api="F:Vishnu.ViewModel.DynamicUserControlViewModelBase.ParentViewModel" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlViewModelBase.GetResultProperty``1(System.Type,System.String)" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.NodeErrorViewModel.#ctor(Vishnu.Interchange.IVishnuViewModel,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="parentViewModel">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </parameter>
        <parameter name="dllPath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.NodeErrorViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.NodeErrorViewModel.DllPath">
      <apidata name="DllPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DllPath" />
      <setter name="set_DllPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.NodeErrorViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.NodeListViewModel">
      <apidata name="NodeListViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.NodeListViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.NodeListViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.NodeList,System.Boolean,System.Windows.FrameworkElement)" />
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.NodeListViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.NodeList,System.Boolean,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type nullable="true" api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="nodeList">
          <type api="T:LogicalTaskTree.NodeList" ref="true" />
        </parameter>
        <parameter name="lazyLoadChildren">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.NodeListViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.NodeListViewModel.GetToolTipInfo">
      <apidata name="GetToolTipInfo" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.NodeListViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.OrientedTreeViewModelBase">
      <apidata name="OrientedTreeViewModelBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.ViewModel.OrientedTreeViewModelBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.DummyLogicalTaskTreeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.LogicalTaskTreeViewModel" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.OrientedTreeViewModelBase.#ctor(Vishnu.Interchange.TreeParameters)" />
        <element api="M:Vishnu.ViewModel.OrientedTreeViewModelBase.#ctor" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeVM" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeParams" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeOrientationState" />
        <element api="P:Vishnu.ViewModel.OrientedTreeViewModelBase.MainLogicalNodeView" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.OrientedTreeViewModelBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.OrientedTreeViewModelBase.#ctor(Vishnu.Interchange.TreeParameters)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="treeParams">
          <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.OrientedTreeViewModelBase.MainLogicalNodeView">
      <apidata name="MainLogicalNodeView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_MainLogicalNodeView" />
      <setter name="set_MainLogicalNodeView" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeOrientationState">
      <apidata name="TreeOrientationState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeOrientationState" />
      <setter name="set_TreeOrientationState" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeOrientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeParams">
      <apidata name="TreeParams" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TreeParams" />
      <returns>
        <type api="T:Vishnu.Interchange.TreeParameters" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.OrientedTreeViewModelBase.TreeVM">
      <apidata name="TreeVM" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TreeVM" />
      <setter name="set_TreeVM" />
      <returns>
        <type api="T:Vishnu.ViewModel.JobListViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.SingleNodeViewModel">
      <apidata name="SingleNodeViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.JobConnectorViewModel" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.GetHashCode" />
        <element api="M:Vishnu.ViewModel.SingleNodeViewModel.TreeElementLogicalStateChanged(System.Object,Vishnu.Interchange.NodeLogicalState)" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunBreakText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonBreakText" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.RunLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.RunOrBreakLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.SingleNodeViewModel.BreakLogicalTaskTree" />
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SingleNodeViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="singleNode">
          <type api="T:LogicalTaskTree.LogicalNode" ref="true" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.BreakLogicalTaskTree">
      <apidata name="BreakLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BreakLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonBreakText">
      <apidata name="ButtonBreakText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ButtonBreakText" />
      <setter name="set_ButtonBreakText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunBreakText">
      <apidata name="ButtonRunBreakText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ButtonRunBreakText" />
      <setter name="set_ButtonRunBreakText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.ButtonRunText">
      <apidata name="ButtonRunText" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ButtonRunText" />
      <setter name="set_ButtonRunText" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SingleNodeViewModel.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SingleNodeViewModel.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.RunLogicalTaskTree">
      <apidata name="RunLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SingleNodeViewModel.RunOrBreakLogicalTaskTree">
      <apidata name="RunOrBreakLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RunOrBreakLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SingleNodeViewModel.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SingleNodeViewModel.TreeElementLogicalStateChanged(System.Object,Vishnu.Interchange.NodeLogicalState)">
      <apidata name="TreeElementLogicalStateChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:Vishnu.Interchange.NodeLogicalState" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SingleNodeViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.SnapshotViewModel">
      <apidata name="SnapshotViewModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.SnapshotViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.Snapshot,System.Boolean,System.Windows.FrameworkElement)" />
        <element api="P:Vishnu.ViewModel.SnapshotViewModel.SnapshotTime" />
        <element api="P:Vishnu.ViewModel.SnapshotViewModel.IsDefaultSnapshot" />
        <element api="P:Vishnu.ViewModel.SnapshotViewModel.IsInSnapshot" />
        <element api="P:Vishnu.ViewModel.SnapshotViewModel.SnapshotPath" />
        <element api="P:Vishnu.ViewModel.SnapshotViewModel.RefreshSnapshot" />
        <element api="F:Vishnu.ViewModel.LogicalNodeViewModel._myLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Finalize" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetToolTipInfo" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetTopRootJobListViewModel" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ReloadTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoShowInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.DoClearInfos" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowLogTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ShowSettingsTaskTree" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SetChildOrientation(Vishnu.Interchange.TreeOrientation)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderExpandedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CanHandleExpanderExpandedEvent" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderCollapsedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.HandleExpanderSizeChangedEvent(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ExpandTree(Vishnu.ViewModel.LogicalNodeViewModel,System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.CollapseTree(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetLogicalNode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Traverse(System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.traverse(System.Int32,System.Func{System.Int32,Vishnu.Interchange.IExpandableNode,System.Object,System.Object},System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ToString" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.GetHashCode" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.LoadChildren" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.RefreshTreeView(Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.LogicalNode)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferShadowTreeProperties(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SearchSibling(System.Collections.ObjectModel.ObservableCollection{Vishnu.ViewModel.LogicalNodeViewModel},System.Collections.Generic.Stack{System.Int32})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.TransferSiblingProperties(Vishnu.ViewModel.LogicalNodeViewModel,Vishnu.ViewModel.LogicalNodeViewModel)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subPropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLogicalChanged(System.Object,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subLastNotNullLogicalChanged(LogicalTaskTree.LogicalNode,System.Nullable{System.Boolean},System.Guid)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subStateChanged(System.Object,Vishnu.Interchange.NodeState)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeProgressStarted(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.subNodeProgressFinished(System.Object,System.ComponentModel.ProgressChangedEventArgs)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodeWorkersStateChanged(System.Object)" />
        <element api="M:Vishnu.ViewModel.LogicalNodeViewModel.SubNodePropertiesChanged(System.Object,NetEti.MVVMini.PropertiesChangedEventArgs)" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ExpandedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.CollapsedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SizeChangedEventCommand" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Children" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.FreeComment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HasParent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsInSleepTime" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsTreePaused" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SleepTimeTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Parent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsExpanded" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ChildOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSelected" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Path" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Visibility" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.VisualState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.TreeParams" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.HookedTo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Id" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.IsSnapshotDummy" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Logical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastNotNullLogical" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Name" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfoAndResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UserControlPath" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.WorkersState" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodes" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Progress" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ProgressText" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.SingleNodesFinished" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Result" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.ShortResult" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.Results" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NodeEnvironment" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExecutingTreeEvent" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastExceptions" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.LastRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRun" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.NextRunInfo" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.RootJobListViewModel" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.OriginalNodeId" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugNodeInfos" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.DebugMode" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.StartTreeOrientation" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIMain" />
        <element api="P:Vishnu.ViewModel.LogicalNodeViewModel.UIDispatcher" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.SnapshotViewModel.#ctor(Vishnu.ViewModel.OrientedTreeViewModelBase,Vishnu.ViewModel.LogicalNodeViewModel,LogicalTaskTree.Snapshot,System.Boolean,System.Windows.FrameworkElement)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="logicalTaskTreeViewModel">
          <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
        </parameter>
        <parameter name="parent">
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </parameter>
        <parameter name="snapshot">
          <type api="T:LogicalTaskTree.Snapshot" ref="true" />
        </parameter>
        <parameter name="lazyLoadChildren">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="uIMain">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SnapshotViewModel.IsDefaultSnapshot">
      <apidata name="IsDefaultSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDefaultSnapshot" />
      <setter name="set_IsDefaultSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SnapshotViewModel.IsInSnapshot">
      <apidata name="IsInSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInSnapshot" />
      <setter name="set_IsInSnapshot" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SnapshotViewModel.RefreshSnapshot">
      <apidata name="RefreshSnapshot" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RefreshSnapshot" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SnapshotViewModel.SnapshotPath">
      <apidata name="SnapshotPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotPath" />
      <setter name="set_SnapshotPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.SnapshotViewModel.SnapshotTime">
      <apidata name="SnapshotTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SnapshotTime" />
      <setter name="set_SnapshotTime" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.SnapshotViewModel" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.UIHelper">
      <apidata name="UIHelper" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfType``1(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfType``1(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAfterVisualChildOfTypeAndName``2(System.Windows.FrameworkElement,System.String)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfType``1(System.Windows.FrameworkElement)">
      <apidata name="FindFirstLogicalChildOfType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfType``1(System.Windows.FrameworkElement)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)">
      <apidata name="FindFirstLogicalChildOfTypeAndName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="name">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstLogicalChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfType``1(System.Windows.FrameworkElement)">
      <apidata name="FindFirstVisualChildOfType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfType``1(System.Windows.FrameworkElement)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAfterVisualChildOfTypeAndName``2(System.Windows.FrameworkElement,System.String)">
      <apidata name="FindFirstVisualChildOfTypeAfterVisualChildOfTypeAndName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
        <template name="U">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="predecessorName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAfterVisualChildOfTypeAndName``2(System.Windows.FrameworkElement,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)">
      <apidata name="FindFirstVisualChildOfTypeAndName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="name">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualChildOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)">
      <apidata name="FindFirstVisualParentOfType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfType``1(System.Windows.FrameworkElement)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfTypeAndName``1(System.Windows.FrameworkElement,System.String)">
      <apidata name="FindFirstVisualParentOfTypeAndName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Windows.FrameworkElement" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="element">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
        <parameter name="name">
          <type nullable="true" api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Vishnu.ViewModel.UIHelper.FindFirstVisualParentOfTypeAndName``1(System.Windows.FrameworkElement,System.String)" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.UIHelper" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.VishnuViewModelBase">
      <apidata name="VishnuViewModelBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" defaultConstructor="M:Vishnu.ViewModel.VishnuViewModelBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:NetEti.MVVMini.ObservableObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Vishnu.ViewModel.JobGroupViewModel" ref="true" />
          <type api="T:Vishnu.ViewModel.LogicalNodeViewModel" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        <type api="T:Vishnu.ViewModel.IVishnuRenderWatcher" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber" />
        <element api="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.GetDebugNodeInfos" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ReloadTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanReloadTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.LogTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanLogTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowLogExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowLogExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowInfosExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ClearInfosExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanClearInfosExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowSettingsExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.#ctor" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.Equals(System.Object)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.GetHashCode" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.ParentViewToBL(System.Windows.FrameworkElement)" />
        <element api="M:Vishnu.ViewModel.VishnuViewModelBase.GetToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.Result" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress" />
        <element api="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel" />
        <element api="F:NetEti.MVVMini.ObservableObject.Dispatcher" />
        <element api="M:NetEti.MVVMini.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
        <element api="M:NetEti.MVVMini.ObservableObject.RaisePropertyChanged(System.String)" />
        <element api="M:NetEti.MVVMini.ObservableObject.VerifyCalledOnUIThread" />
        <element api="E:NetEti.MVVMini.ObservableObject.PropertyChanged" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanClearInfosExecute">
      <apidata name="CanClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanLogTaskTreeExecute">
      <apidata name="CanLogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanPauseResumeTaskTreeExecute">
      <apidata name="CanPauseResumeTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanReloadTaskTreeExecute">
      <apidata name="CanReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowInfosExecute">
      <apidata name="CanShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowLogExecute">
      <apidata name="CanShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowSettingsExecute">
      <apidata name="CanShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.CanShowVishnuHelpExecute">
      <apidata name="CanShowVishnuHelpExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.canSwitchTaskTreeViewExecute">
      <apidata name="canSwitchTaskTreeViewExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ClearInfos">
      <apidata name="ClearInfos" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ClearInfos" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ClearInfosExecute(System.Object)">
      <apidata name="ClearInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VishnuViewModelBase.ColumnNumber">
      <apidata name="ColumnNumber" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.CopyToolTipInfoToClipboard">
      <apidata name="CopyToolTipInfoToClipboard" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CopyToolTipInfoToClipboard" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.GetDebugNodeInfos">
      <apidata name="GetDebugNodeInfos" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.GetToolTipInfo">
      <apidata name="GetToolTipInfo" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.GridColumn">
      <apidata name="GridColumn" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GridColumn" />
      <setter name="set_GridColumn" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.GridRow">
      <apidata name="GridRow" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GridRow" />
      <setter name="set_GridRow" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.Invalidate">
      <apidata name="Invalidate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.IsRendered">
      <apidata name="IsRendered" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsRendered" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.JobInProgress">
      <apidata name="JobInProgress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_JobInProgress" />
      <setter name="set_JobInProgress" />
      <returns>
        <type nullable="true" api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.LogLogicalTaskTree">
      <apidata name="LogLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LogLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.LogTaskTreeExecute(System.Object)">
      <apidata name="LogTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ParentView">
      <apidata name="ParentView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_ParentView" />
      <setter name="set_ParentView" />
      <returns>
        <type nullable="true" api="T:System.Windows.FrameworkElement" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuViewModel.ParentView">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ParentViewToBL(System.Windows.FrameworkElement)">
      <apidata name="ParentViewToBL" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parentView">
          <type api="T:System.Windows.FrameworkElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeLogicalTaskTree">
      <apidata name="PauseResumeLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PauseResumeLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.PauseResumeTaskTreeExecute(System.Object)">
      <apidata name="PauseResumeTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ReloadLogicalTaskTree">
      <apidata name="ReloadLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReloadLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ReloadTaskTreeExecute(System.Object)">
      <apidata name="ReloadTaskTreeExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.Result">
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Result" />
      <setter name="set_Result" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.Result" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuViewModel.Result">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.RootLogicalTaskTreeViewModel">
      <apidata name="RootLogicalTaskTreeViewModel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RootLogicalTaskTreeViewModel" />
      <setter name="set_RootLogicalTaskTreeViewModel" />
      <returns>
        <type api="T:Vishnu.ViewModel.OrientedTreeViewModelBase" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VishnuViewModelBase.RowNumber">
      <apidata name="RowNumber" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ShowInfos">
      <apidata name="ShowInfos" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShowInfos" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ShowInfosExecute(System.Object)">
      <apidata name="ShowInfosExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ShowLogExecute(System.Object)">
      <apidata name="ShowLogExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ShowLogLogicalTaskTree">
      <apidata name="ShowLogLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShowLogLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsExecute(System.Object)">
      <apidata name="ShowSettingsExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ShowSettingsLogicalTaskTree">
      <apidata name="ShowSettingsLogicalTaskTree" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShowSettingsLogicalTaskTree" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelp">
      <apidata name="ShowVishnuHelp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ShowVishnuHelp" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpExecute(System.Object)">
      <apidata name="ShowVishnuHelpExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.ShowVishnuHelpTask">
      <apidata name="ShowVishnuHelpTask" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.SwitchTaskTreeView">
      <apidata name="SwitchTaskTreeView" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SwitchTaskTreeView" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.switchTaskTreeViewExecute(System.Object)">
      <apidata name="switchTaskTreeViewExecute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.ToolTipInfo">
      <apidata name="ToolTipInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ToolTipInfo" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.ViewModel.VishnuViewModelBase.UserControlContentRendered(System.Object)">
      <apidata name="UserControlContentRendered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="dynamicUserControl">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Vishnu.ViewModel.IVishnuRenderWatcher.UserControlContentRendered(System.Object)">
          <type api="T:Vishnu.ViewModel.IVishnuRenderWatcher" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.UserDataContext">
      <apidata name="UserDataContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_UserDataContext" />
      <setter name="set_UserDataContext" />
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:Vishnu.Interchange.IVishnuViewModel.UserDataContext">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.ViewModel.VishnuViewModelBase.VisualTreeCacheBreaker">
      <apidata name="VisualTreeCacheBreaker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_VisualTreeCacheBreaker" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VishnuViewModelBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.VisualNodeState">
      <apidata name="VisualNodeState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.ViewModel.VisualNodeState.None" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Scheduled" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Waiting" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Working" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Error" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Aborted" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.Done" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.EventTriggered" />
        <element api="F:Vishnu.ViewModel.VisualNodeState.InternalError" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Aborted">
      <apidata name="Aborted" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Done">
      <apidata name="Done" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Error">
      <apidata name="Error" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.EventTriggered">
      <apidata name="EventTriggered" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>7</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.InternalError">
      <apidata name="InternalError" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Scheduled">
      <apidata name="Scheduled" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Waiting">
      <apidata name="Waiting" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeState.Working">
      <apidata name="Working" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeState" ref="false" />
      </containers>
    </api>
    <api id="T:Vishnu.ViewModel.VisualNodeWorkerState">
      <apidata name="VisualNodeWorkerState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Vishnu.ViewModel.VisualNodeWorkerState.None" />
        <element api="F:Vishnu.ViewModel.VisualNodeWorkerState.Invalid" />
        <element api="F:Vishnu.ViewModel.VisualNodeWorkerState.Valid" />
      </elements>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeWorkerState.Invalid">
      <apidata name="Invalid" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeWorkerState.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="F:Vishnu.ViewModel.VisualNodeWorkerState.Valid">
      <apidata name="Valid" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Vishnu.ViewModel" module="Vishnu.ViewModel" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.ViewModel" />
        <type api="T:Vishnu.ViewModel.VisualNodeWorkerState" ref="false" />
      </containers>
    </api>
    <api id="N:Vishnu.WPF_UI">
      <apidata name="Vishnu.WPF_UI" group="namespace" />
      <elements>
        <element api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" />
        <element api="T:Vishnu.WPF_UI.LogicalTaskTreeControl" />
        <element api="T:Vishnu.WPF_UI.MainWindow" />
        <element api="T:Vishnu.WPF_UI.NodeErrorControl" />
      </elements>
    </api>
    <api id="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl">
      <apidata name="LogicalTaskJobGroupsControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.#ctor" />
        <element api="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.DoDispose" />
        <element api="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.SetContextMenuDataContext" />
        <element api="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.InitializeComponent" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.DoDispose">
      <apidata name="DoDispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose">
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.OnDynamicUserControl_ContentRendered">
      <apidata name="OnDynamicUserControl_ContentRendered" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered">
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskJobGroupsControl.SetContextMenuDataContext">
      <apidata name="SetContextMenuDataContext" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext">
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskJobGroupsControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.LogicalTaskTreeControl">
      <apidata name="LogicalTaskTreeControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.LogicalTaskTreeControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.LogicalTaskTreeControl.#ctor" />
        <element api="M:Vishnu.WPF_UI.LogicalTaskTreeControl.InitializeComponent" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskTreeControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskTreeControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.LogicalTaskTreeControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.LogicalTaskTreeControl" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.MainWindow">
      <apidata name="MainWindow" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Window" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="F:Vishnu.WPF_UI.MainWindow.SaveWindowAspectsAndCallViewModelLogicCommand" />
        <element api="F:Vishnu.WPF_UI.MainWindow.IsRelocating" />
        <element api="M:Vishnu.WPF_UI.MainWindow.#ctor(System.Boolean,System.Boolean,Vishnu.Interchange.WindowAspects)" />
        <element api="M:Vishnu.WPF_UI.MainWindow.OnSourceInitialized(System.EventArgs)" />
        <element api="M:Vishnu.WPF_UI.MainWindow.ForceRecalculateWindowMeasures(System.Object)" />
        <element api="M:Vishnu.WPF_UI.MainWindow.RecalculateWindowMeasures" />
        <element api="M:Vishnu.WPF_UI.MainWindow.MoveWindowToStartPosition" />
        <element api="M:Vishnu.WPF_UI.MainWindow.InitializeComponent" />
        <element api="P:Vishnu.WPF_UI.MainWindow.SizeOnVirtualScreen" />
        <element api="P:Vishnu.WPF_UI.MainWindow.MinLeft" />
        <element api="P:Vishnu.WPF_UI.MainWindow.MinTop" />
        <element api="P:Vishnu.WPF_UI.MainWindow.FirstSelectedIndex" />
        <element api="P:Vishnu.WPF_UI.MainWindow.MainWindowAspects" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.#ctor(System.Boolean,System.Boolean,Vishnu.Interchange.WindowAspects)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="startWithJobs">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="sizeOnVirtualScreen">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="mainWindowStartAspects">
          <type nullable="true" api="T:Vishnu.Interchange.WindowAspects" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.MainWindow.FirstSelectedIndex">
      <apidata name="FirstSelectedIndex" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FirstSelectedIndex" />
      <setter name="set_FirstSelectedIndex" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.ForceRecalculateWindowMeasures(System.Object)">
      <apidata name="ForceRecalculateWindowMeasures" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameter">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.MainWindow.IsRelocating">
      <apidata name="IsRelocating" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.MainWindow.MainWindowAspects">
      <apidata name="MainWindowAspects" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MainWindowAspects" />
      <setter name="set_MainWindowAspects" />
      <returns>
        <type nullable="true" api="T:Vishnu.Interchange.WindowAspects" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.MainWindow.MinLeft">
      <apidata name="MinLeft" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MinLeft" />
      <setter name="set_MinLeft" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.MainWindow.MinTop">
      <apidata name="MinTop" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MinTop" />
      <setter name="set_MinTop" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.MoveWindowToStartPosition">
      <apidata name="MoveWindowToStartPosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.OnSourceInitialized(System.EventArgs)">
      <apidata name="OnSourceInitialized" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <type api="T:System.Windows.Window" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="e">
          <type api="T:System.EventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.MainWindow.RecalculateWindowMeasures">
      <apidata name="RecalculateWindowMeasures" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.MainWindow.SaveWindowAspectsAndCallViewModelLogicCommand">
      <apidata name="SaveWindowAspectsAndCallViewModelLogicCommand" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Windows.Input.RoutedUICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.MainWindow.SizeOnVirtualScreen">
      <apidata name="SizeOnVirtualScreen" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SizeOnVirtualScreen" />
      <setter name="set_SizeOnVirtualScreen" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.MainWindow" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.NodeErrorControl">
      <apidata name="NodeErrorControl" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.NodeErrorControl.#ctor" />
      <family>
        <ancestors>
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
          <type api="T:System.Windows.Controls.UserControl" ref="true" />
          <type api="T:System.Windows.Controls.ContentControl" ref="true" contentProperty="P:System.Windows.Controls.ContentControl.Content" />
          <type api="T:System.Windows.Controls.Control" ref="true" />
          <type api="T:System.Windows.FrameworkElement" ref="true" />
          <type api="T:System.Windows.UIElement" ref="true" />
          <type api="T:System.Windows.Media.Visual" ref="true" />
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.NodeErrorControl.#ctor" />
        <element api="M:Vishnu.WPF_UI.NodeErrorControl.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)" />
        <element api="M:Vishnu.WPF_UI.NodeErrorControl.InitializeComponent" />
        <element api="P:Vishnu.WPF_UI.NodeErrorControl.DllPath" />
        <element api="P:Vishnu.WPF_UI.NodeErrorControl.NodeErrorUserResultViewModel" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Dispose(System.Boolean)" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.DoDispose" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.Finalize" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.GetParentViewAbsoluteScreenPosition" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.OnDynamicUserControl_ContentRendered" />
        <element api="M:Vishnu.ViewModel.DynamicUserControlBase.SetContextMenuDataContext" />
        <element api="P:Vishnu.ViewModel.DynamicUserControlBase.UserResultViewModel" />
        <element api="E:Vishnu.ViewModel.DynamicUserControlBase.DynamicUserControl_ContentRendered" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.NodeErrorControl.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.NodeErrorControl.DllPath">
      <apidata name="DllPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DllPath" />
      <setter name="set_DllPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.NodeErrorControl.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)">
      <apidata name="GetUserResultViewModel" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Vishnu.ViewModel.DynamicUserControlBase.GetUserResultViewModel(Vishnu.Interchange.IVishnuViewModel)">
          <type api="T:Vishnu.ViewModel.DynamicUserControlBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="vishnuViewModel">
          <type api="T:Vishnu.Interchange.IVishnuViewModel" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Vishnu.ViewModel.DynamicUserControlViewModelBase" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.NodeErrorControl.InitializeComponent">
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
          <type api="T:System.Windows.Markup.IComponentConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.NodeErrorControl.NodeErrorUserResultViewModel">
      <apidata name="NodeErrorUserResultViewModel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NodeErrorUserResultViewModel" />
      <setter name="set_NodeErrorUserResultViewModel" />
      <returns>
        <type nullable="true" api="T:Vishnu.ViewModel.NodeErrorViewModel" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI" />
        <type api="T:Vishnu.WPF_UI.NodeErrorControl" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.WPF_UI.Behaviours">
      <apidata name="Vishnu.WPF_UI.Behaviours" group="namespace" />
      <elements>
        <element api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" />
        <element api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" />
      </elements>
    </api>
    <api id="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour">
      <apidata name="CenterOnSizeChangeBehaviour" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.CenterOnSizeChangeProperty" />
        <element api="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.GetCenterOnSizeChange(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.SetCenterOnSizeChange(System.Windows.DependencyObject,System.Boolean)" />
        <element api="P:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.CenterOnSizeChange" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.CenterOnSizeChange">
      <apidata name="CenterOnSizeChange" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CenterOnSizeChange" />
      <setter name="set_CenterOnSizeChange" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.CenterOnSizeChangeProperty">
            <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.GetCenterOnSizeChange(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.SetCenterOnSizeChange(System.Windows.DependencyObject,System.Boolean)">
            <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.CenterOnSizeChangeProperty">
      <apidata name="CenterOnSizeChangeProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.GetCenterOnSizeChange(System.Windows.DependencyObject)">
      <apidata name="GetCenterOnSizeChange" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour.SetCenterOnSizeChange(System.Windows.DependencyObject,System.Boolean)">
      <apidata name="SetCenterOnSizeChange" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.CenterOnSizeChangeBehaviour" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour">
      <apidata name="ExpanderBehaviour" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedCommandProperty" />
        <element api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedCommandProperty" />
        <element api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedCommandProperty" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetExpandedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetExpandedCommand(System.Windows.UIElement)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedEventHandler(System.Object,System.Windows.RoutedEventArgs)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetCollapsedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetCollapsedCommand(System.Windows.UIElement)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedEventHandler(System.Object,System.Windows.RoutedEventArgs)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetSizeChangedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetSizeChangedCommand(System.Windows.UIElement)" />
        <element api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedEventHandler(System.Object,System.Windows.RoutedEventArgs)" />
        <element api="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedCommand" />
        <element api="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedCommand" />
        <element api="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedCommand" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedCommand">
      <apidata name="CollapsedCommand" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CollapsedCommand" />
      <setter name="set_CollapsedCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedCommandProperty">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetCollapsedCommand(System.Windows.UIElement)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetCollapsedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedCommandProperty">
      <apidata name="CollapsedCommandProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.CollapsedEventHandler(System.Object,System.Windows.RoutedEventArgs)">
      <apidata name="CollapsedEventHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.RoutedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedCommand">
      <apidata name="ExpandedCommand" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ExpandedCommand" />
      <setter name="set_ExpandedCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedCommandProperty">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetExpandedCommand(System.Windows.UIElement)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetExpandedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedCommandProperty">
      <apidata name="ExpandedCommandProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.ExpandedEventHandler(System.Object,System.Windows.RoutedEventArgs)">
      <apidata name="ExpandedEventHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.RoutedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetCollapsedCommand(System.Windows.UIElement)">
      <apidata name="GetCollapsedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetExpandedCommand(System.Windows.UIElement)">
      <apidata name="GetExpandedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetSizeChangedCommand(System.Windows.UIElement)">
      <apidata name="GetSizeChangedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetCollapsedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
      <apidata name="SetCollapsedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetExpandedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
      <apidata name="SetExpandedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetSizeChangedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
      <apidata name="SetSizeChangedCommand" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.UIElement" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Windows.Input.ICommand" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedCommand">
      <apidata name="SizeChangedCommand" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SizeChangedCommand" />
      <setter name="set_SizeChangedCommand" />
      <returns>
        <type api="T:System.Windows.Input.ICommand" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedCommandProperty">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.GetSizeChangedCommand(System.Windows.UIElement)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SetSizeChangedCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedCommandProperty">
      <apidata name="SizeChangedCommandProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour.SizeChangedEventHandler(System.Object,System.Windows.RoutedEventArgs)">
      <apidata name="SizeChangedEventHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.RoutedEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.Behaviours" />
        <type api="T:Vishnu.WPF_UI.Behaviours.ExpanderBehaviour" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.WPF_UI.DependencyProperties">
      <apidata name="Vishnu.WPF_UI.DependencyProperties" group="namespace" />
      <elements>
        <element api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" />
        <element api="T:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch" />
        <element api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" />
        <element api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" />
      </elements>
    </api>
    <api id="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer">
      <apidata name="AttachedPropertiesContainer" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.LastNotNullLogicalProperty" />
        <element api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.HasParentProperty" />
        <element api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.ParentChildOrientationProperty" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetLastNotNullLogical(System.Windows.DependencyObject,System.Nullable{System.Boolean})" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetLastNotNullLogical(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetHasParent(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetHasParent(System.Windows.DependencyObject,System.Boolean)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetParentChildOrientation(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetParentChildOrientation(System.Windows.DependencyObject,System.Windows.Controls.Orientation)" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.LastNotNullLogical" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.HasParent" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.ParentChildOrientation" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetHasParent(System.Windows.DependencyObject)">
      <apidata name="GetHasParent" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetLastNotNullLogical(System.Windows.DependencyObject)">
      <apidata name="GetLastNotNullLogical" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetParentChildOrientation(System.Windows.DependencyObject)">
      <apidata name="GetParentChildOrientation" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Windows.Controls.Orientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.HasParent">
      <apidata name="HasParent" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HasParent" />
      <setter name="set_HasParent" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.HasParentProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetHasParent(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetHasParent(System.Windows.DependencyObject,System.Boolean)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.HasParentProperty">
      <apidata name="HasParentProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.LastNotNullLogical">
      <apidata name="LastNotNullLogical" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LastNotNullLogical" />
      <setter name="set_LastNotNullLogical" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.LastNotNullLogicalProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetLastNotNullLogical(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetLastNotNullLogical(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.LastNotNullLogicalProperty">
      <apidata name="LastNotNullLogicalProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.ParentChildOrientation">
      <apidata name="ParentChildOrientation" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ParentChildOrientation" />
      <setter name="set_ParentChildOrientation" />
      <returns>
        <type api="T:System.Windows.Controls.Orientation" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.ParentChildOrientationProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.GetParentChildOrientation(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetParentChildOrientation(System.Windows.DependencyObject,System.Windows.Controls.Orientation)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.ParentChildOrientationProperty">
      <apidata name="ParentChildOrientationProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetHasParent(System.Windows.DependencyObject,System.Boolean)">
      <apidata name="SetHasParent" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetLastNotNullLogical(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
      <apidata name="SetLastNotNullLogical" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="val">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer.SetParentChildOrientation(System.Windows.DependencyObject,System.Windows.Controls.Orientation)">
      <apidata name="SetParentChildOrientation" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Windows.Controls.Orientation" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.AttachedPropertiesContainer" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch">
      <apidata name="BinaryModificationSwitch" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.#ctor" contentProperty="P:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.OrientationModification" />
      <family>
        <ancestors>
          <type api="T:System.Windows.DependencyObject" ref="true" />
          <type api="T:System.Windows.Threading.DispatcherObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.OrientationModificationProperty" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.#ctor" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.OrientationModification" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Windows.Markup.ContentPropertyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>OrientationModification</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.OrientationModification">
      <apidata name="OrientationModification" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OrientationModification" />
      <setter name="set_OrientationModification" />
      <returns>
        <type api="T:Vishnu.Interchange.OrientationSwitch" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch.OrientationModificationProperty">
      <apidata name="OrientationModificationProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.BinaryModificationSwitch" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers">
      <apidata name="GridHelpers" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCountProperty" />
        <element api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCountProperty" />
        <element api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsPropertiesProperty" />
        <element api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsPropertiesProperty" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowCount(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowCount(System.Windows.DependencyObject,System.Int32)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnCount(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnCount(System.Windows.DependencyObject,System.Int32)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowsProperties(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowsProperties(System.Windows.DependencyObject,System.String)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnsProperties(System.Windows.DependencyObject)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnsProperties(System.Windows.DependencyObject,System.String)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCount" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCount" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsProperties" />
        <element api="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsProperties" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCount">
      <apidata name="ColumnCount" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ColumnCount" />
      <setter name="set_ColumnCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCountProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnCount(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnCount(System.Windows.DependencyObject,System.Int32)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <apidata name="ColumnCountChanged" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.DependencyPropertyChangedEventArgs" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnCountProperty">
      <apidata name="ColumnCountProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsProperties">
      <apidata name="ColumnsProperties" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ColumnsProperties" />
      <setter name="set_ColumnsProperties" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsPropertiesProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnsProperties(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnsProperties(System.Windows.DependencyObject,System.String)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <apidata name="ColumnsPropertiesChanged" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.DependencyPropertyChangedEventArgs" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.ColumnsPropertiesProperty">
      <apidata name="ColumnsPropertiesProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnCount(System.Windows.DependencyObject)">
      <apidata name="GetColumnCount" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetColumnsProperties(System.Windows.DependencyObject)">
      <apidata name="GetColumnsProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowCount(System.Windows.DependencyObject)">
      <apidata name="GetRowCount" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowsProperties(System.Windows.DependencyObject)">
      <apidata name="GetRowsProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCount">
      <apidata name="RowCount" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RowCount" />
      <setter name="set_RowCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCountProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowCount(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowCount(System.Windows.DependencyObject,System.Int32)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <apidata name="RowCountChanged" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.DependencyPropertyChangedEventArgs" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowCountProperty">
      <apidata name="RowCountProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="P:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsProperties">
      <apidata name="RowsProperties" group="member" subgroup="property" subsubgroup="attachedProperty" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RowsProperties" />
      <setter name="set_RowsProperties" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
      <attachedpropertydata>
        <field>
          <member api="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsPropertiesProperty">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </field>
        <getter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.GetRowsProperties(System.Windows.DependencyObject)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </getter>
        <setter>
          <member api="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowsProperties(System.Windows.DependencyObject,System.String)">
            <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
          </member>
        </setter>
      </attachedpropertydata>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsPropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <apidata name="RowsPropertiesChanged" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Windows.DependencyPropertyChangedEventArgs" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="F:Vishnu.WPF_UI.DependencyProperties.GridHelpers.RowsPropertiesProperty">
      <apidata name="RowsPropertiesProperty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Windows.DependencyProperty" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnCount(System.Windows.DependencyObject,System.Int32)">
      <apidata name="SetColumnCount" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetColumnsProperties(System.Windows.DependencyObject,System.String)">
      <apidata name="SetColumnsProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowCount(System.Windows.DependencyObject,System.Int32)">
      <apidata name="SetRowCount" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.GridHelpers.SetRowsProperties(System.Windows.DependencyObject,System.String)">
      <apidata name="SetRowsProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Windows.DependencyObject" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.GridHelpers" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter">
      <apidata name="OrientationSwitchTypeConverter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />
        <element api="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <apidata name="CanConvertFrom" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
        <parameter name="sourceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <apidata name="CanConvertTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
        <parameter name="destinationType">
          <type nullable="true" api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <apidata name="ConvertFrom" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
        <parameter name="culture">
          <type nullable="true" api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <apidata name="ConvertTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
        <parameter name="culture">
          <type nullable="true" api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
        <parameter name="value">
          <type nullable="true" api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="destinationType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <apidata name="GetStandardValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.TypeConverter.StandardValuesCollection" ref="true">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <apidata name="GetStandardValuesSupported" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <type api="T:System.ComponentModel.TypeConverter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="context">
          <type nullable="true" api="T:System.ComponentModel.ITypeDescriptorContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.DependencyProperties" />
        <type api="T:Vishnu.WPF_UI.DependencyProperties.OrientationSwitchTypeConverter" ref="true" />
      </containers>
    </api>
    <api id="N:Vishnu.WPF_UI.ValueConverter">
      <apidata name="Vishnu.WPF_UI.ValueConverter" group="namespace" />
      <elements>
        <element api="T:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.EqualityConverter" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.OrientationModifier" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage" />
        <element api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText" />
      </elements>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection">
      <apidata name="ChildOrientationToExpandDirection" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.ChildOrientationToExpandDirection" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.EqualityConverter">
      <apidata name="EqualityConverter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.EqualityConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="values">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.EqualityConverter" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.EqualityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetTypes">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.EqualityConverter" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue">
      <apidata name="NotEmptyToTrue" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NotEmptyToTrue" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush">
      <apidata name="NullableBoolToBrush" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="values">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetTypes">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.NullableBoolToBrush" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.OrientationModifier">
      <apidata name="OrientationModifier" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.OrientationModifier" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="values">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.OrientationModifier" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.OrientationModifier.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetTypes">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.OrientationModifier" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase">
      <apidata name="Path2UserControlBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="values">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type nullable="true" api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.Path2UserControlBase" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage">
      <apidata name="VisualNodeStateToBitmapImage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="values">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetTypes">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IMultiValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeStateToBitmapImage" ref="true" />
      </containers>
    </api>
    <api id="T:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText">
      <apidata name="VisualNodeWorkerStateToText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Windows.Data.IValueConverter" ref="true" />
      </implements>
      <elements>
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
        <element api="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.#ctor" />
      </elements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText" ref="true" />
      </containers>
    </api>
    <api id="M:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <apidata name="ConvertBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="targetType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="parameter">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
          <type api="T:System.Windows.Data.IValueConverter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Vishnu.WPF_UI" module="Vishnu.WPF_UI" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Vishnu.WPF_UI.ValueConverter" />
        <type api="T:Vishnu.WPF_UI.ValueConverter.VisualNodeWorkerStateToText" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>